<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="https://dmenezesgabriel.github.io//feed.xml" rel="self" type="application/atom+xml" /><link href="https://dmenezesgabriel.github.io//" rel="alternate" type="text/html" /><updated>2020-06-24T22:47:52+00:00</updated><id>https://dmenezesgabriel.github.io//feed.xml</id><title type="html">Gabriel Menezes</title><subtitle>This blog was created in order to register and demonstrate my learnings, thus being able to help other people with the acquired knowledge.</subtitle><author><name>Gabriel Menezes</name></author><entry xml:lang="en_US"><title type="html">Making a Database Handler pt.4 - GitHub</title><link href="https://dmenezesgabriel.github.io//github/2020/06/24/database-handler-4.html" rel="alternate" type="text/html" title="Making a Database Handler pt.4 - GitHub" /><published>2020-06-24T12:15:00+00:00</published><updated>2020-06-24T12:15:00+00:00</updated><id>https://dmenezesgabriel.github.io//github/2020/06/24/database-handler-4</id><content type="html" xml:base="https://dmenezesgabriel.github.io//github/2020/06/24/database-handler-4.html">&lt;p&gt;In this tutorial, I’ll show you how to add an existing project to GitHub! And why is this important?
So we keep track of the changes in our code, if we make any mistake we can go back for the previous version and also we can open our project to colaboration.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://dmenezesgabriel.github.io/python/2020/06/18/database-handler-3.html&quot;&gt;Previous episode - Making a Database Handler pt.3 - Psycopg&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;github-what-is-github-where-does-it-lives-what-does-it-eats&quot;&gt;GitHub, what is GitHub? Where does it lives? What does it eats?&lt;/h2&gt;

&lt;p&gt;GitHub is a repository hosting service for colaboration and version control using &lt;strong&gt;Git&lt;/strong&gt;, with GitHub is easier to people anywhere in the world work together in projects.&lt;/p&gt;

&lt;p&gt;GitHub offers professional and enterprise accounts but also offers plans &lt;strong&gt;free&lt;/strong&gt; of charge.&lt;/p&gt;

&lt;h3 id=&quot;but-what-is-git&quot;&gt;But what is Git?&lt;/h3&gt;

&lt;p&gt;It’s an OpenSource project started by &lt;strong&gt;Linux&lt;/strong&gt; creator Linus Torvalds with the purpose, like other version control systems, to manage and store revision projects. Git could be used to manage any type of files, such as word documents, but is mostly used to store code. Think of it like a filing system for any draft or document.&lt;/p&gt;

&lt;p&gt;As an conclusion we chan think of GitHub as a Git repository hosting service.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-github-repository&quot;&gt;Creating a GitHub repository&lt;/h2&gt;

&lt;p&gt;Go to &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt; to creat your account clicking on SignIn button, after that just go to your main page that is the same as the previous GitHub link you’ve clicked previously and click on &lt;strong&gt;New&lt;/strong&gt; aside of Repositories like the image below.&lt;/p&gt;

&lt;div class=&quot;container p-5 mb-3 rounded-lg text-center&quot;&gt;
  &lt;img class=&quot;col-sm post-image border rounded-lg&quot; src=&quot;https://dmenezesgabriel.github.io//assets/img/posts/2020-06-24-database-handler-4/create-repo-top-left.png&quot; alt=&quot;Creating git repo top left&quot; style=&quot;height: auto; width: 350px;&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Or at the top right of navbar.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;container p-5 mb-3 rounded-lg text-center&quot;&gt;
  &lt;img class=&quot;col-sm post-image border rounded-lg&quot; src=&quot;https://dmenezesgabriel.github.io//assets/img/posts/2020-06-24-database-handler-4/create-repo-top-right.png&quot; alt=&quot;Creating git repo top right navbar&quot; style=&quot;height: auto; width: 350px;&quot; /&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Choose an smart &amp;amp; cool name :sunglasses:&lt;/li&gt;
  &lt;li&gt;Describe the main idea&lt;/li&gt;
  &lt;li&gt;Choose if you want to be Public or a Private repository&lt;/li&gt;
  &lt;li&gt;You may skip the step where does it say at the picture below, but I’ll not, and I’ll show you how to do that.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;: It’s a list of files and folders that should not be send from your local repository to github, like &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;__pycache__/&lt;/code&gt; or production keys for example.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;container p-3 mb-3 rounded-lg text-center&quot;&gt;
  &lt;img class=&quot;col-sm post-image border rounded-lg&quot; src=&quot;https://dmenezesgabriel.github.io//assets/img/posts/2020-06-24-database-handler-4/start-new-repo.png&quot; alt=&quot;Creating git repo top right navbar&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;And then the created repo :tada:&lt;/p&gt;

&lt;div class=&quot;container p-3 mb-3 rounded-lg text-center&quot;&gt;
  &lt;img class=&quot;col-sm post-image border rounded-lg&quot; src=&quot;https://dmenezesgabriel.github.io//assets/img/posts/2020-06-24-database-handler-4/created-repo.png&quot; alt=&quot;Creating git repo top right navbar&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;initialize-a-git-repository&quot;&gt;Initialize a Git repository&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;python-database-handler &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
git init&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;init&lt;/code&gt;: Create an empty git repository or reinitialize an existing one&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ouptput:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;Initialized empty Git repository in /home/gmenezes/Documentos/repos/python-database-handler/.git/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add the files&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;git add &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Adds the files in the local repository and stages them for commit.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# To unstage a file, use 'git reset HEAD &amp;lt;YOUR-FILE&amp;gt;'.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;add&lt;/code&gt;: Add file contents to the index&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;you can check the result with the command below&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;git status&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;status&lt;/code&gt;: Show the working tree status&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;	new file:   Dockerfile
	new file:   Makefile
	new file:   Pipfile
	new file:   Pipfile.lock
	new file:   database_handler.py
	new file:   databases_access.json
	new file:   init.sql
	new file:   query.sql
	new file:   script.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Link your local repository to GitHub repository&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;git remote add origin git@github.com:dmenezesgabriel/python-database-handler.git&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;remote add origin&lt;/code&gt;: Add the GitHub repository as &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;origin&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Get the GitHub files (&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;, &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;LICENCE&lt;/code&gt; and &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;README.md&lt;/code&gt;)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;git pull &lt;span class=&quot;nt&quot;&gt;--prune&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;pull&lt;/code&gt;: Fetch from and merge with another repository or a local branch&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;--prune&lt;/code&gt;: Clean outdated branches&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Commit the staged files&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;First commit&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Commits the tracked changes and prepares them to be pushed to a remote repository on GitHub.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# To remove the commit and modify the file, use the command 'git reset --soft HEAD~1'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# and commit and add the file again.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;commit&lt;/code&gt;: Record changes to the repository&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;-m&lt;/code&gt;: Use the given &lt;msg&gt; as the commit message.&lt;/msg&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally push the files to GitHub&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;git push origin master
&lt;span class=&quot;c&quot;&gt;# Pushes the changes in your local repository up to the remote repository you specified as the origin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;push&lt;/code&gt;: Update remote repository with local objects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now Check your repository on GitHub and you shall see all your files stored.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.github.com/pt/github/importing-your-projects-to-github/adding-an-existing-project-to-github-using-the-command-line&quot;&gt;GitHub Help&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://explainshell.com/&quot;&gt;Explain Shell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gabriel Menezes</name></author><category term="databases," /><category term="postgresql," /><category term="database" /><category term="handler," /><category term="python," /><category term="psycopg2," /><category term="docker," /><category term="github" /><summary type="html">In this tutorial, I’ll show you how to add an existing project to GitHub! And why is this important? So we keep track of the changes in our code, if we make any mistake we can go back for the previous version and also we can open our project to colaboration.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dmenezesgabriel.github.io//assets/img/posts/2020-06-24-database-handler-4/cover.jpg" /><media:content medium="image" url="https://dmenezesgabriel.github.io//assets/img/posts/2020-06-24-database-handler-4/cover.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="en_US"><title type="html">Making a Database Handler pt.3 - Psycopg</title><link href="https://dmenezesgabriel.github.io//python/2020/06/18/database-handler-3.html" rel="alternate" type="text/html" title="Making a Database Handler pt.3 - Psycopg" /><published>2020-06-18T11:49:00+00:00</published><updated>2020-06-18T11:49:00+00:00</updated><id>https://dmenezesgabriel.github.io//python/2020/06/18/database-handler-3</id><content type="html" xml:base="https://dmenezesgabriel.github.io//python/2020/06/18/database-handler-3.html">&lt;p&gt;Psycopg is a very popular database driver for PostgreSQL databases in Python programming language, which allow us to connect to the database and perform commands programatically, with this we are able to create scripts and also improve our jupyter’s studies efficience.&lt;/p&gt;

&lt;div class=&quot;container p-auto mb-3 rounded-lg text-center w-50&quot; style=&quot;background-color: black;&quot;&gt;
  &lt;img class=&quot;col-sm post-image rounded-lg w-100&quot; src=&quot;https://dmenezesgabriel.github.io//assets/img/posts/2020-06-18-database-handler-3/on-the-rod-so-far.gif&quot; alt=&quot;On the road so far supernatural&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;If you’re a loyal spectador who does not miss a chapter of this novel, on the road so far you’ve seen this tutorial introduction, when we start setting our &lt;strong&gt;PostgreSQL&lt;/strong&gt; container with &lt;strong&gt;Docker&lt;/strong&gt; and installing &lt;strong&gt;Pipenv&lt;/strong&gt; to manage our packages and dependencies.&lt;/p&gt;

&lt;p&gt;And a very important step, we’ve installed &lt;strong&gt;Psycopg2&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;pipenv &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;psycopg2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://dmenezesgabriel.github.io/python/2020/06/17/database-handler-2.html&quot;&gt;Previous episode - Making a Database Handler pt.2 - Docker&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;time-to-write-the-code&quot;&gt;Time to write the code&lt;/h2&gt;

&lt;p&gt;Make some files, make some folders…&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Walk into our directory&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;python-database-handler &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Create a file for the Database Handler&lt;/span&gt;
code database_handler.py &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Create a file for database credentials&lt;/span&gt;
code databases_access.json &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Create a file for our query&lt;/span&gt;
code query.sql &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Create a file for our script&lt;/span&gt;
code script.py&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ready, set, go! Let Sonic get some rings.&lt;/p&gt;

&lt;p&gt;You don’t need to do this, it’s a plus, you will understand, but if you want you can install Pandas.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;pipenv &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pandas&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First we’ll import some important stuff&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# database_handler.py
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;psycopg2&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;psycopg2.extras&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;json&lt;/code&gt;: It’ll help you to deal with json data format in which we will store our database credentials.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;psycopg2&lt;/code&gt;: The driver that make possible to connect to the database programatically.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;psycopg2.extras&lt;/code&gt;: Some magic will happen here, we’ll bring the fetched results as a python dictionaries.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;obs: Don’t forget to jump two lines after &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;imports&lt;/code&gt; by the sake of pretty code. Nobody deserves the otherway.&lt;/p&gt;

&lt;h3 id=&quot;getting-the-credentials&quot;&gt;Getting the credentials&lt;/h3&gt;

&lt;p&gt;Simples as it not looks, the only thing that this function do is abstract the python’s built-in function to read files to a one liner.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# database_handler.py
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_database_access&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    Reads a file.

    Expected dict format:

    {
        &quot;database_name&quot;: {
            &quot;host&quot;: &quot;database-db.host.net&quot;,
            &quot;user&quot;: &quot;user&quot;,
            &quot;password&quot;: &quot;1234&quot;,
            &quot;database&quot;: &quot;database_name&quot;,
            &quot;port&quot;: 5432
        },
    }

    Parameters
    ----------
    :path: recieves access_information.json path

    Returns
    ----------
    A dictionary with databases access information
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;database_file_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;database_file_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;database_access&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;database_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database_access&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The same as above, let’s name the oxen. But this little boy is called &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;query&lt;/code&gt;. So what we do here? Load the query files, that is it!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# database_handler.py
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;load_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    Load query from .sql file

    Parameters
    ----------
    :query: file.sql path

    Returns
    ----------
    String content of query file
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;the-man-of-the-hour-databasehandler&quot;&gt;The man of the hour (DatabaseHandler)&lt;/h3&gt;

&lt;p&gt;You got scared, I smell the fear through your armpits. This is the &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;DatabaseHandler&lt;/code&gt; class with all it’s attributes and methods. I’ll breakdown the code for a easier understanding.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# database_handler.py
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DatabaseHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    Handler for execute queries in a given the database
    &quot;&quot;&quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access_information&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Class atributes

        Parameters
        ----------
        :access_information: databases access dictionary
        {
            &quot;database_name&quot;: {
                &quot;host&quot;: &quot;database-db.host.net&quot;,
                &quot;user&quot;: &quot;user&quot;,
                &quot;password&quot;: &quot;1234&quot;,
                &quot;database&quot;: &quot;database_name&quot;,
                &quot;port&quot;: 5432
            },
        }
        &quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access_information&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;host&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access_information&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5432&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access_information&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access_information&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_database&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access_information&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;database&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We receive the credentials via access_information which we load by &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;get_database_access('here_goes_the_file')&lt;/code&gt; and define the handler attributes.&lt;/p&gt;

&lt;p&gt;Furter we will need to have access to the handler’s connection, so we can reuse it and not keep opening and closing every time because this operations cost to the database execute, so once open we’ll keep it open and use for different queries.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# database_handler.py
# Insider DatabaseHandler class
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;property&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
        Connection attribute
        &quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_connection&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;@property&lt;/code&gt;: Is a &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;decorator&lt;/code&gt; which allow us to call a method as an attribute, among other nice stuff.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Connection established houston, we’re ready to land! Below we’ve defined the function to connect to the database.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# database_handler.py
# Insider DatabaseHandler class
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Establish connection with the database
        &quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;connection_parameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;host&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;dbname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_password&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;psycopg2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection_parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connect_timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;connect_timeout&lt;/code&gt;: self explanatory, make good use!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our connection may fall, the method below’ll be used to an automatic reconnector!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# database_handler.py
# Insider DatabaseHandler class
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_reconnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Reconnect to database, if connection is closed
        &quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;closed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;closed&lt;/code&gt;: “Read-only integer attribute: 0 if the connection is open, nonzero if it is closed or broken.”, said by psycopg docs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you finished eating, wash your dishes and close your database connections!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# database_handler.py
# Insider DatabaseHandler class
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Close the connection
        &quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’ll reuse the same connection, but we may need another cursors. At each query we will close the cursor, so we’ll need a cursor factory!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# database_handler.py
# Insider DatabaseHandler class
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Create cursors
        &quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cursor_factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;psycopg2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extras&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RealDictCursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Something really cool, somethimes we may be disconnected from database by to heavy queries(don’t do that), but once we back to our sense and optimze the query it we don’t want to call the &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;connection&lt;/code&gt; method again, so we’ll make this automatic, intelligent and sophisticated by the use of a &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;decorator&lt;/code&gt; that checks if the connection is closed and reopen before making the query.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# database_handler.py
# Insider DatabaseHandler class
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;db_connector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
        Check the connection before making query,
        connect if disconnected

        Parameters
        ----------
        :func: Database related function which uses
        DatabaseHandler connection
        &quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;with_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_reconnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;f&quot;Error: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with_connection&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The moment we’ve all waited for, the query function! (with retries :heart_eyes:)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# database_handler.py
# Insider DatabaseHandler class
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db_connector&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_tries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
        Fetch query results

        Parameters
        ----------
        :query: Database related function which uses
        DatabaseHandler connection
        :params: Query params
        :max_tries: Max number of query retries

        Returns
        ----------
        Query results as a list of dicts
        &quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;attempt_no&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attempt_no&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_tries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;attempt_no&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetchall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;f&quot;ERROR: In psycopg.cursor.fetchall(): &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As I’ve said, a little bonus! Fetch the queries to a &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;pandas&lt;/code&gt; &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;DataFrame&lt;/code&gt;!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# database_handler.py
# Insider DatabaseHandler class
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db_connector&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;query_to_df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_tries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
        Create a pandas DataFrame object from a query result

        Parameters
        ----------
        :sql: query statements
        :params: a list or a tuple of parameters that will
        be passed to the query execution
        :max_tries: number of query retries in the case of failure

        Returns
        ----------
        Pandas DataFrame object
        &quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;attempt_no&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attempt_no&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_tries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;attempt_no&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_sql_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;f&quot;Query to DataFrame error: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;now-the-results-of-our-hard-work&quot;&gt;Now the results of our hard work!&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;query&lt;/strong&gt; file!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# query.sql
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;strong&gt;script&lt;/strong&gt; file!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# script.py
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;database_handler&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;get_database_access&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DatabaseHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_query&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Get database credentials from json file
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;database_access&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_database_access&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'databases_access.json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;database_access should look like:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;{'database-test': {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5555, 'user': 'postgres'}}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Instantiating the DatabaseHandler class and loading the query:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# script.py
# Instantiate the DatabaseHandler class
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;database_handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DatabaseHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;database_access&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;database-test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Load a query file
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'query.sql'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Fetch results
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Fetch query output:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;[RealDictRow([('id', 1), ('name', 'J. k. Rowling')]), RealDictRow([('id', 2), ('name', 'Stephen King')]), RealDictRow([('id', 3), ('name', 'Timothy Ferris')])]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For jupyter lovers this is something useful :thumbsup:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# script.py
# Fetch results and bring them to a Pandas DataFrame
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df_results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query_to_df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Query to &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;DataFrame&lt;/code&gt; output:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;   id            name
0   1   J. k. Rowling
1   2    Stephen King
2   3  Timothy Ferris
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thank you for reading! :raised_hands: :pray:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://dmenezesgabriel.github.io/github/2020/06/24/database-handler-4.html&quot;&gt;Next Episode - Making a Database Handler pt.4 - GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.psycopg.org/docs/&quot;&gt;Psycopg’s documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gabriel Menezes</name></author><category term="databases," /><category term="postgresql," /><category term="database" /><category term="handler," /><category term="python," /><category term="psycopg2," /><category term="docker," /><category term="github" /><summary type="html">Psycopg is a very popular database driver for PostgreSQL databases in Python programming language, which allow us to connect to the database and perform commands programatically, with this we are able to create scripts and also improve our jupyter’s studies efficience.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dmenezesgabriel.github.io//assets/img/posts/2020-06-18-database-handler-3/cover.png" /><media:content medium="image" url="https://dmenezesgabriel.github.io//assets/img/posts/2020-06-18-database-handler-3/cover.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="en_US"><title type="html">Making a Database Handler pt.2 - Pipenv</title><link href="https://dmenezesgabriel.github.io//python/2020/06/17/database-handler-2.html" rel="alternate" type="text/html" title="Making a Database Handler pt.2 - Pipenv" /><published>2020-06-17T22:45:00+00:00</published><updated>2020-06-17T22:45:00+00:00</updated><id>https://dmenezesgabriel.github.io//python/2020/06/17/database-handler-2</id><content type="html" xml:base="https://dmenezesgabriel.github.io//python/2020/06/17/database-handler-2.html">&lt;p&gt;If you already not, you should check my previous post where we have this project introduction. In this part, A.K.A part 2, we’ll install pipenv that is a nice package manager, all dependencies and start coding   .&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://dmenezesgabriel.github.io/python/2020/06/11/database-handler-1.html&quot;&gt;Making a Database Handler pt.1 - Docker&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;before-we-start&quot;&gt;Before we start&lt;/h2&gt;

&lt;p&gt;Make sure you’ve got python and pip. This tutorial uses python 3.x.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;python &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;pip &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;pipenv&quot;&gt;Pipenv&lt;/h3&gt;

&lt;p&gt;Pipenv is a packaging tool for python, similar to bundler, composer, npm, cargo, yarn and etc. So what is it for?
Basically make the typical developing workflow of creating a virtual environment with &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;virtualenv&lt;/code&gt;, installing our dependency packages with &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;pip&lt;/code&gt; and updating the requirements on &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt; simplier.&lt;/p&gt;

&lt;p&gt;With &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;pipenv install flask&lt;/code&gt; for example, if your environment it’s not already created, you will create, install the package and also automagically update the program requirements on &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;Pipfile&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;Pipfile.lock&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For linux users, we don’t want to mess with the python version which already comes with te operational system. So you can check the respective python versions and it’s installation &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;local&lt;/code&gt; with the output from below commands.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;- pip&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
pip show pip &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;- pip3&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
pip3 show pip&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;My location output from &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;pip show pip&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;Location: /usr/lib/python2.7/site-packages&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;My location output from &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;pip3 show pip&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;Location: /usr/lib/python3.7/site-packages&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As pip3 is the one which install packages at my python 3.x version, it’s that I’m gonna use!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;pip3 &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pipenv&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;show-time&quot;&gt;Show Time&lt;/h3&gt;

&lt;p&gt;Close your eyes and imagine you’re walking on beach, feel the sand between your toes… Sorry wrong class!&lt;/p&gt;

&lt;p&gt;Come with me, walk into our project’s directory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;python-database-handler&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Take my hand, code with me! (That was too much wasn’t?!)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;pipenv &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;psycopg2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;✔ Successfully created virtual environment!
Virtualenv location: /home/gmenezes/.local/share/virtualenvs/python-database-handler-TGlnQU8Z
Creating a Pipfile for this project…
Installing psycopg2…
Adding psycopg2 to Pipfile's [packages]…
✔ Installation Succeeded
Pipfile.lock not found, creating…
Locking [dev-packages] dependencies…
Locking [packages] dependencies…
✔ Success!
Updated Pipfile.lock (59b6f6)!
Installing dependencies from Pipfile.lock (59b6f6)…
  🐍   ▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉ 1/1 — 00:00:00
To activate this project's virtualenv, run pipenv shell.
Alternatively, run a command inside the virtualenv with pipenv run.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So here we can see pipenv:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Creating a &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;virtualenv&lt;/code&gt; at your home (there is no place like it),&lt;/li&gt;
  &lt;li&gt;Creating a &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;Pipfile&lt;/code&gt; where you will find your requirements,&lt;/li&gt;
  &lt;li&gt;Installing &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;psycopg2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Updating &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;Pipfile.lock&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And also when you miss &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;requirments.txt&lt;/code&gt; or your friends say &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;pipenv&lt;/code&gt; it’s lame, you can generate a &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt; for them with:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;pipenv lock &lt;span class=&quot;nt&quot;&gt;--requirements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; requirements.txt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you really didn’t liked the experience and want to throw it all alway:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;pipenv &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The command above will remove your environment and all installed packages, but keep in mind that we will use pipenv for the sake of simplicity on the next episode of &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;Coding with Gabriel, the TV Show!&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And then if all you want is to delete the installed package:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;pipenv uninstall psycopg2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;Uninstalling psycopg2…
Found existing installation: psycopg2 2.8.5
Uninstalling psycopg2-2.8.5:
  Successfully uninstalled psycopg2-2.8.5

Removing psycopg2 from Pipfile…
Locking [dev-packages] dependencies…
Locking [packages] dependencies…
Updated Pipfile.lock (a65489)!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And again, everything updated automagically.&lt;/p&gt;

&lt;p&gt;Thank you for reading, thumbs up :+1:, subscribe and all of that youtube stuff.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://dmenezesgabriel.github.io/python/2020/06/18/database-handler-3.html&quot;&gt;Next Episode - Making a Database Handler pt.3 - Psycopg&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://realpython.com/pipenv-guide/#pipenv-introduction&quot;&gt;Real Python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python-guide.org/&quot;&gt;The Hitchhiker’s Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gabriel Menezes</name></author><category term="databases," /><category term="postgresql," /><category term="database" /><category term="handler," /><category term="python," /><category term="psycopg2," /><category term="docker," /><category term="github" /><summary type="html">If you already not, you should check my previous post where we have this project introduction. In this part, A.K.A part 2, we’ll install pipenv that is a nice package manager, all dependencies and start coding .</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dmenezesgabriel.github.io//assets/img/posts/2020-06-16-database-handler-2/cover.jpg" /><media:content medium="image" url="https://dmenezesgabriel.github.io//assets/img/posts/2020-06-16-database-handler-2/cover.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="en_US"><title type="html">Making a Database Handler pt.1 - Docker</title><link href="https://dmenezesgabriel.github.io//docker/2020/06/11/database-handler-1.html" rel="alternate" type="text/html" title="Making a Database Handler pt.1 - Docker" /><published>2020-06-11T00:00:00+00:00</published><updated>2020-06-17T21:50:00+00:00</updated><id>https://dmenezesgabriel.github.io//docker/2020/06/11/database-handler-1</id><content type="html" xml:base="https://dmenezesgabriel.github.io//docker/2020/06/11/database-handler-1.html">&lt;p&gt;A database handler offers a way to interface with databases of different kinds using code languages as Javascript and Python, so it’s possible to bring an query result and manipulate as python dict objects on your ETL script, jupyter notebook analysis and many others.&lt;/p&gt;

&lt;p&gt;For this tutorial we will build a custom, but yet simple image of PostgreSQL relacional database from where we will collect information with our python based database handler.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ingredients&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;PostgreSQL&lt;/li&gt;
  &lt;li&gt;Docker&lt;/li&gt;
  &lt;li&gt;Python&lt;/li&gt;
  &lt;li&gt;Pipenv&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;database-transaction&quot;&gt;Database Transaction&lt;/h2&gt;

&lt;p&gt;A database transaction is a unit of work that is performed against a database and it may contain several smaller tasks in it, It also has to either happen in full or not at all, that is the ACID principle of &lt;strong&gt;Atomicity&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;That is a transaction is a propagation of one or more changes to the database as creating records, updating or deleting it from a table.&lt;/p&gt;

&lt;h2 id=&quot;cursors&quot;&gt;Cursors&lt;/h2&gt;

&lt;p&gt;The cursor holds the control of the position in a set of results and allow you to perform several operations row by row in a dataset returning or not to the original table, it points to an specific line inside a set being able to perform operations such as update, delete or move data.&lt;/p&gt;

&lt;h2 id=&quot;psycopg&quot;&gt;Psycopg&lt;/h2&gt;

&lt;p&gt;In psycopg, the connection class handle the transactions and when you perform the first statement to the PostgreSQL database using a cursor object, psycopg creates a new transaction in which all subsequent statements will be contained, in case of any of the statements comes to fail, psycopg will abort the transaction and no register will be altered.&lt;/p&gt;

&lt;h2 id=&quot;docker&quot;&gt;Docker&lt;/h2&gt;

&lt;p&gt;Docker is a softwere which offers container units that package up all your code and it’s dependencies, so it’s possible to create the same environment from one computer to another without massive headaches.&lt;/p&gt;

&lt;h2 id=&quot;hands-on&quot;&gt;Hands-on&lt;/h2&gt;

&lt;p&gt;So let’s read the recipe and bake this &lt;strong&gt;cake&lt;/strong&gt;!&lt;/p&gt;

&lt;h3 id=&quot;creating-folders&quot;&gt;Creating folders&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;python-database-handler &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;python-database-handler &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;database_handler.py &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;Dockerfile &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;Makefile &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;init.sql&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;getting-the-flour&quot;&gt;Getting the flour&lt;/h3&gt;

&lt;p&gt;I really enjoy to use &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;vscode&lt;/a&gt; as text editor, but you can use vim, nano or notepad ++ if you want and then hunt dinossaurs for diner and bring to the cave, light the fire… you know!(acting as 21st century hipster).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;code Dockerfile&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;breaking-somme-eggs&quot;&gt;Breaking somme eggs&lt;/h3&gt;

&lt;p&gt;Here we create our own postgres Docker image through a &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Pull official PostgreSQL image from dockerhub https://hub.docker.com/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; postgres&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Set environment variables&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; POSTGRES_PASSWORD postgres&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; POSTGRES_DB postgres&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# By defaults every script located at /docker-entrypoint-initdb.d/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# will be automatically executed during container startup&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; init.sql /docker-entrypoint-initdb.d/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;last but not least we create the ini.sql file which will make the transactions as creating and inserting data in tables.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;code init.sql&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authors&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;mix-everything-up&quot;&gt;Mix everything up&lt;/h3&gt;

&lt;p&gt;And then automagically build our image&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; custom-image .&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;build&lt;/code&gt;: Command that builds Docker images from a Dockerfile and a “context”.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;--tag , -t&lt;/code&gt;: Name and optionally a tag in the ‘name:tag’ format.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check for builded images&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;docker images &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;images&lt;/code&gt;: This command will show all top level images, their repository and tags, and their size.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;--all , -a&lt;/code&gt;: Show all images (default hides intermediate images).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;baking-the-cake&quot;&gt;Baking the cake&lt;/h3&gt;

&lt;p&gt;Running it as a container&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; custom-image-container &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 5555:5432 custom-image&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;run&lt;/code&gt;: First it creates a container over the specified image, and then starts it.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;--detach , -d&lt;/code&gt;: 	Run container in background and print container ID.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;--name&lt;/code&gt;: Assign a name to the container.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;-p&lt;/code&gt;: Bounds the container to the specified port.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;open-the-oven-and-smell-it&quot;&gt;Open the oven and smell it&lt;/h3&gt;

&lt;p&gt;Execute bash inside the container itself&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; custom-image-container /bin/bash&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;exec&lt;/code&gt;: Runs a new command in a running container.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;--interactive , -i&lt;/code&gt;: Keep STDIN open even if not attached.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;--tty , -t&lt;/code&gt;: Allocate a pseudo-TTY.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Connect to the database via &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;psql&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;psql &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; localhost &lt;span class=&quot;nt&quot;&gt;-U&lt;/span&gt; postgres &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; postgres&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;-h&lt;/code&gt;: host.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;-U&lt;/code&gt;: User name.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;-d&lt;/code&gt;: Database name.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-cherry-on-the-cake&quot;&gt;The cherry on the cake&lt;/h3&gt;

&lt;p&gt;Insert some data into the table &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;public.authors&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authors&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'J. k. Rowling'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Stephen King'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Timothy Ferris'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Query&lt;/strong&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;:&lt;/p&gt;

&lt;table class=&quot;table table-dark&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;J. k. Rowling&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;Stephen King&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;Timothy Ferris&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;On the next episode we will spice the things a litte with Pipenv, a nice pretty little package manager! :+1:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://dmenezesgabriel.github.io/python/2020/06/17/database-handler-2.html&quot;&gt;Making a Database Handler pt.2 - Docker&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.postgresqltutorial.com/&quot;&gt;Postgres Tutorials&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/&quot;&gt;Docker’s documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.psycopg.org/docs/&quot;&gt;Psycopg’s documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@wkrzywiec/database-in-a-docker-container-how-to-start-and-whats-it-about-5e3ceea77e50&quot;&gt;Wkrzywiec’s medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gabriel Menezes</name></author><category term="databases," /><category term="postgresql," /><category term="database" /><category term="handler," /><category term="python," /><category term="psycopg2," /><category term="docker," /><category term="github" /><summary type="html">A database handler offers a way to interface with databases of different kinds using code languages as Javascript and Python, so it’s possible to bring an query result and manipulate as python dict objects on your ETL script, jupyter notebook analysis and many others.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dmenezesgabriel.github.io//assets/img/posts/2020-06-10-database-handler-1/cover.jpg" /><media:content medium="image" url="https://dmenezesgabriel.github.io//assets/img/posts/2020-06-10-database-handler-1/cover.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="en_US"><title type="html">Git commands which may help you</title><link href="https://dmenezesgabriel.github.io//git/2020/06/03/useful-git-commands.html" rel="alternate" type="text/html" title="Git commands which may help you" /><published>2020-06-03T01:00:00+00:00</published><updated>2020-06-03T01:00:00+00:00</updated><id>https://dmenezesgabriel.github.io//git/2020/06/03/useful-git-commands</id><content type="html" xml:base="https://dmenezesgabriel.github.io//git/2020/06/03/useful-git-commands.html">&lt;p&gt;Git is a Version Control System, what is this? Software tools that help a software developers team to keep states of source code over time, recording each and every modification on it.&lt;/p&gt;

&lt;h4 id=&quot;commit-logs&quot;&gt;Commit logs:&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;git log &lt;span class=&quot;nt&quot;&gt;--graph&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--decorate&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--oneline&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;log&lt;/code&gt;: Show commit logs.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;--all&lt;/code&gt;: Logs all refs.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;--graph&lt;/code&gt;: Graphical representation of the commit history.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;--decorate&lt;/code&gt;: Give the ref names of any commits that are shown.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;--oneline&lt;/code&gt;: This is a shorthand for both “–pretty=oneline –abbrev-commit” used at the same time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img class=&quot;col-sm post-image&quot; src=&quot;https://dmenezesgabriel.github.io//assets/img/posts/2020-06-10-useful-git-commands/git-log.png&quot; alt=&quot;My image&quot; /&gt;
(ignore the mess)&lt;/p&gt;

&lt;h4 id=&quot;delete-already-merged-local-branchs&quot;&gt;Delete already merged local branchs:&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;git branch &lt;span class=&quot;nt&quot;&gt;--merged&lt;/span&gt; | egrep &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;(^&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\*&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;|master|dev)&quot;&lt;/span&gt; | xargs git branch &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;branch&lt;/code&gt;: List, create, or delete branches.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;--merged&lt;/code&gt;: Already merged branches.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt; | &lt;/code&gt;: Sequence of one &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;or&lt;/code&gt; more commands.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;egrep&lt;/code&gt;: Print lines matching a pattern.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;-d, --delete:&lt;/code&gt; Delete branch&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;git-stash-difference-&quot;&gt;Git stash difference :&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;git stash show &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;stash&lt;/code&gt;: Stash the changes in a dirty working directory away.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;show&lt;/code&gt;: Show the changes recorded in the stash as a diff between the stashed state and its original parent.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-html highlighter-rouge&quot;&gt;-p, --patch&lt;/code&gt;: Select the diff between HEAD and the selected working tree.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;life&lt;/li&gt;
  &lt;li&gt;Too many losses by git &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;checkout .&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://explainshell.com/explain?cmd=git+log+--all+--graph+--decorate+--oneline+--simplify-by-decoration&quot;&gt;Explain Shell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gabriel Menezes</name></author><category term="git," /><category term="github," /><category term="commands" /><summary type="html">Git is a Version Control System, what is this? Software tools that help a software developers team to keep states of source code over time, recording each and every modification on it.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dmenezesgabriel.github.io//assets/img/posts/2020-06-10-useful-git-commands/cover.jpeg" /><media:content medium="image" url="https://dmenezesgabriel.github.io//assets/img/posts/2020-06-10-useful-git-commands/cover.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry xml:lang="en_US"><title type="html">Hello World! Let’s break this curse</title><link href="https://dmenezesgabriel.github.io//blog/2020/06/02/hello-world.html" rel="alternate" type="text/html" title="Hello World! Let's break this curse" /><published>2020-06-02T12:58:00+00:00</published><updated>2020-06-02T12:58:00+00:00</updated><id>https://dmenezesgabriel.github.io//blog/2020/06/02/hello-world</id><content type="html" xml:base="https://dmenezesgabriel.github.io//blog/2020/06/02/hello-world.html">&lt;p&gt;With this Hello World!, I shall break any curse that may hunt me in the darkest night of the coldest winter. As python was my first learning language, here it is.&lt;/p&gt;

&lt;p&gt;Enjoy this little prayer!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Hello World!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>Gabriel Menezes</name></author><summary type="html">With this Hello World!, I shall break any curse that may hunt me in the darkest night of the coldest winter. As python was my first learning language, here it is.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://dmenezesgabriel.github.io//assets/img/posts/2020-06-5-hello-world/cover.jpg" /><media:content medium="image" url="https://dmenezesgabriel.github.io//assets/img/posts/2020-06-5-hello-world/cover.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>