I"S.<p>O <strong>Git</strong> é um sistema de controle de versão distribuído, criado por Linus Torvalds, nada mais nada menos que o criador do linux. Um software que tem por objetivo gerenciar diferentes versões no desenvolvimento de um documento qualquer, comumente utilizado no desenvolvimento de software para controlar diferentes versões dos códigos fonte e de sua documentação.</p>

<p>Diferente das outras opções de sistemas similares como o <strong>CSV</strong> e <strong>SVN</strong>, a arquitetura do git é descentralizada, ou seja, não existe um repositório oficial, apesar de existir esta possibilidade, então em cada repositório incluindo o da maquina do contribuidor, existira uma cópia completa e funcional, permitindo a utilização das operações do Git sem a necessidade de estar online.</p>

<p>Quando se trata de trabalho em equipe, e a maior parte do tempo as equipes estarão trabalhando em paralelo, um sistema como o Git se torna mais do que essêncial, para que não hajam conflitos entre as alterações realizadas por cada colaborador.</p>

<p>Também é comum que no constante desenvolvimento dos projetos hajam alterações que comprometam o seu funcionamento, neste caso o Git permite que essas alterações sejam revertidas de maneira rápida e simples.</p>

<h2 id="como-isso-funciona">Como isso funciona?</h2>

<p>O Git trabalha em uma estrutura de ramificações, onde cada alteração de código cria um novo ponto na ramificação atual, essas ramificações, mais conhecidas como <code class="language-plaintext highlighter-rouge">branchs</code> são criadas no desenvolvimento de novas funcionalidades, e baseadas em <code class="language-plaintext highlighter-rouge">branchs</code> já existentes.</p>

<p>Cada contribuidor faz uma cópia local do repositório remoto original e cria as modificações necessárias, essa cópia será enviada novamente para o repositório remoto.</p>

<p><strong>Passos no fluxo de contribuição de um projeto utilizando Git</strong>:</p>

<ol>
  <li>Clonar o repositório para que uma cópia contendo todos os arquivos originais esteja disponível localmente.</li>
</ol>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone &lt;HTTPS ou SSH&gt;
</code></pre></div></div>

<ol>
  <li>Criar uma <code class="language-plaintext highlighter-rouge">branch</code>, onde podemos alterar os arquivos do projeto sem interferir nos arquivos originais</li>
</ol>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git branch &lt;nome da ramificação <span class="o">(</span>branch<span class="o">)&gt;</span>
<span class="c"># Alterar para a ramificação criada</span>
git checkout &lt;nome da ramificação <span class="o">(</span>branch<span class="o">)&gt;</span>
</code></pre></div></div>

<ol>
  <li>Conforme vamos criando e modificando os arquivos, adicionamos essas modificações</li>
</ol>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add <span class="nt">-p</span>
</code></pre></div></div>

<ol>
  <li>E as dividimos em <code class="language-plaintext highlighter-rouge">commits</code>, é importante que a descrição do commit seja objetiva e clara quanto ao motivo das alterações, remoções ou inclusões, porque ela ficará salva no histórico das alterações.</li>
</ol>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git commit
</code></pre></div></div>

<p>Caso seja necessário realizar alguma alteração posterior ao primeiro commit já realizado, é possível adicionar as novas alterações e utilizar o comando:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git commit <span class="nt">--amend</span>
</code></pre></div></div>

<ol>
  <li>Uma vez que todas alterações forem finalizadas, vamos enviar a nossa <code class="language-plaintext highlighter-rouge">branch</code> contendo todas as alterações de volta para o repositório remoto, para que ela fique disponível para os demais contribuidores do projeto poderem ver e alterar.</li>
</ol>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push <span class="nt">--set-upstream</span> origin &lt;nome da ramificação <span class="o">(</span>branch<span class="o">)&gt;</span>
</code></pre></div></div>

<p>Caso você tenha adicionado alterações posteriores, basta utilizar o seguinte comando:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push <span class="nt">--force</span> with lease
</code></pre></div></div>

<ol>
  <li>
    <p>Então é aberto um <code class="language-plaintext highlighter-rouge">Pull Request</code>, onde você pede ao dono do repositório que suas contribuições sejam incluídas nele.</p>
  </li>
  <li>
    <p>Geralmente após a revisão das modificações ser realizada por algum dos outros contribuidores, você pode dar o <code class="language-plaintext highlighter-rouge">merge</code> que atualizara o repositório original com as suas modificações.</p>
  </li>
</ol>

<h2 id="comandos-mais-utilizados">Comandos mais utilizados</h2>

<h3 id="iniciando-um-repositório">Iniciando um repositório</h3>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init
</code></pre></div></div>

<h3 id="buscar-e-aplicar-modificações-do-repositório-remoto-no-repositório-local">Buscar e aplicar modificações do repositório remoto no repositório local</h3>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git pull <span class="nt">--prune</span>
</code></pre></div></div>

<p>A flag <code class="language-plaintext highlighter-rouge">--prune</code> deleta <code class="language-plaintext highlighter-rouge">branchs</code> locais cujas modificações já foram aplicadas na <code class="language-plaintext highlighter-rouge">branch</code> original. Algumas vezes essas modificações podem gerar conflitos que necessitam de interação humana para serem corrigidos.</p>

<h3 id="resetando-um-commit">Resetando um commit</h3>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git reset <span class="nt">--soft</span> HEAD~1
</code></pre></div></div>

<p>A flag <code class="language-plaintext highlighter-rouge">--soft</code> garante que as alterações desfeitas sejam preservadas. Após executar o comando, você encontrará as mudanças como modificações locais não confirmadas em sua cópia local.</p>

<p>Se você não quiser manter essas alterações, simplesmente use a flag <code class="language-plaintext highlighter-rouge">--hard</code>. Faça isso apenas quando tiver certeza de que não precisa mais dessas alterações.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git reset <span class="nt">--hard</span> HEAD~1
</code></pre></div></div>

<h3 id="removendo-um-arquivo-da-área-de-staging-ou-desfazendo-um-git-add">Removendo um arquivo da área de staging ou desfazendo um git add</h3>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git reset &lt;nome <span class="k">do </span>arquivo&gt;
</code></pre></div></div>

<h3 id="rebase">Rebase</h3>

<p>As modificações que você está fazendo em sua <code class="language-plaintext highlighter-rouge">branch</code> local podem ficar defasadas em relação ao repositório remoto, então é possível alterar a base de sua ramificação local para a mais atual com o comando <code class="language-plaintext highlighter-rouge">rebase</code>.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git rebase origin/master
</code></pre></div></div>

<h3 id="histórico-de-commits">Histórico de commits:</h3>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git log <span class="nt">--graph</span> <span class="nt">--all</span> <span class="nt">--decorate</span> <span class="nt">--oneline</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">log</code>: Mostra o histórico de commits.</li>
  <li><code class="language-plaintext highlighter-rouge">--all</code>: Apresenta todas referências.</li>
  <li><code class="language-plaintext highlighter-rouge">--graph</code>: Cria uma representação gráfica do histórico de commits.</li>
  <li><code class="language-plaintext highlighter-rouge">--decorate</code>: Traz o nome da referência para cada commit mostrado.</li>
  <li><code class="language-plaintext highlighter-rouge">--oneline</code>: Esta é uma abreviação para <code class="language-plaintext highlighter-rouge">--pretty=oneline --abbrev-commi</code>.</li>
</ul>

<h4 id="deletar-branchs-locais-cujas-modificações-já-foram-aplicadas-ao-repositório-remoto-master">Deletar branchs locais cujas modificações já foram aplicadas ao repositório remoto “master”</h4>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git branch <span class="nt">--merged</span> | egrep <span class="nt">-v</span> <span class="s2">"(^</span><span class="se">\*</span><span class="s2">|master|dev)"</span> | xargs git branch <span class="nt">-d</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">branch</code>: Listar, criar ou deletar ramificações.</li>
  <li><code class="language-plaintext highlighter-rouge">--merged</code>: Ramificações as quais suas modificações já foram aplicadas ao repositório original.</li>
  <li><code class="language-plaintext highlighter-rouge">|</code>: Sequência de um <code class="language-plaintext highlighter-rouge">ou</code> mais comandos.</li>
  <li><code class="language-plaintext highlighter-rouge">egrep</code>: Mostrar linhas que correspondem a um padrão.</li>
  <li><code class="language-plaintext highlighter-rouge">-d, --delete:</code> Deletar ramificação.</li>
</ul>

<h3 id="arquivar-modificações">Arquivar modificações</h3>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git stash
</code></pre></div></div>

<h3 id="mostrar-diferenças-entre-as-modificações-armazenadas-e-a-ramificação-atual">Mostrar diferenças entre as modificações armazenadas e a ramificação atual</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git stash show -p
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">stash</code>: Arquivar as alterações.</li>
  <li><code class="language-plaintext highlighter-rouge">show</code>: Mostrar as alterações arquivadas e suas diferenças em relação a ramificação original.</li>
  <li><code class="language-plaintext highlighter-rouge">-p, --patch</code>: Seleciona as diferenças entre o ponteiro <code class="language-plaintext highlighter-rouge">HEAD</code> e a branch atual.</li>
</ul>

<h2 id="o-que-é-github">O que é GitHub</h2>

<p>Enquanto o Git é um sistema de versionamento, o <strong>GitHub</strong> é uma plataforma para criação de repositórios remotos Git, possibilitando que outras pessoas possam clonar esse repositório localmente, realizar alterações e enviar essas alterações de volta ao repositório remoto.</p>

<p><strong>Alternativas</strong></p>

<ul>
  <li>GitLab</li>
  <li>BitBucket</li>
</ul>

<h2 id="referências">Referências</h2>

<ul>
  <li><a href="https://explainshell.com/explain?cmd=git+log+--all+--graph+--decorate+--oneline+--simplify-by-decoration">Explain Shell</a></li>
</ul>
:ET