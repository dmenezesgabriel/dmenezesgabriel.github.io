var store = [{
        "title": "Introducao Codificacao Segura",
        "excerpt":"Novas leis, normas e regulamentações exigem maior responsabilidade das empresas quanto a segurança dos produtos fornecidos aos consumidores, o que exige maior consciência dos desenvolvedores, e equipes de segurança. Além disso os usuários possuem cada vez maior preocupação com a proteção de seus dados.      Segurança não é funcionalidade; Segurança não é produto; Segurança não é negociável.    Pilares da segurança da informação      Confidencialidade: Nível necessário de sigilo para cada tipo de informação que será consumida por pessoas, recursos ou processos.   Integridade: Consistência e confiabilidade dos dados.   Disponibilidade: Tempo e acessibilidade aos dados.      Resolver falhas de vulnerabilidade pode ser 15 vezes mais caro na fase de testes, e 6 vezes mais barato se feito na fase de análise anterior a implementação.    Arquitetura triplo A      Autenticação: Quem é o usuário?   Autorização: O que o usuário, uma vez que autenticado, pode fazer?   Auditoria: O que o usuário fez?   Riscos mais comuns      Ataques maliciosos   Falhas de sistemas   Falhas humanas   Medidas essênciais      Controles de acesso   Permissões de usuário   Criptografia   Conceitos básicos      Fraqueza: Código implementado de forma incorreta que pode ter como consequência falhas de segurança   Vulnerabilidade: Fraqueza com possibilidade de exploração por usuário malicioso   Mitigar: Implementação de controles com o objetivo de reduzir ou eliminar os riscos de potenciais ameaças   Atacante: Usuário malicioso que explora vulnerabilidades de um sistema   Ataque: Investida ofensiva em um determinado sistema   Ameaças: Potencial ataque   CVE: Lista de vulnerabilidades e exposições comuns link   CWE: Lista de fraquezas comuns encontradas em software, constantemente atualizada e categorizada link   Principais elementos de uma aplicação web   Abaixo temos os principais elementos passiveis de ataques:      Cliente: Onde o código é interpretado (Browser)   Servidor: Onde o código receberá requisições e devolverá respostas   Bancos de dados: Onde os dados são persistidos   Modelagem de ameaças   Visa identificar:      Ameaças;   Ataques;   Contra medidas;   Vulnerabilidades.   Redução da superfície de ataque   Território que pode ser explorado e conquistado pelo usuário malicioso.      Quais são as possíveis vulnerabilidades resultantes de dependências do sistema (inclusive as provenientes de terceiros)?   Atenção a comentários no código que podem expor informações que facilitarão ataques.   Princípio do privilégio mínimo   Forneça apenas os acessos e permissões mínimas, e necessárias para que o usuário possa realizar as suas atividades.   Um ambiente mais restrito, permite maior controle, onde e possibilita que sejamos mais proativos e menos reativos.   STRIDE   É um acrônimo criado pela Microsoft, auxilia na identificação de ameaças.                  Categoria       Tipo       Descrição                       Autenticação       Spoofing (falsificação)       O atacante tenta se passar por outra pessoa.                 Integridade       Tampering (violação)       O atacante tenta interceptar dados através de seu canal de transmissão para modificá-los.                 Não repúdio       Repudiation (repúdio)       O atacante consegue realizar qualquer ação na aplicação sem que seja identificado como executor das mesmas.                 Confidencialidade       Information Disclosure (divulgação de informações não autorizada)       O atacante consegue ler dados privados que são transmitidos ou armazenados                 Disponibilidade       Denial of Service (negação de serviço)       O atacante consegue impossibilitar o acesso de usuários legítimos a aplicação.                 Autorização       Elevation of Privilege (elevação de privilégios)       O atacante consegue elevar seu nível de acessos e permissões por vias não autorizadas.           Implementações práticas      Validação de entrada de dados: Verificar se os dados imputados pelo usuário estão no tipo e formato correto. Executada tanto no cliente quanto no servidor.   Autenticação: Algo que o usuário sabe, algo que o usuário possui ou algo que o usuário é.   Autenticação multi fator, bloqueio de contas e captcha   Protocolos de autenticação como Oauth, OpenId e SAML   Limitação para tentativas de autenticação   Gerenciamento de sessão   Logs de identificação de usuários e ações como login e logout   Prevenção a SQL injection   Mantenha as bibliotecas de terceiros atualizadas   Monitoramento de atividades suspeitas   Criptografia de dados sensíveis   Cuidado ao reportar mensagens de erro, para não fornecer informações valiosas a um usuário malicioso.   Transmitir senhas e chaves de sessão via TLS   Midleware entre aplicações   Ferramentas úteis      Sonar Cloud   Sonar Qube   Sonar Lint   Snyk   OWASP Top 10   12 factor app   Wazuh   SDLC   SIEM   Pre-commit Hooks   SAST   DAST   SCA   RASP   ASVS   Dependency Check   OWASP ZAP   OWASP Threat Dragon  ","categories": [],
        "tags": [],
        "url": "/introducao-codificacao-segura/",
        "teaser": "/assets/images/fallback-teaser.jpg"
      },{
        "title": "Você conhece a origem do \"Hello World!\"?",
        "excerpt":"Tradicionalmente, programas Olá, Mundo! são utilizados para demonstrações no desenvolvimento de programas, assim como para assegurar que tanto uma linguagem como o sistema operacional estão funcionando corretamente.   Geralmente estes programas são os primeiros desenvolvidos por novos programadores, porque mesmo com pouca ou nenhuma experiência são fáceis para se executar, e por sua simplicidade são utilizados para garantir que os componentes de uma linguagem (seu compilador, ambiente de desenvolvimento e tempo de execução) foram instalados corretamente.   Estes programas também são utilizados pelos hackers como prova de conceito de que um código arbitrário pode ser executado por meio de um exploit onde os designers do sistema não pretendiam que o código pudesse ser executado.   Outro uso popular do Olá, Mundo! é como base de comparação de tamanho do executável que a linguagem gera e quanta infraestrutura de suporte deve existir por trás do programa para que este seja executado.   Mas de onde, ou melhor, quando tudo isso começou?   Brian Kernighan, autor de um dos livros de programação mais lidos, “C Programming Language”, também criou Hello, World. Ele fez referência pela primeira vez a Hello World no predecessor do livro C Programming Language: A Tutorial Introduction to the Programming Language B publicado em 1973.   main( ) { extrn a, b, c; putchar(a); putchar(b); putchar(c); putchar(’!*n’); } 1 ’hell’; b ’o, w’; c ’orld’;   Infelizmente, Kernighan não consegue identificar com certeza quando ou por que escolheu as palavras “Olá, Mundo!”. Quando questionado sobre o que gerou a ideia do nome “Olá, Mundo” em uma entrevista para a Forbes Índia, ele disse que sua memória está turva.      “O que me lembro é que vi um cartoon que mostrava um ovo e um pintinho e o pintinho dizia:“ Olá, mundo ”.    E você, já escreveu seu Olá, Mundo! ou melhor, seu Hello, World! hoje?   def hello():   print('Hello World!')  ","categories": ["Programacao"],
        "tags": ["Python","Programação","Curiosidades"],
        "url": "/programacao/origens-do-hello-world/",
        "teaser": "/assets/images/covers/fallback-teaser.jpeg"
      },{
        "title": "Git: Manual de sobrevivência do iniciante",
        "excerpt":"O Git é um sistema de controle de versão distribuído, criado por Linus Torvalds, nada mais nada menos que o criador do linux. Um software que tem por objetivo gerenciar diferentes versões no desenvolvimento de um documento qualquer, comumente utilizado no desenvolvimento de software para controlar diferentes versões dos códigos fonte e de sua documentação.   Diferente das outras opções de sistemas similares como o CSV e SVN, a arquitetura do git é descentralizada, ou seja, não existe um repositório oficial, apesar de existir esta possibilidade, então em cada repositório incluindo o da maquina do contribuidor, existira uma cópia completa e funcional, permitindo a utilização das operações do Git sem a necessidade de estar online.   Quando se trata de trabalho em equipe, e a maior parte do tempo as equipes estarão trabalhando em paralelo, um sistema como o Git se torna mais do que essêncial, para que não hajam conflitos entre as alterações realizadas por cada colaborador.   Também é comum que no constante desenvolvimento dos projetos hajam alterações que comprometam o seu funcionamento, neste caso o Git permite que essas alterações sejam revertidas de maneira rápida e simples.   Como isso funciona?   O Git trabalha em uma estrutura de ramificações, onde cada alteração de código cria um novo ponto na ramificação atual, essas ramificações, mais conhecidas como branchs são criadas no desenvolvimento de novas funcionalidades, e baseadas em branchs já existentes.   Cada contribuidor faz uma cópia local do repositório remoto original e cria as modificações necessárias, essa cópia será enviada novamente para o repositório remoto.   Passos no fluxo de contribuição de um projeto utilizando Git:      Clonar o repositório para que uma cópia contendo todos os arquivos originais esteja disponível localmente.   git clone &lt;HTTPS ou SSH&gt;      Criar uma branch, onde podemos alterar os arquivos do projeto sem interferir nos arquivos originais   git branch &lt;nome da ramificação (branch)&gt; # Alterar para a ramificação criada git checkout &lt;nome da ramificação (branch)&gt;      Conforme vamos criando e modificando os arquivos, adicionamos essas modificações   git add -p      E as dividimos em commits, é importante que a descrição do commit seja objetiva e clara quanto ao motivo das alterações, remoções ou inclusões, porque ela ficará salva no histórico das alterações.   git commit   Caso seja necessário realizar alguma alteração posterior ao primeiro commit já realizado, é possível adicionar as novas alterações e utilizar o comando:   git commit --amend      Uma vez que todas alterações forem finalizadas, vamos enviar a nossa branch contendo todas as alterações de volta para o repositório remoto, para que ela fique disponível para os demais contribuidores do projeto poderem ver e alterar.   git push --set-upstream origin &lt;nome da ramificação (branch)&gt;   Caso você tenha adicionado alterações posteriores, basta utilizar o seguinte comando:   git push --force with lease           Então é aberto um Pull Request, onde você pede ao dono do repositório que suas contribuições sejam incluídas nele.            Geralmente após a revisão das modificações ser realizada por algum dos outros contribuidores, você pode dar o merge que atualizara o repositório original com as suas modificações.       Comandos mais utilizados   Iniciando um repositório   git init   Buscar e aplicar modificações do repositório remoto no repositório local   git pull --prune   A flag --prune deleta branchs locais cujas modificações já foram aplicadas na branch original. Algumas vezes essas modificações podem gerar conflitos que necessitam de interação humana para serem corrigidos.   Resetando um commit   git reset --soft HEAD~1   A flag --soft garante que as alterações desfeitas sejam preservadas. Após executar o comando, você encontrará as mudanças como modificações locais não confirmadas em sua cópia local.   Se você não quiser manter essas alterações, simplesmente use a flag --hard. Faça isso apenas quando tiver certeza de que não precisa mais dessas alterações.   git reset --hard HEAD~1   Removendo um arquivo da área de staging ou desfazendo um git add   git reset &lt;nome do arquivo&gt;   Rebase   As modificações que você está fazendo em sua branch local podem ficar defasadas em relação ao repositório remoto, então é possível alterar a base de sua ramificação local para a mais atual com o comando rebase.   git rebase origin/&lt;main branch&gt;   Histórico de commits:   git log --graph --all --decorate --oneline      log: Mostra o histórico de commits.   --all: Apresenta todas referências.   --graph: Cria uma representação gráfica do histórico de commits.   --decorate: Traz o nome da referência para cada commit mostrado.   --oneline: Esta é uma abreviação para --pretty=oneline --abbrev-commi.   Deletar branchs locais cujas modificações já foram aplicadas ao repositório remoto “master”   git branch --merged | egrep -v \"(^\\*|master|dev)\" | xargs git branch -d      branch: Listar, criar ou deletar ramificações.   --merged: Ramificações as quais suas modificações já foram aplicadas ao repositório original.   |: Sequência de um ou mais comandos.   egrep: Mostrar linhas que correspondem a um padrão.   -d, --delete: Deletar ramificação.   Arquivar modificações   git stash   Mostrar diferenças entre as modificações armazenadas e a ramificação atual   git stash show -p      stash: Arquivar as alterações.   show: Mostrar as alterações arquivadas e suas diferenças em relação a ramificação original.   -p, --patch: Seleciona as diferenças entre o ponteiro HEAD e a branch atual.   Alterando o nome de uma branch local   git branch -m &lt;old-name&gt; &lt;new-name&gt;   Atualizar repositório local com o remoto incluindo tags   git pull --prune &amp;&amp; git fetch --tags --all --force &amp;&amp; git branch --merged | egrep -v \"(^\\*|main)\" | xargs --no-run-if-empty git branch --delete   Removendo arquivos não rastreados   git clean -f -d # remove untracked   O que é GitHub   Enquanto o Git é um sistema de versionamento, o GitHub é uma plataforma para criação de repositórios remotos Git, possibilitando que outras pessoas possam clonar esse repositório localmente, realizar alterações e enviar essas alterações de volta ao repositório remoto.   Alternativas      GitLab   BitBucket   Referências      Explain Shell   Stackoverflow - How to modify a specified commit?  ","categories": ["Git"],
        "tags": ["Git","Github","Iniciante","Comandos"],
        "url": "/git/git-manual-de-sobrevivencia-do-iniciante/",
        "teaser": "/assets/images/covers/git-log.jpeg"
      },{
        "title": "Como monitorar fluxos de negócios digitais",
        "excerpt":"Já faz algum tempo que venho trabalhado no desenvolvimento de monitoramentos, e quando digo monitoramentos a primeira imagem que costuma-se visualizar é a de diversos monitores com indicadores em tempo real, mensurando evoluções e declínios históricos, e o observador em sua busca de encontrar uma movimentação de uma linha tão acentuada que lhe chame a atenção. Já a segunda imagem é o monitoramento de métricas de infraestrutura, por exemplo, acompanhamento de logs de aplicação em ferramentas como LogEntries e Datadog ou a stack ELK.   O que eu realmente tenho feito não é nada disso, quero dizer, tem um pouco disso. O que monitoro são regras de negócio, em um provedor de serviços de pagamento, claro assim como em outros meios, precisamos garantir a integridade das informações e do comportamento de nossas ferramentas, afinal erros humanos são possíveis e prováveis, e dívidas técnicas de produto, inevitáveis.   Também não é necessário acompanhar a alteração das curvaturas em um monitor, temos uma aplicação interna construída em python, algo próximo de um agendador/orquestrador que irá disparar um alerta apenas quando for necessária a tomada de ação.   Hoje existem monitoramentos que verificam queda de conversão, comportamentos inesperados em outros players do fluxo de pagamentos, integridade de diversos serviços internos e fluxos financeiros. Mas a quais características devemos nos atentar para sermos eficientes?   Um monitoramento deve possuir um dono   Quando é encontrado algum problema, é necessário que haja uma pessoa, um time, ou times de pessoas responsáveis para soluciona-lo, se não é algo crítico que necessite de resolução ou que seja possível de resolver, não há motivo de tirar a atenção das pessoas de outras tarefas mais relevantes.   O problema monitorado precisa de um fluxo de resolução definido   Quando nos depararmos com um alerta, eu vou olhar para você, você vai olhar para mim e o que vamos fazer? Está não é a situação na qual queremos nos encontrar uma vez que sabemos o que estamos procurando, é bem provável que se existe um alerta já tenhamos presenciado o cenário do problema anteriormente.   Um monitoramento deve se atentar apenas a um único problema   Quanto mais problemas tentamos cercar em um único monitoramento, ou módulo responsável pela busca de problemas, maior a complexidade, dificuldade de manutenção, revisão e entendimento, não precisamos procurar pelo problema dentro do alerta quando no olho do furacão, não é mesmo? Quanto mais claro e explicito melhor!   Foco na performance   A ferramenta que você utiliza é performática o suficiente para conseguir buscar pelo problema que você está buscando? Ela consegue percorrer o volume de dados necessário, e também no tempo necessário para que as pessoas certas sejam mobilizadas para atacar o prolema antes que ele se torne crítico, ou não seja mais passível de solução?   Assertividade   Você conhece a história do menino e lobo? Havia um menino que morava com sua familia nas entranhas bosque, onde habitavam alguns animais selvagens. Certo dia esse menino resolveu pregar uma peça em seu irmão mais velho, adentrou em meio as arvores e gritou:   \"Socorro, socorro, há um lobo tentando me devorar!\"   Seu irmão empunhou um machado e correu em sua direção, mas para a sua surpresa não havia lobo algum. O menino então caiu na gargalhada e essa cena se repetiu mais algumas vezes, até que seu irmão não mais apareceu, mas o lobo faminto sim.   Em algum momento a alta incidência de falsos positivos fará com que os alertas percam a credibilidade e não recebam a devida atenção.   Por onde começar?      Entenda o real problema por qual você está buscando, uma vez que tenha isso claro fica fácil de encontra-lo uma vez que aparecer.   Garanta que o problema tenha um dono, responsável pela resolução.   Faça uma análise histórica para definir que de fato, os gatilhos que irão disparar o alerta serão assertivos. Muitas vezes estática básica pode ser uma solução simples e eficiente.   Teste, faça mocks e se assegure que tudo está funcionando corretamente antes de ir para produção, uma revisão também é sempre bem vinda, e também necessária.   Garanta que as pessoas certas, estão recebendo os alertas no momento certo.   Atente-se a edge cases, muitas vezes eles vão intervir na incidência tanto de falsos positivos como falsos negativos.   Faça um acompanhamento da efetividade dos alertas, extraia métricas, verifique se os resultados foram os esperados, assim como os problemas detectados com uma baixa incidência de falsos positivos.   Pense em escala, em algum momento poderá haver diversos problemas mapeados e a sua ferramenta pode não suportar buscar por todos eles.   Peça feedbacks dos consumidores dos monitoramentos, algum fluxo pode ter sido alterado e seu monitoramento precisará de uma atualização.   Não se esqueça que as visualizações de indicadores são complementares aos alertas, e também são ferramentas muito úteis para auxiliar o usuário final na investigação.  ","categories": ["Telemetria"],
        "tags": ["Monitoramento","Python"],
        "url": "/telemetria/como-monitorar-fluxos-digitais/",
        "teaser": "/assets/images/covers/alert.jpeg"
      },{
        "title": "SEO: Gerando tráfego orgânico com seu site estático em Jekyll",
        "excerpt":"SEO é a única maneira pela qual conseguimos gerar tráfego orgânico, o que costuma a ser melhor do que trafego pago, porque significa que o usuário realmente está interessado em seu produto ou serviço, e chegou a buscar pelo seu conteúdo de alguma forma.   Atualmente existem diversos mecanismos de busca, onde é considerada uma cadeia de diferentes fatores para indexar e ranquear uma página. Grande parte destas pesquisas é feita através do Google.   Lembre-se: Apenas páginas indexadas podem ser ranqueadas!   Como saber se a sua página está indexada no Google?   Simplesmente vá até a página do Google em seu navegador e digite site:seu-site.com.br, se você conseguir visualizar o seu site nos resultados, significa que ele já está indexado.   Fatores que deverão ser indexados   Há aproximadamente 200 parâmetros que são utilizados para melhorar a indexação de uma página, contudo vamos selecionar alguns dos principais, se tratando não de conteúdo, mas estrutura.      Título e Descrição   Estrutura de URL   Mapa do site   Tag alt para imagens   Conectores de mídias sociais   Open graph e cards do Twitter   Favicon   URL única   Responsividade   Velocidade   Estes fatores garantirão 60% da otimização de SEO da página, o restante depende de criação de conteúdo, construção de links, marketing e etc…   Dica: A maioria dos itens listados podem ser implementados com a tag { % SEO % } dentro da sessão head do site, onde o único requisito é a utilização dos plugins: jekyll-paginate e jekyll-seo-tag em seu arquivo de configuração (_config.yml). Estes plugins acrescentarão a maioria das tags necessárias para um bom SEO.   Título e Descrição   O Título deve corresponder à sua descrição e ao conteúdo do artigo, toda página de seu site deve conter título e descrição única. Caso você não especifique uma descrição, o primeiro parágrafo de sua página será considerado nos resultados de busca.   O primeiro parágrafo pode muitas vezes não apresentar um conteúdo relevante e correspondente ao título da página, a recomendação é que se utilize uma descrição breve que forneça a ideia geral do artigo, e assim como o título contenha algumas das palavras chave. A descrição deve respeitar o limite de 160 caracteres, um volume maior pode ser considerado spam pelos mecanismos de busca.   A descrição não é levada em conta para o ranqueamento do site, mas fará com que o usuário se interesse em seu conteúdo e clique em seu link dentre os resultados encontrados pelo mecanismo de busca.   Os robôs do mecanismo de busca procuram pelo seu Título e Descrição dentro da tag head primeiro. Portanto, certifique-se de mantê-lo lá para que eles consigam encontra-los.   Lembre-se: Você deve explicitamente adicionar o título e descrição ao Front Matter presente em todas as suas páginas, e sua descrição deverá ser truncada em 160 caracteres. Adicione as palavras chave ao ínicio da descrição para que os usuários encontrem sua página mais rapidamente em suas buscas no Google.   Estrutura de URL   Uma URL transmite muitas informações sobre o conteúdo, tanto usuários como robôs esperam que ela esteja em sincronia com o assunto abordado, portanto faça que ela seja legível. Uma boa estrutura de URL gera maior taxa de cliques.   Atualmente mecanismos de busca são inteligentes o suficiente para detectar se a URL possui relação com o conteúdo da página, e muitos sites útilizam ids em suas estrutura, o que prejudica tanto a transmissão de informação ao usuário quanto aos robôs de busca.   Incluir a data é opcional, e somente será útil se as datas realmente importam para o seu conteúdo.   Não útilize StopWords, palavras como de, a, o, que, e, do, da, em, um, para, é, com, não, uma, … não precisam ser indexadas e apenas aumentarão o tamanho da URL.   No Jekyll, uma URL pode ser alterada renomeando o arquivo na pasta _posts.   Mapa do site   Um mapa do site é uma lista de links que contém todas suas páginas, ele estará no formato .xml. Isso ajuda os robôs de mecanismos de pesquisa a rastrearem facilmente seu site. Ele também terá metadados como datas de postagens, páginas, data da última modificação e frequência de atualização.   Mapa deste site   Se o seu site não tiver postagens ou páginas, talvez você não precise de um mapa do site.   Você pode enviar seu sitemap para os principais mecanismos de pesquisa, como Google, Bing, Yahoo e etc, para que seus respectivos robôs indexem seu site.   Deixar um link para o mapa do site disponível também é uma boa ideia. Digamos que alguém faça uma referência a uma postagem sua em um blog bem classificado, há possibilidade de um robô rastrear esse link e chegar à sua postagem.   Tag alt para imagens   As tags alternativas de uma imagem não são nada mais que o texto que é mostrado caso uma imagem não carregue. Esta tag é lida pelos robôs, o que ajuda os mecanismos de pesquisa a saber sobre o que se trata a imagem.   Conexão com mídias sociais   A conexão com redes sociais pode ser conseguida através de robôões de compartilhamento na parte inferior de suas postagens.   Open graph e cartões do Twitter   O Open Graph é uma forma de tornar mais fácil o entendimento de um link compartilhado, é possível que algumas informações sejam perdidas, ou dados indesejados sejam detectados. Para evitar que isso ocorra e para que seu link seja melhor reconhecido pelas redes sociais, a implementação do Open graph é necessária, e pode ser realizada através de plugins como jekyll-seo.   Favicon   Um favicon é um arquivo .ico geralmente com as dimensões de 16x16. Este ícone é o que a maioria dos visitantes lembrará do seu site, ele deve representar o seu site de algum modo, para que quando um usuário se depare com ele em sua barra de favoritos, consiga o assimilar a sua página.   Responsividade   Após 21 de abril de 2015, o Google tornou a responsividade um parâmetro de indexação e ranqueamento essêncial para SEO. Quase todos os temas Jekyll, mesmo o tema default, são responsivos. Caso você esteja desenvolvendo um novo tema considere um layout responsivo que se ajuste a tamanhos menores de tela.   Referências      webjeda   webjeda  ","categories": ["SEO"],
        "tags": ["SEO","Jekyll","GitHub"],
        "url": "/seo/otimizar-seo-jekyll/",
        "teaser": "/assets/images/covers/seo.jpeg"
      },{
        "title": "Seleção de fundos de investimento imobiliário utilizando Python",
        "excerpt":"Os Fundos de investimento imobiliário (FIIs) são fundos constituídos por grupos de investidores com o objetivo de aplicar recursos em diversos tipos de investimentos imobiliários como shoppings centers, lages corporativas, galpões logísticos, ou até empreendimentos ainda em desenvolvimento. Ou seja, nada mais é do que investir no mercado imobiliário sem ter que comprar um imóvel.   Fundos de investimento imobiliários não são o mesmo que crowdfunding imobiliário   Seus investidores recebem retorno via dividendos ou na valorização de cotas. Os dividendos recebidos, também conhecidos como aluguéis, são distribuídos mensalmente e isêntos de imposto de renda.   Alguns de seus benefícios são:      Não há incidência de imposto sobre proventos, diferente do aluguél comum.   Não há custo com reformas.   Não há necessidade de lidar com inquilinos.   Mais acessível, por dispensar um alto investimento inicial.   Menos burocrático.   Alta liquidez devido à agilidade e à praticidade de vender os ativos quando necessário.   Baixa exposição de capital devido à diversificação.   Tipos      Fundos de renda: São aqueles constituídos por imóveis comprados, ou construídos com fins de aluguel. A renda líquida é distribuída para os cotistas. Seus contratos tendem a ser mais longos conferindo maior segurança.   Fundos de compra e venda: Tem por objetivo comprar imóveis a um valor mais baixo, que possuam expectativa de valorização e vende-lôs realizando lucro.   Fundos de desenvolvimento: Consistem na compra de terrenos para construção de empreendimentos para venda ou aluguél, as vezes com o objetivo de ganho na valorização dos imóveis. Os riscos podem surgir do embargo nas obras ou do próprio gerenciamento da construção, de imprevistos com o orçamento, problemas com licenças ambientais ou atrasos na entrega.   Fundos de recebíveis imobiliários: Também conhecidos como fundos de papéis, tem como principais representantes em seu portfolio de ativos os Certificados de Recebíveis Imobiliários (“CRI”), Letras Hipotecárias (“LH”) e Letras de Crédito Imobiliário (“LCI”).   Fundos de fundos: São similares a fundos de ações. Este tipo de fundo conta com maior taxa administrativa devido as taxas dos fundos em que este tipo de fundo tem participação, fora a sua própria, contudo possui maior diversificação.   Fundos de tijolo: Apresentam os imóveis físicos, essa aplicação tem como objetivo adquirir as propriedades para alugar, considerando o potencial de valorização ao longo do tempo.   Setores de fundos de investimento imobiliários   Shoppings   Apesar do mercado digital (E-commerce - Comércio eletrônico) ter se desenvolvido bastante, as pessoas ainda não deixaram de se dirigir aos shoppings tanto para comprar produtos como ir ao cinema, ou comer em um restaurante.      Shoppings são uma das principais opções de entretenimento familiar no Brasil.   São Multi Ativos e Multi inquilinos   Titulos e valores imobiliários   Os fundos de recebíveis, também conhecidos como fundos de papéis, trabalham predominantemente com ativos de renda fixa, mas com maior risco. Assim, as rentabilidades oferecidas costumam superar o CDI (O que é um requisito essêncial para ser considerado como opção viável de investimento).   Principáis tipos de pápeis:      CRI (Certificado de Recebíveis Imobiliários).   LCI (Letras de Crédito Imobiliário).   Letras Hipotecárias (LH).   Lajes Corporativas   O segmento de lajes corporativas, ou seja, predominantemente composto de edifícios comerciais, é o segundo maior no Brasil considerando o patrimônio somado de todos os fundos com cotas negociadas em bolsa.      Os contratos de locatários das lajes corporativas são em geral de longo prazo, em média cinco anos, com possibilidade de revisão depois de três anos. O rompimento antecipado de contrato é passível de multa multa.   Hibrído   Os FIIs híbridos podem investir em diferentes aplicações, expondo-se em todos os setores de imóveis, recebíveis imobiliários (CRI, LCI) ou em outros fundos imobiliários (cotas de FIIs).      Oferece maior diversificação comparado a uma categoria isolada.   Residêncial   Podem abranger a incorporação de novos edifícios, a compra e venda de imóveis e a renda gerada pelo aluguel das unidades.      Grande parte desses produtos de nicho têm baixa liquidez.   Hotel   Este setor gera lucro das seguintes maneiras:      Compra de participação em hotéis, explorando a renda das locações de quartos, assim como fazem outros FIIs.   Realizando a comercialização de unidades hoteleiras.   Por meio da valorização dos ativos.   Hospital   Todos os fundos são monoativos, ou seja, possuem apenas um imóvel. Eventualmente, os locatários podem optar pela saída do imóvel ou não renovar o contrato. Assim, até encontrar um novo inquilino, o fundo perderia totalmente a sua receita de aluguel, além de precisar lidar com os gastos do imóvel.   Além disso, esse é um formato de imóvel muito personalizado para hospitais. Portanto, um novo locatário acabaria sendo, necessariamente, do mesmo segmento.   Finalmente, há outro risco que é a inadimplência. Claro que ela afeta outros setores, mas para os hospitais há um desafio adicional. Caso o locatário passe a não cumprir com os pagamentos, o despejo pode ser dificultado pelo juiz em função da função social de um hospital. Prova disso é que os fundos de hospitais têm enfrentado decisões judiciais e os seus resultados foram favoráveis aos locatários.   Logística   Ao contrário de outros tipos de negócio físico, os fundos logísticos apresentam uma demanda crescente. Isso deve-se predominantemente ao crescimento do e-commerce, apesar de suas vendas serem realizada em ambiente digital, ainda é necessário garantir a entrega dos produtos fisicamente.   Características      Mono ativo: Possuem apenas um único ativo.   Multi ativo: Seu portfólio possui diversos ativos.   Mono inquilino: Seus imóveis possem apenas um inquilino.   Multi inquilino: Seus imóveis são alugados para diversos inquilinos.   Localização      O imóvel está em um local que é pertinente ao setor de atuação?   O imóvel está conservado e possui fácil acesso?   Shoppings estarão melhor localizados quando próximos de centros urbanos.   Galpões logísticos necessitam de boa acessibilidade, devem estar perto de boas estradas.   Lages corporativas tem preferência a centros financeiros.   Taxa de vacância/ocupação      Quanto maior a taxa de vacância, há menos inquilinos para pagar aluguel, consequentemente o valor de aluguel a ser recebido pode diminuir.   Uma taxa de vacância baixa pode significar que os imóveis são bem localizados, e o fundo possui boa gestão.   É necessário analisar não só a vacância atual, mas seu histórico.   Quem são os inquilinos? Empresas grandes listadas em bolsa? (Verifica relatório gerencial do fundo)   Dividend Yield      A renda é recorrente?   Os valores apresentam baixa volatilidade?   Renda média anual real acima dos títulos públicos?   Padrão construtivo      Possui certificação AAA? (Opcional)   Os empreendimentos apresentam uma aparência atrativa?   Diversificação      Multi ativos   Multi inquilino   Ativos distribuídos em diversas regiões   Líquidez      As cotas do fundo devem possuir negociação diária acima de R$100.000,00.   Valuation           P/VPA: Este indicador relaciona o preço da cota ao valor patrimonial proporcional a ela, e indica quanto os cotistas aceitam pagar pelo patrimônio líquido da fundo. Este valor é obtido através da divisão entre o preço da ação e Valor Patrimonial por Ação (VPA).              Um valor baixo pode apresentar uma oportunidade, mas também pode ser um indicativo de que este fundo tem problemas estruturais.       Um valor acima pode representar que o valor está mais caro ou uma expectativa de que o gestor do fundo comprará mais imóveis aumentando os proventos que serão recebidos.       Considerar valor &lt; 1,1.           Relação com investidores      Divulgação de relatórios é consistente, e seus relatório são claros e explicativos?   Demais fatores      O fundo possui pelo menos um ano de idade?   Fundos em fase de renda minima garantida podem apresentar valores de proventos insustentáveis a longo prazo.   O fundo performa melhor que o IFIX?   Verificar o histórico de gestão do fundo imobiliário.   Evitar fundos de desenvolvimento ou incorporação, porque há imóveis que ainda estão em construção, como o imóvel não está pronto, não foi vendido ou alugado, todo risco vai para o cotista.   Constituição de carteira      Diversificação de 4 ~ 10 fundos para facilitar a administração.   Bônus      Fique atento aos eventos de subscrição para poder realizar arbitragem.   400: Invalid request   Links úteis      Funds Exploer   Trademap   Fiis   Clube fii   Status Invest   B3  ","categories": ["Python"],
        "tags": ["Python","Investimentos"],
        "url": "/python/selecao-fundos-imobiliarios-python/",
        "teaser": "/assets/images/covers/fiis.jpeg"
      },{
        "title": "Como instalar Docker e Docker Compose no Raspberry Pi",
        "excerpt":"O Docker é bastante utilizado no mundo de desenvolvimento de software, com ele é possível virtualizar a mesma infraestrutura de sua máquina, em qualquer ambiente que aceite containers Docker. Basicamente podemos criar uma rede de máquinas virtuais isoladas logicamente do host, permitindo a representação fiel tanto em modo de desenvolvimento, quanto em modo de produção.   Para os desenvolvedores, não há mais a desculpa “mas na minha máquina funcionou! Deve ser algum problema na sua…”.   Além da segurança, qual é a vantagem desse isolamento?   O Docker permite a exclusão de seus containers e imagens sem que isso afete qualquer outro componente da maquina em que está instalado.   Instalando o Docker      Atualize o sistema   sudo apt-get update &amp;&amp; \\ sudo apt-get upgrade      Instale os pré requisitos   sudo apt-get install apt-transport-https ca-certificates software-properties-common -y      Baixe e instale o Docker   curl -fsSL get.docker.com -o get-docker.sh &amp;&amp; sh get-docker.sh      Depois da instalação, é necessário adicionarmos o usuário pi ao grupo docker, para podermos executar imagens sem sudo   sudo usermod -aG docker pi      Importe a chave GPG   sudo curl https://download.docker.com/linux/raspbian/gpg      Configure o repositório Docker      Abra o arquivo com o editor de texto   vim /etc/apt/sources.list      Adicione a linha   deb https://download.docker.com/linux/raspbian/ stretch stable      Habilite o Docker para executar sempre que o sistema for iniciado   sudo systemctl enable docker      Reinicie o sistema para que as alterações tenham efeito   sudo reboot -h now      E verifique se tudo deu certo com o comando abaixo:   sudo docker run --rm hello-world   Instalando o Docker Compose      Instalando as dependências necessárias   sudo apt update &amp;&amp; \\ sudo apt install -y python3-pip libffi-dev      Instalando o Docker Compose   sudo pip3 install docker-compose   Observações   Dependendo da arquitetura do modelo, e do sistema operacional instalado no Raspberry Pi você terá que utilizar imagens ARM, no caso do python por exemplo:   FROM arm32v7/python:3.7-slim-buster  ","categories": ["Python"],
        "tags": ["Python","Docker","RaspberryPi"],
        "url": "/python/como-instalar-docker-docker-compose-raspberrypi/",
        "teaser": "/assets/images/covers/docker-pi.jpeg"
      },{
        "title": "Docker, eliminando a procura diária por esses comandos no Google.",
        "excerpt":"Quando você utiliza muitos containers Docker em seu dia a dia para diversos programas diferentes, containers antigos podem ficar “pendurados”, juntando poeira e acumulando espaço em seu disco. Ou então você pode querer acessar a shell, mais conhecida como linha de comando, mas não consegue decorar qual comando utilizar?   Listas de comandos para você não precisar mais acessar o Google   Docker      Parar todos containers ativos:   docker stop $(docker ps -a -q)      Deletar todos containers:   docker rm $(docker ps -a -q)      Apagar todas imagens:   docker rmi -f $(docker images -a -q)      Informações detalhadas sobre um object Docker:   docker inspect &lt;CONTAINER ID&gt;      Remove objetos Docker não usados (containers, imagens, redes e volumes):   docker system prune      Remove apenas os containers parados:   docker rm $(docker ps -aq -f status=exited)   Docker Compose      Constrói a imagem de um container desconsiderando o cache:   docker-compose build --no-cache &lt;SERVICE NAME&gt;      Acessa a shell de um container:   docker-compose run --rm &lt;SERVICE NAME&gt; /bin/sh   Faixa bônus   Abaixo um simples e não otimizado docker-compose.yml, que utilizo no desenvolvimento deste blog:   version: \"3\"  services:   jekyll-draft:     image: jekyll/jekyll:latest     command: jekyll serve --watch --draft --livereload     ports:       - 4000:4000     volumes:       - .:/srv/jekyll    jekyll-dev:     image: jekyll/jekyll:latest     command: jekyll serve --watch --trace --livereload     ports:       - 4000:4000     volumes:       - .:/srv/jekyll  ","categories": ["Docker"],
        "tags": ["Docker","Jekyll"],
        "url": "/docker/docker-comandos-procura-diaria-google/",
        "teaser": "/assets/images/covers/docker-commands.jpeg"
      },{
        "title": "Conheça as vantagens e desvantagens do Tesouro Direto, e da Previdência Privada",
        "excerpt":"Conheça as vantagens e desvantagens do Tesouro Direto, e da Previdência Privada, dois dos investimentos mais conhecidos e conservadores para auxiliar na sua aposentadoria. Lembrando que estes não devem ser as únicas cestas para colocar todos seus ovos.   Tesouro Direto   Oposta a crença popular, o Tesouro Direto não é um produto do mercado financeiro, na verdade, é o nome dado ao programa do Tesouro Nacional para incentivar investimentos em papéis da dívida publica do Governo Federal   O Tesouro Direto possui o maior nível de segurança do país entre todos investimentos disponíveis, Mesmo sem garantias do FGC(Fundo Garantidor de Crédito) o seu risco se da apenas no evento de quebra do Estado.   O portfolio do Tesouro Direto é composto por três tipos de títulos públicos:   Prefixados   A rentabilidade do titulo é definida em contrato, e o investidor sabe no momento da aplicação qual será o montante final a ser recebido com seu investimento.   Títulos:      Tesouro Prefixado (LTN)   Tesouro Prefixado com Juros Semestrais (NTN-F)   Pós-fixados   A rentabilidade está atrelada a algum indicador econômico, como a taxa básica de juros (Selic), por este motivo não é possível prever suas variações até o momento do resgate do título.   Títulos:      Tesouro Selic (LFT): No momento desta publicação é altamente indicado para reservas de emergência, onde se aplica de 6 a 12 meses de seus custos de vida contando com todas regalias. Neste investimento você possuirá líquidez em D+1, contudo espere 31 dias para realizar o primeiro saque senão estará sujeito ao pagamento de IOF, e devemos considerar que alíquota de IR é regressiva de 22,5% até 15%, ou seja, quanto mais tempo ficar aplicado menos imposto será pago.   Híbrido   A rentabilidade é formada por uma parte fixa definida em contrato e outra parte que varia conforme as oscilações do indicador ao qual o titulo esta atrelado, é muito comum encontrarmos títulos atrelados a inflação e mais algum percentual fixo.   Títulos:      Tesouro IPCA+ (NTN-B Principal)   Tesouro IPCA+ com Juros Semestrais (NTN-B)   Tesouro IGPM+ com Juros Semestrais (NTN-C)   O Tesouro IPCA é um bom candidato para aposentadoria.   Vantagens do Tesouro Direto      Rendimento   Flexibilidade   Líquidez   Baixo risco   Desvantagens do Tesouro Direto      Taxa de custódia da B3 (0,25% a.a)   Previdência Privada   Os planos de Previdência Privada, que podem ser abertos ou fechados, são aplicações indicadas para objetivos de longo prazo, como complemento de renda para aposentadoria.           Planos fechados: Os planos fechados, também conhecidos como fundos de pensão, recebem esse nome por serem acessíveis apenas para funcionários vinculados a uma determinada empresa. Esse tipo de previdência não tem fins lucrativos. Por isso, geralmente possui um custo menor que os demais fundos ofertados no mercado, muitas vezes não possuem taxas ou apenas uma taxa de administração            Planos abertos: Os planos abertos de previdência privada estão disponíveis para qualquer pessoa, eles são emitidos por instituições financeiras, e distribuídos por corretoras de valores, corretoras de seguros e bancos. Os dois principais tipos de previdência privada aberta são PGBL e VGBL, onde a principal diferença é tida no modelo de tributação.       PGBL - Plano Gerador de Benefício Livre   Este plano é mais indicado para quem faz declaração de Imposto de Renda por meio do formulário completo. Neste tipo de previdência, é possível abater seus aportes no IR, respeitando o limite de até 12% da renda do ano. Ou seja, este plano serve melhor a quem é CLT, e possui muitas despesas dedutíveis.      Optar por este modelo caso faça declaração de Imposto de Renda por meio do formulário completo   Contribuir com até 12% da renda anual tributável, a fim de usufruir da dedução na base de cálculo do imposto de renda.   O montante acumulado no plano será tributado em sua totalidade, e não apenas em seus rendimentos.   VGBL - Vida Gerador de Benefício Livre   Esta modalidade é classificada como seguro de pessoas, e é mais indicada para aqueles que usam o formulário simples na declaração do IR, ou seja, quem não possui tantas despesas.      Optar por este modelo caso faça declaração de Imposto de Renda simplificada ou seja isento.   Caso haja pretensão de aplicar mais que 12% de sua renda bruta anual.   Os valores depositados não podem ser deduzidos da base de cálculo do IR. Contudo a tributação incide apenas nos rendimentos.   Parecido com o fundo de investimento convencional.   Tributação progressiva   O regime progressivo segue a tabela da alíquota do IR incidente sobre a renda anual tributável.   Anual:                  Base de cálculo (R$)       Alíquota (%)       Parcela a deduzir do IRPF (R$)                       Até 22.847,76       -       -                 De 22.847,77 até 33.919,80       7,5       1.713,58                 De 33.919,81 até 45.012,60       15       4.257,57                 De 45.012,61 até 55.976,16       22,5       7.633,51                 Acima de 55.976,16       27,5       10.432,32           Mensal:                  Base de cálculo (R$)       Alíquota (%)       Parcela a deduzir do IRPF (R$)                       Até 1.903,98       -       -                 De 1.903,99 até 2.826,65       7,5       142,80                 De 2.826,66 até 3.751,05       15       354,80                 De 3.751,06 até 4.664,68       22,5       636,13                 Acima de 4.664,68       27,5       869,36           Fonte: Receita Federal do Brasil, 2020   Tributação regressiva   A tributação vinculada ao tempo da aplicação e possui uma tabela própria, quanto maior for o prazo de permanência dos recursos, menor será a alíquota de imposto de renda na hora do resgate ou recebimento da renda.   Este regime, em geral, é uma boa escolha para quem tem a perspectiva de utilizar os recursos a longo prazo, em um período superior a dez anos.                  Prazo do Aporte       Alíquota (%)                       Até 2 anos       35                 De 2 a 4 anos       30                 De 4 a 6 anos       25                 De 6 a 8 anos       20                 De 8 a 10 anos       15                 Acima de 10 anos       10           Taxas   Caso inexistentes ou mais próximas de zero melhor.      Taxa de carregamento: Taxas descontadas geralmente a cada aplicação ou retirada (de 0% a 6%). Atualmente muitas instituições não cobram mais taxa de carregamento, negocie!   Taxa de administração: Todo fundo possui taxas de administração (De 0.x% a 5%).   Taxa de saída: Multa cobrada na saida antes do prazo minimo estabelecido.   Vantagens da previdência privada      Abatimento do IR (PGBL)   Menor alíquota a longo prazo (10 anos de aplicação)   Fundo sem come-cotas   Flexibilidade (portabilidade)   Diversificação   Caso não esteja satisfeito com a sua previdência é possível realizar portabilidade para outro plano sem pagar taxas.   Sucessão patrimonial (Não passa por inventário)   Desvantagens da previdência privada      Taxas (Administração e Carregamento)   Não há a cobertura do FGC (Fundo Garantidor de Crédito)   Período de carência   Investimento Inicial   Evite fundos de previdência que possuem taxa de carregamento e taxa de custódia, como os oferecidos pelos grandes bancos de varejo.   Observações      Analisar histórico de desempenho do fundo vinculado ao plano   Verificar histórico de rentabilidade   Avaliar a qualidade da gestão   É importante que os rendimentos superem o CDI   A tributação de retirada é calculada sobre a data de cada aplicação.   Diferenças entre Fundos de Investimentos e Previdência Privada   A Previdência Privada é uma modalidade de investimento mais conservadora, e seus ganhos são obtidos na acumulação de longo prazo, dedução fiscal através do PGBL, e através da tabela de regressiva do imposto de renda, que atualmente é a menor alíquota disponível para um produto financeiro podendo chegar a 10% (Ao final de 10 anos, contando da data de cada aporte). Além de que com a previdência é possível fazer o resgate do recurso em formato de renda.   Outro benefício é o plano sucessório, onde para efeito de falecimento não é necessário passar pelo processo de inventário caso seu plano de previdência seja de distribuição limitada.   Não passar pelo inventário não significa que não terá a cobrança do ITCMD, onde cada estado possui sua alíquota.   Links úteis      Info Fundos  ","categories": ["Investimentos"],
        "tags": ["Investimentos"],
        "url": "/investimentos/conheca-vantagens-desvantagens-tesouro-direto-previdencia-privada/",
        "teaser": "/assets/images/covers/treasure.jpeg"
      },{
        "title": "Ferramentas para melhorar a qualidade do seu código",
        "excerpt":"Uma das dores que comecei a sentir no inicio da minha trajetória como programador, e acredito que seja a dor de muitos, gira em torno de revisões demoradas e cansativas por conta de espaços a mais, e padrões de escrita. Acredito que dificilmente vamos decorar toda PEP 8 no caso do Python, e além disso que mesmo após uma boa revisão de código algumas brechas de segurança como atualização de dependências pode acabar passando desapercebidas.   Porque não utilizar a tecnologia a nosso favor?   Ferramentas para melhorar a qualidade do seu código   Suporte a linguagem   Python      Extensão Visual Studio Code   Análise de qualidade e segurança   DeepCode      Site Oficial   Sonarcloud      Site Oficial   Sonarqube      Site Oficial   Snyk      Site Oficial   Codacy      Site Oficial   Codeinspector      Site Oficial   CodeGuru AWS      Site Oficial   Sonarlint           Site Oficial            Extensão Visual Studio Code       CodeScan      Site Oficial   DeepScan      Site Oficial   Linters   Python   Pylama   pip install pylama   Flake8   pip install flake8   Formatadores automáticos   Python   autopep8   pip install autopep8   yapf   pip install yapf   black   pip install black   isort   pip install isort   SQL   SQL Server      Extensão Visual Studio Code   Javascript   Prettier      Extensão Visual Studio Code   Corretores ortográficos   Code Spell Checker      pt_BR: Extensão Visual Studio Code   en_US: Extensão Visual Studio Code   Syntax Highlighters   VimL      Extensão Visual Studio Code   Terraform      Extensão Visual Studio Code   DotEnv      Extensão Visual Studio Code   Docker      Extensão Visual Studio Code   Trailing spaces      Extensão Visual Studio Code   Cor dos brackets      Extensão Visual Studio Code   TOML      Extensão Visual Studio Code   Auto Complete   Visual Studio IntelliCode      Extensão Visual Studio Code   Suporte ao Git      Extensão Visual Studio Code   Temas   Dracula      Extensão Visual Studio Code   Links úteis      Setup Black and Isort in VSCode  ","categories": ["Programacao"],
        "tags": ["linter","formatter","syntax","tema","extensões"],
        "url": "/programacao/ferramentas-melhorar-qualidade-codigo/",
        "teaser": "/assets/images/covers/ferramentas-qualidade-codigo.jpg"
      },{
        "title": "Python para finanças: Obtendo cotações pelo yahoo finance",
        "excerpt":"Em algum momento, todos procuramos como obter as cotações da bolsa programaticamente, e realmente é muito simples uma vez que já existem bibliotécas que fazem todo o trabalho pesado.   Requerimentos      Docker   Docker Compose   Makefile   Jupyter lab dockerizado   %%writefile requirements.txt numpy==1.19.2 pandas==1.1.3 matplotlib==3.3.2 pandas-datareader==0.9.0 yfinance==0.1.55 seaborn==0.11.0   Overwriting requirements.txt   !pip install -q -r requirements.txt   Bibliotecas   import matplotlib.pyplot as plt import numpy as np import pandas as pd import pandas_datareader as web import seaborn as sns import yfinance as yf import warnings  warnings.filterwarnings('ignore')  yf.pdr_override()   Obtendo dados do mercado   BOVESPA   # Obtenção de dados do Bovespa df_ibov = web.get_data_yahoo(\"^BVSP\") df_ibov.head()                           High       Low       Open       Close       Volume       Adj Close                 Date                                                                 2015-11-05       48061.0       47430.0       47712.0       48047.0       3189000.0       48047.0                 2015-11-06       48046.0       46397.0       48046.0       46919.0       3091100.0       46919.0                 2015-11-09       47001.0       46057.0       46915.0       46195.0       2278500.0       46195.0                 2015-11-10       46195.0       45397.0       46195.0       46179.0       2401800.0       46179.0                 2015-11-11       47231.0       46207.0       46207.0       47065.0       3071700.0       47065.0            # Ordenando os valores dos mais atuais aos mais antigos df_ibov.sort_values(by=\"Date\", ascending=False).head()                           High       Low       Open       Close       Volume       Adj Close                 Date                                                                 2020-11-03       96350.226562       93967.640625       93967.640625       95979.710938       0.0       95979.710938                 2020-10-30       96579.000000       93559.000000       96579.000000       93952.000000       10643200.0       93952.000000                 2020-10-29       96688.000000       93387.000000       95368.000000       96582.000000       12704400.0       96582.000000                 2020-10-28       99598.000000       95369.000000       99598.000000       95369.000000       11051600.0       95369.000000                 2020-10-27       101660.000000       99414.000000       101017.000000       99606.000000       8672300.0       99606.000000            # Preço de fechamento df_ibov[\"Close\"].plot(figsize=(20, 5), label=\"ibov\") # Média móvel 21 dias df_ibov[\"Close\"].rolling(21).mean().plot(label=\"mm-21\") # Média móvel 200 dias df_ibov[\"Close\"].rolling(200).mean().plot(label=\"mm-200\") # Legendas plt.legend() plt.show()      # Fatia dos dados referente a 2020 df_ibov_slice = df_ibov[(df_ibov.index.year &gt;= 2020) &amp; (df_ibov.index.year &lt;= 2021)] # Preço de fechamento df_ibov_slice[\"Close\"].plot(figsize=(20, 5), label=\"ibov\") # Média móvel 21 dias df_ibov_slice[\"Close\"].rolling(21).mean().plot(label=\"mm-21\") # Média móvel 200 dias df_ibov_slice[\"Close\"].rolling(90).mean().plot(label=\"mm-90\") # Legendas plt.legend() plt.show()      Itaú   # Utilizando parametros de inicio e fim de intervalo df_itub = web.get_data_yahoo(\"ITUB3.SA\", start=\"2019-01-01\", end=\"2020-10-01\") df_itub.head()                           High       Low       Open       Close       Volume       Adj Close                 Date                                                                 2019-01-02       32.270000       30.049999       30.049999       31.959999       976900.0       29.444265                 2019-01-03       32.299999       31.309999       31.309999       32.250000       283000.0       29.711435                 2019-01-04       32.400002       31.629999       32.250000       31.709999       336400.0       29.213940                 2019-01-07       32.299999       31.900000       31.950001       32.119999       222800.0       29.591665                 2019-01-08       32.290001       31.709999       32.119999       32.200001       266600.0       29.665379            # Preço de fechamento df_itub[\"Close\"].plot(figsize=(20, 5), label=\"ibov\") # Média móvel 21 dias df_itub[\"Close\"].rolling(21).mean().plot(label=\"mm-21\") # Média móvel 200 dias df_itub[\"Close\"].rolling(200).mean().plot(label=\"mm-200\") # Legendas plt.legend() plt.show()      Correlação ibov e dolar   tickers = [\"^BVSP\", \"USDBRL=x\"] df_wallet = web.get_data_yahoo(tickers)[\"Close\"] df_wallet.head()                    Symbols       ^BVSP       USDBRL=x                 Date                                     2015-11-05       48047.0       3.7956                 2015-11-06       46919.0       3.7801                 2015-11-09       46195.0       3.7663                 2015-11-10       46179.0       3.7991                 2015-11-11       47065.0       3.7454            df_wallet.columns = [\"ibov\", \"usd\"]   # Utilizando a biblioteca seaborn para aprimorar a visualização sns.set() df_wallet.plot(subplots=True, figsize=(20, 8)) plt.show()      df_wallet = df_wallet.dropna() df_wallet.info()   &lt;class 'pandas.core.frame.DataFrame'&gt; DatetimeIndex: 1085 entries, 2015-11-05 to 2020-11-03 Data columns (total 2 columns):  #   Column  Non-Null Count  Dtype   ---  ------  --------------  -----    0   ibov    1085 non-null   float64  1   usd     1085 non-null   float64 dtypes: float64(2) memory usage: 25.4 KB   # Correlação df_wallet_corr = df_wallet.corr() df_wallet_corr                           ibov       usd                       ibov       1.000000       0.446715                 usd       0.446715       1.000000            sns.heatmap(df_wallet_corr, annot=True) df_wallet_corr                           ibov       usd                       ibov       1.000000       0.446715                 usd       0.446715       1.000000               # Janela móvel anual da correlação entre dolar e bovespa df_wallet[\"usd\"].rolling(252).corr(df_wallet[\"ibov\"]).plot(figsize=(22, 8)) plt.show   &lt;function matplotlib.pyplot.show(close=None, block=None)&gt;      df_wallet[\"ibov_usd_currency\"] = df_wallet[\"ibov\"] / df_wallet[\"usd\"]   sns.set() df_wallet.plot(subplots=True, figsize=(20, 8)) plt.show()      Referências      Código Quant - Finanças Quantitativas  ","categories": ["Financas"],
        "tags": ["Python","Financas"],
        "url": "/financas/python-financas-cotacoes-yahoo-finance/",
        "teaser": "/assets/images/covers/2020-10-20-python-financas-cotacoes-yahoo-finance.jpg"
      },{
        "title": "Configurando setup básico para programar no Ubuntu",
        "excerpt":"A primeira configuração de um novo ambiente, ou até mesmo a preparação do setup após formatar sua maquina pode ser um pouco trabalhosa, ainda mais quando não temos os passos de instalação dos principais programas que utilizamos para seguirmos, então porque não documenta-los para segui-los no próximo setup?   Oh my Zsh      Oh My Zsh GithubPage   git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions &amp;&amp; \\ git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting   # ~/.zshrc  plugins=(   # Autocomplete suggestions based in your history   zsh-autosuggestions   # Basically it make the command green if typed right, red if doesn’t   # and underline existent folders/files.   zsh-syntax-highlighting )  ## Custom ## # Activate Python general virtual environment alias generalenv=\"source ~/environments/general/bin/activate\" # Always require python environment export PIP_REQUIRE_VIRTUALENV=true # Don't write __pycache__, *.pyc and similar files export PYTHONDONTWRITEBYTECODE=1   Python   Virtual Environment      Create:   sudo apt-get install -y python3-venv &amp;&amp; \\ python3 -m venv ~/environments/general      Activate:   source ~/environments/general/bin/activate      Essential libs:   pip3 install black isort pylama flake8 pytest wheel   Snap Store   App store for linux   sudo apt update sudo apt install snapd   Visual Studio Code   sudo snap install code --classic      Turn on Settings Sync   Firefox      Codecs:   sudo apt install ffmpeg      Dracula Theme   Default Search Engine: DuckDuckGo   Last Pass      Official Last Pass site   Docker   Via Snap:   sudo snap install docker   -Docker Docs      Print architecture:   dpkg --print-architecture   sudo groupadd docker sudo gpasswd -a $USER docker newgrp docker sudo usermod -aG docker $USER # Restart docker sudo systemctl restart docker   Docker Compose      Docker Compose Docs   Slack   sudo snap install slack --classic      Slack Docs   Dracula Theme   Vim   sudo apt install vim &amp;&amp; \\ # Choose /usr/bin/vim.basic sudo update-alternatives --config editor   Make   sudo apt-get install make   GitHub      SSH   OpenVPN   openvpn --config sample.ovpn   Insomnia   sudo snap install insomnia   Referências:      Encriptação de disco Ubuntu  ","categories": ["Programacao"],
        "tags": ["linter","formatter","syntax","tema","extensões","ubuntu","setup"],
        "url": "/programacao/configurando-setup-programacao-ubuntu/",
        "teaser": "/assets/images/covers/2020-08-25-configurando-setup-programacao-ubuntu.jpeg"
      },{
        "title": "Como instalar Ubuntu server no RaspberryPi",
        "excerpt":"O Raspbian, na data desta publicação conhecido como Raspberry Pi OS, é um ótimo sistema operacional, contudo existem outras opções para instalarmos no Raspberry Pi e uma delas, sim senhoras e senhores, é o Ubuntu.   Abaixo um passo a passo da instalação e resolução de eventuais problemas que encontrei pelo caminho.   Ubuntu server 20.04 LTS      Donwload da imagem Ubuntu - Downloads   Gravar a imagem em um cartão SD, recomendo a utilização do Balena Etcher   Para configurar o wifi basta acessar arquivo network-config, remover o comentário das linhas e preencher com os dados de sua rede colocando tanto o nome da rede quanto a senha entre aspas (\")   #wifis: #  wlan0: #    dhcp4: true #    optional: true #    access-points: #      myhomewifi: #        password: \"S3kr1t\" #      myworkwifi: #        password: \"correct battery horse staple\"      Para problemas de distorção no display adicionar as seguintes linhas em seus respectivos arquivos:   No arquivo /system-boot/config.txt:   #/system-boot/config.txt  # uncomment if hdmi display is not detected and composite is being output hdmi_force_hotplug=1  # uncomment to force a specific HDMI mode (this will force VGA) hdmi_group=2 hdmi_mode=16  # uncomment to force a HDMI mode rather than DVI. This can make audio work in # DMT (computer monitor) modes hdmi_drive=2  # uncomment to increase signal to HDMI, if you have interference, blanking, or # no display config_hdmi_boost=4   e também no arquivo /system-boot/usercfg.txt:   # /system-boot/usercfg.txt dtoverlay=vc4-fkms-v3d           Insira o cartão SD em seu raspberrypi e para logar utilize ubuntu como forma de login e senha            para mudar configuração de teclado utilize o comando       sudo dpkg-reconfigure keyboard-configuration   Libs para python   sudo apt install build-essential libssl-dev libffi-dev python-dev   Desktop      Instalação:   sudo apt install lubuntu-desktop --fix-missing   Reinicie o sistema   sudo reboot -h now   Comandos      Verificando a temperatura:   paste &lt;(cat /sys/class/thermal/thermal_zone*/type) &lt;(cat /sys/class/thermal/thermal_zone*/temp) | column -s $'\\t' -t | sed 's/\\(.\\)..$/.\\1°C/'      Descobrindo IP com display:     hostname -I on raspberyy terminal      Desligando graciosamente:   sudo shutdown -h now   ou   sudo poweroff   Referências      Raspberrypi.org - IOS ssh   Iot4Beginners   Screen distortion during install ubuntu server   Weird display   Temperature Monitoring  ","categories": ["raspberrypi","ubuntu"],
        "tags": ["ubuntu","raspberry","pi"],
        "url": "/raspberrypi/ubuntu/como-instalar-ubuntu-raspberry-pi/",
        "teaser": "/assets/images/covers/2020-11-26-como-instalar-ubuntu-raspberry-pi.jpg"
      },{
        "title": "Code Signal Arcade - Desafio 1",
        "excerpt":"Quando começamos a programar, pode ter certeza que o nosso código não é dos mais eficientes ou mais legíveis, e realmente no começo o que precisamos de fato é fazer com que ele funcione conforme o esperado e nada mais que isso.   Mas e depois que já fizemos alguns projetos, não seria legal se as pessoas entendessem o que escrevemos? Mais do que legal, extremamente necessário, ainda mais para trabalharmos em equipe.   E sim, vou lhes dizer uma das formas de fazer isso, alem de copiar muitos bons projetos no github, há sites com desafios que nos ajudam a melhorar nosso código, e podemos até acessar a resposta de outros usuários. Nestes sites temos desde os desafios mais básicos, aos mais avançados, e mesmo nos mais básicos as vezes podemos nos surpreender com soluções mais eficientes que não haviamos pensando anteriormente.   Porque soluções mais eficientes, com menos linhas de código, onde isso é necessário na vida real? Bem, no exemplo mais simples, até um laço de repetição as vezes pode estar consumindo recursos do sistema desnecessáriamente e só sentimos isso quando o nosso programa ou aplicação precisa de escala.   Vamos começar do ínicio, no Code Signal, por exemplo, temos o modo arcade, onde podemos escolher a linguagem que queremos treinar e contamos com uma introdução de 60 desafios, podendo ver soluções para o mesmo problema escritas em diversas outras linguagens.      The Journey Begins   Desafio 1   Write a function that returns the sum of two numbers.   Example   For param1 = 1 and param2 = 2, the output should be add(param1, param2) = 3.   Input/Output   [execution time limit] 4 seconds (py3)  [input] integer param1  Guaranteed constraints: -1000 ≤ param1 ≤ 1000.  [input] integer param2  Guaranteed constraints: -1000 ≤ param2 ≤ 1000.  [output] integer  The sum of the two inputs.   Solução   def add(param1, param2):     \"\"\"     Return the sum of two numbers     :param1: Number type     :param2: Number type     :return: Sum of param1 and param2     \"\"\"     return param1 + param2  ","categories": ["Programacao"],
        "tags": ["Python"],
        "url": "/programacao/code-signal-arcade-1/",
        "teaser": "/assets/images/covers/codesignal.png"
      },{
        "title": "Code Signal Arcade - Desafio 2",
        "excerpt":"The Journey Begins   Desafio 2   Given a year, return the century it is in. The first century spans from the year 1 up to and including the year 100, the second - from the year 101 up to and including the year 200, etc.   Example   For year = 1905, the output should be centuryFromYear(year) = 20; For year = 1700, the output should be centuryFromYear(year) = 17.   Input/Output   [execution time limit] 4 seconds (py3)  [input] integer year  A positive integer, designating the year.  Guaranteed constraints: 1 ≤ year ≤ 2005.  [output] integer  The number of the century the year is in.   [Python 3] Syntax Tips   # Prints help message to the console # Returns a string def helloWorld(name):     print(\"This prints to the console when you Run Tests\")     return \"Hello, \" + name   Solução   def centuryFromYear(year):     # Division remainder     if year%100 &gt; 0:         # Division without remainder         return (year // 100) + 1     else:         return year // 100    centuryFromYear(1905)   20   centuryFromYear(1700)   17  ","categories": ["Programacao"],
        "tags": ["Python"],
        "url": "/programacao/code-signal-arcade-2/",
        "teaser": "/assets/images/covers/codesignal.png"
      },{
        "title": "Diário de bordo #1: Adventure Land, Apredendo JavaScript",
        "excerpt":"   Diário de bordo. Data estelar, 2021-04-18.    Quantos cursos, tutoriais e artigos ensinando algo existem hoje em dia? Quantos desses fazem parte da aba de favoritos do nosso navegador mas nunca revisitamos?   As vezes pode ficar difícil selecionar conteúdos de qualidade ou até mesmo criar um vinculo de compromisso com aquele tutorial de aplicação C.R.U.D (Create, Read, Update, Delete)que você já fez em python diversas vezes e agora chegou a hora de fazer em outra linguagem para criar afinidade com ela, JavaScript.   Que tal fazer isso de uma maneira divertida, sim o que a gente não faz para ficar mais forte em um jogo? Grande parte dos desenvolvedores de software foram e ainda são Gamers. Quer uma prova disso? Nessa época de Home Office, quantos dos integrantes do seu squad, guida não aparecem sentados em uma cadeira gamer nas video conferências? é meu amigo, isso não se trata só de ergonomia, mas é necessário para aqueles que continuam hjoras a fio sentados em frente ao computador após o expediente para vencer um torneio online de Valorant ou Dota 2.   Adventure Land, uma perola no alto mar da Steam   Atualmente eu Gabriel, não tenho mais paciencia para o Daily Grind dos MMOS (Massive Multiplayer Online Games), famoso Farmming.   Depois de conhecer docker, infraestrutura como código e etc, tento sempre criar configurações em código, tanto dos meus aplicativos quanto ambientes (Se você olhar meu GitHUb vai perceber que eu Dockerizo tudo que vejo pela frente). Então pensei, poderia eu configurar o meu char e fazer o seu Deploy no meu querido computador de bolso Raspberry Pi enquanto eu realizo as minhas outras tarefas diárias de uma forma permitida dentro do jogo?   Claro que isso já tem um nome conhecido que em muitos jogos não é permitido, mas eles são conhecidos Bots.   Em um belo dia ensolarado dentro do meu apartamento, consegui encontrar 3 jogos que incentivam programação:      Screeps   Twilio Quest   Adventure Land   Adventure Land foi o que mais me interessou pelo seu estilo RPG, joguei muito Lineage 2 quando mais novo. O jogo possui tanto a possibilidade de ser jogado no navegador quanto em seus clients via Steam Launcher.   Acessando o jogo você verá na tela um botão escrito CODE onde você pode escrever um script para programar o comportamento de seu personagem e deixar que ele jogue sozinho.      Diferente das funcionalidades de Auto play de diversos jogos mobile, neste você mesmo diz o que o seu personagem deve fazer, como e quando.   // Hey there! // This is CODE, lets you control your character with code. // If you don't know how to code, don't worry, It's easy. // Just set attack_mode to true and ENGAGE!  var attack_mode = false;  setInterval(function () {   use_hp_or_mp();   loot();    if (!attack_mode || character.rip || is_moving(character)) return;    var target = get_targeted_monster();   if (!target) {     target = get_nearest_monster({ min_xp: 100, max_att: 120 });     if (target) change_target(target);     else {       set_message(\"No Monsters\");       return;     }   }    if (!is_in_range(target)) {     move(       character.x + (target.x - character.x) / 2,       character.y + (target.y - character.y) / 2     );     // Walk half the distance   } else if (can_attack(target)) {     set_message(\"Attacking\");     attack(target);   } }, 1000 / 4); // Loops every 1/4 seconds.  // Learn Javascript: https://www.codecademy.com/learn/introduction-to-javascript // Write your own CODE: https://github.com/kaansoral/adventureland // NOTE: If the tab isn't focused, browsers slow down the game // NOTE: Use the performance_trick() function as a workaround   O que tenho aprendido      Conceitos básicos de JavaScript como classes e promises, dependências, configurações de ambiente;   Sockets, comumente utilizadas para comunicação em tempo real como em chats de atendimento ao cliente utilizados em diversos sites.   Web Crawling, automatização de browser com Playwright da microsoft, bem parecido com Selenium.   NPM, é o gerenciador de pacotes para a linguagem JavaScript.   Por exemplo, para inserir os logs padronizados no meu script de automação, fui ao site do serviço DataDog, que utilizo em meu dia a dia de trabalho, para verificar a biblioteca mais indicada (winston).   Então é completamente possível aprender muita coisa útil, jogando os jogos certos.   Fora isso a comunidade do jogo presente do Discord é muito ativa, então é possível trocar vários snipets de código e tirar a suas dúvidas com os demais jogadores!      Meu link de recrutamento   Meu repositório de scripts e guias no GitHub  ","categories": ["Programacao"],
        "tags": ["JavaScript"],
        "url": "/programacao/adventure-land-aprendendo-javascript/",
        "teaser": "/assets/images/covers/adventure-land.jpg"
      },{
        "title": "Github - Listagem de todos emojis",
        "excerpt":"Apenas uma lista para facilitar a vida! Estes Emojis podem ser usados tanto no GitHub quanto no framework Jekyll para sites estáticos.   Lista de Emojis   Pessoas                  :bowtie: :bowtie:       :smile: :smile:       :laughing: :laughing:                       :blush: :blush:       :smiley: :smiley:       :relaxed: :relaxed:                 :smirk: :smirk:       :heart_eyes: :heart_eyes:       :kissing_heart: :kissing_heart:                 :kissing_closed_eyes: :kissing_closed_eyes:       :flushed: :flushed:       :relieved: :relieved:                 :satisfied: :satisfied:       :grin: :grin:       :wink: :wink:                 :stuck_out_tongue_winking_eye: :stuck_out_tongue_winking_eye:       :stuck_out_tongue_closed_eyes: :stuck_out_tongue_closed_eyes:       :grinning: :grinning:                 :kissing: :kissing:       :kissing_smiling_eyes: :kissing_smiling_eyes:       :stuck_out_tongue: :stuck_out_tongue:                 :sleeping: :sleeping:       :worried: :worried:       :frowning: :frowning:                 :anguished: :anguished:       :open_mouth: :open_mouth:       :grimacing: :grimacing:                 :confused: :confused:       :hushed: :hushed:       :expressionless: :expressionless:                 :unamused: :unamused:       :sweat_smile: :sweat_smile:       :sweat: :sweat:                 :disappointed_relieved: :disappointed_relieved:       :weary: :weary:       :pensive: :pensive:                 :disappointed: :disappointed:       :confounded: :confounded:       :fearful: :fearful:                 :cold_sweat: :cold_sweat:       :persevere: :persevere:       :cry: :cry:                 :sob: :sob:       :joy: :joy:       :astonished: :astonished:                 :scream: :scream:       :neckbeard: :neckbeard:       :tired_face: :tired_face:                 :angry: :angry:       :rage: :rage:       :triumph: :triumph:                 :sleepy: :sleepy:       :yum: :yum:       :mask: :mask:                 :sunglasses: :sunglasses:       :dizzy_face: :dizzy_face:       :imp: :imp:                 :smiling_imp: :smiling_imp:       :neutral_face: :neutral_face:       :no_mouth: :no_mouth:                 :innocent: :innocent:       :alien: :alien:       :yellow_heart: :yellow_heart:                 :blue_heart: :blue_heart:       :purple_heart: :purple_heart:       :heart: :heart:                 :green_heart: :green_heart:       :broken_heart: :broken_heart:       :heartbeat: :heartbeat:                 :heartpulse: :heartpulse:       :two_hearts: :two_hearts:       :revolving_hearts: :revolving_hearts:                 :cupid: :cupid:       :sparkling_heart: :sparkling_heart:       :sparkles: :sparkles:                 :star: :star:       :star2: :star2:       :dizzy: :dizzy:                 :boom: :boom:       :collision: :collision:       :anger: :anger:                 :exclamation: :exclamation:       :question: :question:       :grey_exclamation: :grey_exclamation:                 :grey_question: :grey_question:       :zzz: :zzz:       :dash: :dash:                 :sweat_drops: :sweat_drops:       :notes: :notes:       :musical_note: :musical_note:                 :fire: :fire:       :hankey: :hankey:       :poop: :poop:                 :shit: :shit:       :+1: :+1:       :thumbsup: :thumbsup:                 :-1: :-1:       :thumbsdown: :thumbsdown:       :ok_hand: :ok_hand:                 :punch: :punch:       :facepunch: :facepunch:       :fist: :fist:                 :v: :v:       :wave: :wave:       :hand: :hand:                 :raised_hand: :raised_hand:       :open_hands: :open_hands:       :point_up: :point_up:                 :point_down: :point_down:       :point_left: :point_left:       :point_right: :point_right:                 :raised_hands: :raised_hands:       :pray: :pray:       :point_up_2: :point_up_2:                 :clap: :clap:       :muscle: :muscle:       :metal: :metal:                 :fu: :fu:       :walking: :walking:       :runner: :runner:                 :running: :running:       :couple: :couple:       :family: :family:                 :two_men_holding_hands: :two_men_holding_hands:       :two_women_holding_hands: :two_women_holding_hands:       :dancer: :dancer:                 :dancers: :dancers:       :ok_woman: :ok_woman:       :no_good: :no_good:                 :information_desk_person: :information_desk_person:       :raising_hand: :raising_hand:       :bride_with_veil: :bride_with_veil:                 :person_with_pouting_face: :person_with_pouting_face:       :person_frowning: :person_frowning:       :bow: :bow:                 :couplekiss: :couplekiss:       :couple_with_heart: :couple_with_heart:       :massage: :massage:                 :haircut: :haircut:       :nail_care: :nail_care:       :boy: :boy:                 :girl: :girl:       :woman: :woman:       :man: :man:                 :baby: :baby:       :older_woman: :older_woman:       :older_man: :older_man:                 :person_with_blond_hair: :person_with_blond_hair:       :man_with_gua_pi_mao: :man_with_gua_pi_mao:       :man_with_turban: :man_with_turban:                 :construction_worker: :construction_worker:       :cop: :cop:       :angel: :angel:                 :princess: :princess:       :smiley_cat: :smiley_cat:       :smile_cat: :smile_cat:                 :heart_eyes_cat: :heart_eyes_cat:       :kissing_cat: :kissing_cat:       :smirk_cat: :smirk_cat:                 :scream_cat: :scream_cat:       :crying_cat_face: :crying_cat_face:       :joy_cat: :joy_cat:                 :pouting_cat: :pouting_cat:       :japanese_ogre: :japanese_ogre:       :japanese_goblin: :japanese_goblin:                 :see_no_evil: :see_no_evil:       :hear_no_evil: :hear_no_evil:       :speak_no_evil: :speak_no_evil:                 :guardsman: :guardsman:       :skull: :skull:       :feet: :feet:                 :lips: :lips:       :kiss: :kiss:       :droplet: :droplet:                 :ear: :ear:       :eyes: :eyes:       :nose: :nose:                 :tongue: :tongue:       :love_letter: :love_letter:       :bust_in_silhouette: :bust_in_silhouette:                 :busts_in_silhouette: :busts_in_silhouette:       :speech_balloon: :speech_balloon:       :thought_balloon: :thought_balloon:                 :feelsgood: :feelsgood:       :finnadie: :finnadie:       :goberserk: :goberserk:                 :godmode: :godmode:       :hurtrealbad: :hurtrealbad:       :rage1: :rage1:                 :rage2: :rage2:       :rage3: :rage3:       :rage4: :rage4:                 :suspect: :suspect:       :trollface: :trollface:                   Natureza                  :sunny: :sunny:       :umbrella: :umbrella:       :cloud: :cloud:                       :snowflake: :snowflake:       :snowman: :snowman:       :zap: :zap:                 :cyclone: :cyclone:       :foggy: :foggy:       :ocean: :ocean:                 :cat: :cat:       :dog: :dog:       :mouse: :mouse:                 :hamster: :hamster:       :rabbit: :rabbit:       :wolf: :wolf:                 :frog: :frog:       :tiger: :tiger:       :koala: :koala:                 :bear: :bear:       :pig: :pig:       :pig_nose: :pig_nose:                 :cow: :cow:       :boar: :boar:       :monkey_face: :monkey_face:                 :monkey: :monkey:       :horse: :horse:       :racehorse: :racehorse:                 :camel: :camel:       :sheep: :sheep:       :elephant: :elephant:                 :panda_face: :panda_face:       :snake: :snake:       :bird: :bird:                 :baby_chick: :baby_chick:       :hatched_chick: :hatched_chick:       :hatching_chick: :hatching_chick:                 :chicken: :chicken:       :penguin: :penguin:       :turtle: :turtle:                 :bug: :bug:       :honeybee: :honeybee:       :ant: :ant:                 :beetle: :beetle:       :snail: :snail:       :octopus: :octopus:                 :tropical_fish: :tropical_fish:       :fish: :fish:       :whale: :whale:                 :whale2: :whale2:       :dolphin: :dolphin:       :cow2: :cow2:                 :ram: :ram:       :rat: :rat:       :water_buffalo: :water_buffalo:                 :tiger2: :tiger2:       :rabbit2: :rabbit2:       :dragon: :dragon:                 :goat: :goat:       :rooster: :rooster:       :dog2: :dog2:                 :pig2: :pig2:       :mouse2: :mouse2:       :ox: :ox:                 :dragon_face: :dragon_face:       :blowfish: :blowfish:       :crocodile: :crocodile:                 :dromedary_camel: :dromedary_camel:       :leopard: :leopard:       :cat2: :cat2:                 :poodle: :poodle:       :paw_prints: :paw_prints:       :bouquet: :bouquet:                 :cherry_blossom: :cherry_blossom:       :tulip: :tulip:       :four_leaf_clover: :four_leaf_clover:                 :rose: :rose:       :sunflower: :sunflower:       :hibiscus: :hibiscus:                 :maple_leaf: :maple_leaf:       :leaves: :leaves:       :fallen_leaf: :fallen_leaf:                 :herb: :herb:       :mushroom: :mushroom:       :cactus: :cactus:                 :palm_tree: :palm_tree:       :evergreen_tree: :evergreen_tree:       :deciduous_tree: :deciduous_tree:                 :chestnut: :chestnut:       :seedling: :seedling:       :blossom: :blossom:                 :ear_of_rice: :ear_of_rice:       :shell: :shell:       :globe_with_meridians: :globe_with_meridians:                 :sun_with_face: :sun_with_face:       :full_moon_with_face: :full_moon_with_face:       :new_moon_with_face: :new_moon_with_face:                 :new_moon: :new_moon:       :waxing_crescent_moon: :waxing_crescent_moon:       :first_quarter_moon: :first_quarter_moon:                 :waxing_gibbous_moon: :waxing_gibbous_moon:       :full_moon: :full_moon:       :waning_gibbous_moon: :waning_gibbous_moon:                 :last_quarter_moon: :last_quarter_moon:       :waning_crescent_moon: :waning_crescent_moon:       :last_quarter_moon_with_face: :last_quarter_moon_with_face:                 :first_quarter_moon_with_face: :first_quarter_moon_with_face:       :moon: :moon:       :earth_africa: :earth_africa:                 :earth_americas: :earth_americas:       :earth_asia: :earth_asia:       :volcano: :volcano:                 :milky_way: :milky_way:       :partly_sunny: :partly_sunny:       :octocat: :octocat:                 :squirrel: :squirrel:                           Objetos                  :bamboo: :bamboo:       :gift_heart: :gift_heart:       :dolls: :dolls:                       :school_satchel: :school_satchel:       :mortar_board: :mortar_board:       :flags: :flags:                 :fireworks: :fireworks:       :sparkler: :sparkler:       :wind_chime: :wind_chime:                 :rice_scene: :rice_scene:       :jack_o_lantern: :jack_o_lantern:       :ghost: :ghost:                 :santa: :santa:       :christmas_tree: :christmas_tree:       :gift: :gift:                 :bell: :bell:       :no_bell: :no_bell:       :tanabata_tree: :tanabata_tree:                 :tada: :tada:       :confetti_ball: :confetti_ball:       :balloon: :balloon:                 :crystal_ball: :crystal_ball:       :cd: :cd:       :dvd: :dvd:                 :floppy_disk: :floppy_disk:       :camera: :camera:       :video_camera: :video_camera:                 :movie_camera: :movie_camera:       :computer: :computer:       :tv: :tv:                 :iphone: :iphone:       :phone: :phone:       :telephone: :telephone:                 :telephone_receiver: :telephone_receiver:       :pager: :pager:       :fax: :fax:                 :minidisc: :minidisc:       :vhs: :vhs:       :sound: :sound:                 :speaker: :speaker:       :mute: :mute:       :loudspeaker: :loudspeaker:                 :mega: :mega:       :hourglass: :hourglass:       :hourglass_flowing_sand: :hourglass_flowing_sand:                 :alarm_clock: :alarm_clock:       :watch: :watch:       :radio: :radio:                 :satellite: :satellite:       :loop: :loop:       :mag: :mag:                 :mag_right: :mag_right:       :unlock: :unlock:       :lock: :lock:                 :lock_with_ink_pen: :lock_with_ink_pen:       :closed_lock_with_key: :closed_lock_with_key:       :key: :key:                 :bulb: :bulb:       :flashlight: :flashlight:       :high_brightness: :high_brightness:                 :low_brightness: :low_brightness:       :electric_plug: :electric_plug:       :battery: :battery:                 :calling: :calling:       :email: :email:       :mailbox: :mailbox:                 :postbox: :postbox:       :bath: :bath:       :bathtub: :bathtub:                 :shower: :shower:       :toilet: :toilet:       :wrench: :wrench:                 :nut_and_bolt: :nut_and_bolt:       :hammer: :hammer:       :seat: :seat:                 :moneybag: :moneybag:       :yen: :yen:       :dollar: :dollar:                 :pound: :pound:       :euro: :euro:       :credit_card: :credit_card:                 :money_with_wings: :money_with_wings:       :e-mail: :e-mail:       :inbox_tray: :inbox_tray:                 :outbox_tray: :outbox_tray:       :envelope: :envelope:       :incoming_envelope: :incoming_envelope:                 :postal_horn: :postal_horn:       :mailbox_closed: :mailbox_closed:       :mailbox_with_mail: :mailbox_with_mail:                 :mailbox_with_no_mail: :mailbox_with_no_mail:       :door: :door:       :smoking: :smoking:                 :bomb: :bomb:       :gun: :gun:       :hocho: :hocho:                 :pill: :pill:       :syringe: :syringe:       :page_facing_up: :page_facing_up:                 :page_with_curl: :page_with_curl:       :bookmark_tabs: :bookmark_tabs:       :bar_chart: :bar_chart:                 :chart_with_upwards_trend: :chart_with_upwards_trend:       :chart_with_downwards_trend: :chart_with_downwards_trend:       :scroll: :scroll:                 :clipboard: :clipboard:       :calendar: :calendar:       :date: :date:                 :card_index: :card_index:       :file_folder: :file_folder:       :open_file_folder: :open_file_folder:                 :scissors: :scissors:       :pushpin: :pushpin:       :paperclip: :paperclip:                 :black_nib: :black_nib:       :pencil2: :pencil2:       :straight_ruler: :straight_ruler:                 :triangular_ruler: :triangular_ruler:       :closed_book: :closed_book:       :green_book: :green_book:                 :blue_book: :blue_book:       :orange_book: :orange_book:       :notebook: :notebook:                 :notebook_with_decorative_cover: :notebook_with_decorative_cover:       :ledger: :ledger:       :books: :books:                 :bookmark: :bookmark:       :name_badge: :name_badge:       :microscope: :microscope:                 :telescope: :telescope:       :newspaper: :newspaper:       :football: :football:                 :basketball: :basketball:       :soccer: :soccer:       :baseball: :baseball:                 :tennis: :tennis:       :8ball: :8ball:       :rugby_football: :rugby_football:                 :bowling: :bowling:       :golf: :golf:       :mountain_bicyclist: :mountain_bicyclist:                 :bicyclist: :bicyclist:       :horse_racing: :horse_racing:       :snowboarder: :snowboarder:                 :swimmer: :swimmer:       :surfer: :surfer:       :ski: :ski:                 :spades: :spades:       :hearts: :hearts:       :clubs: :clubs:                 :diamonds: :diamonds:       :gem: :gem:       :ring: :ring:                 :trophy: :trophy:       :musical_score: :musical_score:       :musical_keyboard: :musical_keyboard:                 :violin: :violin:       :space_invader: :space_invader:       :video_game: :video_game:                 :black_joker: :black_joker:       :flower_playing_cards: :flower_playing_cards:       :game_die: :game_die:                 :dart: :dart:       :mahjong: :mahjong:       :clapper: :clapper:                 :memo: :memo:       :pencil: :pencil:       :book: :book:                 :art: :art:       :microphone: :microphone:       :headphones: :headphones:                 :trumpet: :trumpet:       :saxophone: :saxophone:       :guitar: :guitar:                 :shoe: :shoe:       :sandal: :sandal:       :high_heel: :high_heel:                 :lipstick: :lipstick:       :boot: :boot:       :shirt: :shirt:                 :tshirt: :tshirt:       :necktie: :necktie:       :womans_clothes: :womans_clothes:                 :dress: :dress:       :running_shirt_with_sash: :running_shirt_with_sash:       :jeans: :jeans:                 :kimono: :kimono:       :bikini: :bikini:       :ribbon: :ribbon:                 :tophat: :tophat:       :crown: :crown:       :womans_hat: :womans_hat:                 :mans_shoe: :mans_shoe:       :closed_umbrella: :closed_umbrella:       :briefcase: :briefcase:                 :handbag: :handbag:       :pouch: :pouch:       :purse: :purse:                 :eyeglasses: :eyeglasses:       :fishing_pole_and_fish: :fishing_pole_and_fish:       :coffee: :coffee:                 :tea: :tea:       :sake: :sake:       :baby_bottle: :baby_bottle:                 :beer: :beer:       :beers: :beers:       :cocktail: :cocktail:                 :tropical_drink: :tropical_drink:       :wine_glass: :wine_glass:       :fork_and_knife: :fork_and_knife:                 :pizza: :pizza:       :hamburger: :hamburger:       :fries: :fries:                 :poultry_leg: :poultry_leg:       :meat_on_bone: :meat_on_bone:       :spaghetti: :spaghetti:                 :curry: :curry:       :fried_shrimp: :fried_shrimp:       :bento: :bento:                 :sushi: :sushi:       :fish_cake: :fish_cake:       :rice_ball: :rice_ball:                 :rice_cracker: :rice_cracker:       :rice: :rice:       :ramen: :ramen:                 :stew: :stew:       :oden: :oden:       :dango: :dango:                 :egg: :egg:       :bread: :bread:       :doughnut: :doughnut:                 :custard: :custard:       :icecream: :icecream:       :ice_cream: :ice_cream:                 :shaved_ice: :shaved_ice:       :birthday: :birthday:       :cake: :cake:                 :cookie: :cookie:       :chocolate_bar: :chocolate_bar:       :candy: :candy:                 :lollipop: :lollipop:       :honey_pot: :honey_pot:       :apple: :apple:                 :green_apple: :green_apple:       :tangerine: :tangerine:       :lemon: :lemon:                 :cherries: :cherries:       :grapes: :grapes:       :watermelon: :watermelon:                 :strawberry: :strawberry:       :peach: :peach:       :melon: :melon:                 :banana: :banana:       :pear: :pear:       :pineapple: :pineapple:                 :sweet_potato: :sweet_potato:       :eggplant: :eggplant:       :tomato: :tomato:                 :corn: :corn:                           Lugares                  :house: :house:       :house_with_garden: :house_with_garden:       :school: :school:                       :office: :office:       :post_office: :post_office:       :hospital: :hospital:                 :bank: :bank:       :convenience_store: :convenience_store:       :love_hotel: :love_hotel:                 :hotel: :hotel:       :wedding: :wedding:       :church: :church:                 :department_store: :department_store:       :european_post_office: :european_post_office:       :city_sunrise: :city_sunrise:                 :city_sunset: :city_sunset:       :japanese_castle: :japanese_castle:       :european_castle: :european_castle:                 :tent: :tent:       :factory: :factory:       :tokyo_tower: :tokyo_tower:                 :japan: :japan:       :mount_fuji: :mount_fuji:       :sunrise_over_mountains: :sunrise_over_mountains:                 :sunrise: :sunrise:       :stars: :stars:       :statue_of_liberty: :statue_of_liberty:                 :bridge_at_night: :bridge_at_night:       :carousel_horse: :carousel_horse:       :rainbow: :rainbow:                 :ferris_wheel: :ferris_wheel:       :fountain: :fountain:       :roller_coaster: :roller_coaster:                 :ship: :ship:       :speedboat: :speedboat:       :boat: :boat:                 :sailboat: :sailboat:       :rowboat: :rowboat:       :anchor: :anchor:                 :rocket: :rocket:       :airplane: :airplane:       :helicopter: :helicopter:                 :steam_locomotive: :steam_locomotive:       :tram: :tram:       :mountain_railway: :mountain_railway:                 :bike: :bike:       :aerial_tramway: :aerial_tramway:       :suspension_railway: :suspension_railway:                 :mountain_cableway: :mountain_cableway:       :tractor: :tractor:       :blue_car: :blue_car:                 :oncoming_automobile: :oncoming_automobile:       :car: :car:       :red_car: :red_car:                 :taxi: :taxi:       :oncoming_taxi: :oncoming_taxi:       :articulated_lorry: :articulated_lorry:                 :bus: :bus:       :oncoming_bus: :oncoming_bus:       :rotating_light: :rotating_light:                 :police_car: :police_car:       :oncoming_police_car: :oncoming_police_car:       :fire_engine: :fire_engine:                 :ambulance: :ambulance:       :minibus: :minibus:       :truck: :truck:                 :train: :train:       :station: :station:       :train2: :train2:                 :bullettrain_front: :bullettrain_front:       :bullettrain_side: :bullettrain_side:       :light_rail: :light_rail:                 :monorail: :monorail:       :railway_car: :railway_car:       :trolleybus: :trolleybus:                 :ticket: :ticket:       :fuelpump: :fuelpump:       :vertical_traffic_light: :vertical_traffic_light:                 :traffic_light: :traffic_light:       :warning: :warning:       :construction: :construction:                 :beginner: :beginner:       :atm: :atm:       :slot_machine: :slot_machine:                 :busstop: :busstop:       :barber: :barber:       :hotsprings: :hotsprings:                 :checkered_flag: :checkered_flag:       :crossed_flags: :crossed_flags:       :izakaya_lantern: :izakaya_lantern:                 :moyai: :moyai:       :circus_tent: :circus_tent:       :performing_arts: :performing_arts:                 :round_pushpin: :round_pushpin:       :triangular_flag_on_post: :triangular_flag_on_post:       :jp: :jp:                 :kr: :kr:       :cn: :cn:       :us: :us:                 :fr: :fr:       :es: :es:       :it: :it:                 :ru: :ru:       :gb: :gb:       :uk: :uk:                 :de: :de:                           Símbolos                  :one: :one:       :two: :two:       :three: :three:                       :four: :four:       :five: :five:       :six: :six:                 :seven: :seven:       :eight: :eight:       :nine: :nine:                 :keycap_ten: :keycap_ten:       :1234: :1234:       :zero: :zero:                 :hash: :hash:       :symbols: :symbols:       :arrow_backward: :arrow_backward:                 :arrow_down: :arrow_down:       :arrow_forward: :arrow_forward:       :arrow_left: :arrow_left:                 :capital_abcd: :capital_abcd:       :abcd: :abcd:       :abc: :abc:                 :arrow_lower_left: :arrow_lower_left:       :arrow_lower_right: :arrow_lower_right:       :arrow_right: :arrow_right:                 :arrow_up: :arrow_up:       :arrow_upper_left: :arrow_upper_left:       :arrow_upper_right: :arrow_upper_right:                 :arrow_double_down: :arrow_double_down:       :arrow_double_up: :arrow_double_up:       :arrow_down_small: :arrow_down_small:                 :arrow_heading_down: :arrow_heading_down:       :arrow_heading_up: :arrow_heading_up:       :leftwards_arrow_with_hook: :leftwards_arrow_with_hook:                 :arrow_right_hook: :arrow_right_hook:       :left_right_arrow: :left_right_arrow:       :arrow_up_down: :arrow_up_down:                 :arrow_up_small: :arrow_up_small:       :arrows_clockwise: :arrows_clockwise:       :arrows_counterclockwise: :arrows_counterclockwise:                 :rewind: :rewind:       :fast_forward: :fast_forward:       :information_source: :information_source:                 :ok: :ok:       :twisted_rightwards_arrows: :twisted_rightwards_arrows:       :repeat: :repeat:                 :repeat_one: :repeat_one:       :new: :new:       :top: :top:                 :up: :up:       :cool: :cool:       :free: :free:                 :ng: :ng:       :cinema: :cinema:       :koko: :koko:                 :signal_strength: :signal_strength:       :u5272: :u5272:       :u5408: :u5408:                 :u55b6: :u55b6:       :u6307: :u6307:       :u6708: :u6708:                 :u6709: :u6709:       :u6e80: :u6e80:       :u7121: :u7121:                 :u7533: :u7533:       :u7a7a: :u7a7a:       :u7981: :u7981:                 :sa: :sa:       :restroom: :restroom:       :mens: :mens:                 :womens: :womens:       :baby_symbol: :baby_symbol:       :no_smoking: :no_smoking:                 :parking: :parking:       :wheelchair: :wheelchair:       :metro: :metro:                 :baggage_claim: :baggage_claim:       :accept: :accept:       :wc: :wc:                 :potable_water: :potable_water:       :put_litter_in_its_place: :put_litter_in_its_place:       :secret: :secret:                 :congratulations: :congratulations:       :m: :m:       :passport_control: :passport_control:                 :left_luggage: :left_luggage:       :customs: :customs:       :ideograph_advantage: :ideograph_advantage:                 :cl: :cl:       :sos: :sos:       :id: :id:                 :no_entry_sign: :no_entry_sign:       :underage: :underage:       :no_mobile_phones: :no_mobile_phones:                 :do_not_litter: :do_not_litter:       :non-potable_water: :non-potable_water:       :no_bicycles: :no_bicycles:                 :no_pedestrians: :no_pedestrians:       :children_crossing: :children_crossing:       :no_entry: :no_entry:                 :eight_spoked_asterisk: :eight_spoked_asterisk:       :eight_pointed_black_star: :eight_pointed_black_star:       :heart_decoration: :heart_decoration:                 :vs: :vs:       :vibration_mode: :vibration_mode:       :mobile_phone_off: :mobile_phone_off:                 :chart: :chart:       :currency_exchange: :currency_exchange:       :aries: :aries:                 :taurus: :taurus:       :gemini: :gemini:       :cancer: :cancer:                 :leo: :leo:       :virgo: :virgo:       :libra: :libra:                 :scorpius: :scorpius:       :sagittarius: :sagittarius:       :capricorn: :capricorn:                 :aquarius: :aquarius:       :pisces: :pisces:       :ophiuchus: :ophiuchus:                 :six_pointed_star: :six_pointed_star:       :negative_squared_cross_mark: :negative_squared_cross_mark:       :a: :a:                 :b: :b:       :ab: :ab:       :o2: :o2:                 :diamond_shape_with_a_dot_inside: :diamond_shape_with_a_dot_inside:       :recycle: :recycle:       :end: :end:                 :on: :on:       :soon: :soon:       :clock1: :clock1:                 :clock130: :clock130:       :clock10: :clock10:       :clock1030: :clock1030:                 :clock11: :clock11:       :clock1130: :clock1130:       :clock12: :clock12:                 :clock1230: :clock1230:       :clock2: :clock2:       :clock230: :clock230:                 :clock3: :clock3:       :clock330: :clock330:       :clock4: :clock4:                 :clock430: :clock430:       :clock5: :clock5:       :clock530: :clock530:                 :clock6: :clock6:       :clock630: :clock630:       :clock7: :clock7:                 :clock730: :clock730:       :clock8: :clock8:       :clock830: :clock830:                 :clock9: :clock9:       :clock930: :clock930:       :heavy_dollar_sign: :heavy_dollar_sign:                 :copyright: :copyright:       :registered: :registered:       :tm: :tm:                 :x: :x:       :heavy_exclamation_mark: :heavy_exclamation_mark:       :bangbang: :bangbang:                 :interrobang: :interrobang:       :o: :o:       :heavy_multiplication_x: :heavy_multiplication_x:                 :heavy_plus_sign: :heavy_plus_sign:       :heavy_minus_sign: :heavy_minus_sign:       :heavy_division_sign: :heavy_division_sign:                 :white_flower: :white_flower:       :100: :100:       :heavy_check_mark: :heavy_check_mark:                 :ballot_box_with_check: :ballot_box_with_check:       :radio_button: :radio_button:       :link: :link:                 :curly_loop: :curly_loop:       :wavy_dash: :wavy_dash:       :part_alternation_mark: :part_alternation_mark:                 :trident: :trident:       :black_square: :black_square:       :white_square: :white_square:                 :white_check_mark: :white_check_mark:       :black_square_button: :black_square_button:       :white_square_button: :white_square_button:                 :black_circle: :black_circle:       :white_circle: :white_circle:       :red_circle: :red_circle:                 :large_blue_circle: :large_blue_circle:       :large_blue_diamond: :large_blue_diamond:       :large_orange_diamond: :large_orange_diamond:                 :small_blue_diamond: :small_blue_diamond:       :small_orange_diamond: :small_orange_diamond:       :small_red_triangle: :small_red_triangle:                 :small_red_triangle_down: :small_red_triangle_down:       :shipit: :shipit:                   Referência      rxaviers gist  ","categories": ["GitHub"],
        "tags": ["GitHub","Emoji"],
        "url": "/github/github-emojis/",
        "teaser": "/assets/images/covers/emojis-github.png"
      },{
        "title": "Quem é UX?",
        "excerpt":"Se o seu usuário está feliz, você está feliz!. A experiência do usuário é muito importante para redução de custos, e uma boa aceitação do produto.   A experiência do usuário não depende apenas da usabilidade, mas de como o usuário se sente quando esta usando seu produto, das ferramentas oferecidas e promoções.   Do que se trata a famosa UX?      “User Experience é tudo! É a forma com que você sente o mundo, é a forma como você experiencia a sua vida, é a forma como você experiencia um serviço, um aplicativo, um sistema de computador. Mas é um sistema. É tudo!” Don Norman.    O termo User Experience doi criado pelo Don Norman, que foi Vice-Presidente do grupo avançado de tecnologia da Apple.   Características da UX      Aprendizagem: O usuário deve ser capaz de cumprir tarefas simples assim que ele esta diante de seu produto.   Eficiência: Uma vez que o usuário tem conhecimento de como usar o seu produto, ele tem que fazer isso com agilidade.   Memorabilidade: Se o usuário já utilizou o seu produto anteriormente, ele deve lembrar e como fazer isto novamente.   Prevenção de erros: Uma boa usabilidade deve guiar o usuário, de forma a reduzir possíveis erros de utilização.   Garantir a satisfação do usuário: Se o seu usuário cumprir o seu objetivo, e de maneira simples ele voltará a utilizar o seu produto.   Menos é mais, as vezes muitas funciionalidades podem complicar a vida do usuário.   Como construir uma boa experiência para os usuários de seu produto?      Vamos nos colocar no lugar do outro, e entender o que o cliente e não eu desenvolvedor gostaria de ter no produto. Estude o consumidor. Quem é? O que faz? Onde habita?   Não precisa inventar moda, menos é mais! Tente simplificar ao invés de complicar a vida do usuário.   Faça testes para saber se funciona!   As 10 heurísticas de Nielsin   Jakob Nielsen é o pai da usabilidade.      Mantenha o usuário informado de onde ele está, o que está acontecendo e para onde ele vai.   Se mantenha próximo da realidade do usuário, principalmente na comunicação.   Guie o usuário sem restringi-lo (conforme as regras de negócio).   Mantenha consistência, padrões e previsibilidade para facilitar o entendimento das coisas.   Entenda como seu usuário pode errar, para evita que isso aconteça.   Deixe visíveis os caminhos percorridos para acessar as funcionalidades para facilitar a navegação.   Flexibilidade e eficiência de uso. Mais de uma forma para atingir o mesmo fim, agradando todos os gostos.   Mantenha o design simples e minimalista, apenas o necessário.   Ajude a reconhecer e consertar erros de maneira rápida e indolor. Mensagens simples com abstrações técnicas ajudam muito, obrigado.   Santa documentação Batman! Parece que ela nos segue onde quer que vamos. Ofereça toda informação necessária para o usuário usufruir do seu produto.   Arquitetura de informação   A arquitetura da informação organiza e categoriza todo conteúdo presente em seu produto.   Etapas para definição da arquitetura de informação           Inventário de conteúdo: Aqui é levantado e identificado todo conteúdo existente.            Auditoria de conteúdo: O conteúdo deve ser verificado para validar a sua utilidade.            Agrupamento de informações: O conteúdo deve ser agrupado por temas similares ou relacionados.            Taxonomia: Nomenclatura dada aos agrupamentos criados, que deve contemplar todo conteúdo do site.            Informações Descritivas: Definição de metadados úteis para gerar listas de conteúdo relacionado a outros componentes de navegação, que por sua vez, vão ajudar o usuário a encontrar o que está buscando.       Ferramentas úteis      Prototipação - Pencil Project   Artigos      The Ultimate Guide to Understating UX Roles   Manuais de design      Google   Apple  ","categories": ["UX"],
        "tags": ["UX","User","Experience","Usuario","Experiencia"],
        "url": "/ux/introducao-user-experience-ux/",
        "teaser": "/assets/images/covers/introducao-user-experience.jpg"
      },{
        "title": "Porque eu documentaria um diagrama de caso de uso?",
        "excerpt":"   Uma imagem vale mais que mil palavras.    Mas quando enfrentamos a necessidade de um detalhamento mais aprofundado sobre um tema, as vezes mil palavras, ou uma imagem não são suficientes.   Mas porque eu documentaria um diagrama?   As especificações dos casos de uso auxiliam na demonstração de como o sistema se comportará de fato mediante ao uso, o que complementa a visualização criada pelo diagrama.   Exemplos do que podemos documentar:      Atores e sua participação   Fluxos principais e alternativos   A documentação não substitui o diagrama de casos de uso, apenas explica através do texto o que não conseguimos descrever com imagens. Ela também auxiliará na validação de protótipos (telas que mostram interações entre os atores e sistema).   O que devo fazer antes de começar a escrever a documentação?           Enumerar todos os casos de uso, inserindo apenas as funcionalidades que serão de fato implementadas e suas prioridades;                                  Ator           Objetivo           Prioridade                                           Cliente           Consultar restaurantes           1                           Descreva possíveis erros que possam ocorrer antes de detalhar o que deve ser feito em cada cenário;   Descreva como o sistema deve reagir a cada falha de acordo com as regras de negócio;   Template de documentação   Não existe um padrão definido de documentação, contudo há campos muito comuns.   --- titulo: UC001 - Consulta de passagem aérea. &lt;!--  Identificador - Título do caso de uso (O mesmo utilizado no diagrama) --&gt; projeto: Sistema de viagens aéreas. &lt;!-- Nome do projeto -- &gt; ---  # Especificação de Caso de Uso  ---  ## Descrição  O cliente utiliza o sistema para consultar valores de passagens aéreas. &lt;!-- Breve descrição. --&gt;  ## Atores  &lt;!-- Listagem de atores. --&gt;  - Cliente (Primário) - Sistema (Secundário)  ## Pré-Condição  O usuário deve estar autenticado no sistema. &lt;!-- Cenário que nos levou a condição atual (Outro caso de uso que antecede este) --&gt;  ## Regras de negócio envolvidas em cada cenário  - **RN01** - Um cliente pode realizar apenas um cadastro por e-mail; - **RN02** - O usuário consegue acessar a sua conta apenas após confirmar o recebimento do e-mail.  _Cenário: Descrição clara e objetiva do contexto de existência de um caso de uso._  ## Fluxos  Descrição dos fluxos.  ### Principal:  Fluxo sem interrupções ou exceções, mais conhecido como _caminho feliz_.  _Apresenta relacionamentos do tipo **include**_  |                  Ator                  |                         Sistema                         | | :------------------------------------: | :-----------------------------------------------------: | | FP01 - Cliente insere destino de busca |                            -                            | |                   -                    |       FP02 - Receber destino de busca - **FE01**        | | FP03 - Cliente pressiona a tecla ENTER |                            -                            | |                   -                    | FP04 - Exibir a página \"Resultados da busca\" - **FA01** |  _FP: Fluxo Principal; FA: Fluxo Alternativo; FE: Fluxo de Exceção_  ### Alternativo  Traz uma ideia de uma regra de negócio que não conseguimos colocar no diagrama de casos de uso, onde o ator segue um caminho diferente do descrito no fluxo principal.  - **FA01** - Não há passagens disponíveis para a data informada, informar a indisponibilidade de datas, e exibir outros dias e horários.   a. Continuação do fluxo ...   b. Continuação do fluxo ...   c. Encerra caso de uso  ### Exceção  Fluxo que impede que o caso de uso seja concluído como falhas, inconsistência e erros inesperados.  _Apresenta relacionamentos do tipo **extend**_  - **FE01** - Destino desejado não é oferecido pela companhia.   a. Continuação do fluxo ...   b. Continuação do fluxo ...   c. Encerra caso de uso.  ## Pós-Condição  Algo que ocorre após a realização do caso de uso.  Ex: sair do sistema ou voltar ao menu principal.  ","categories": ["Documentacao"],
        "tags": ["Documentacao","Caso","Uso"],
        "url": "/documentacao/documentacao-de-casos-de-uso/",
        "teaser": "/assets/images/covers/documentacao-caso-uso.jpg"
      },{
        "title": "Estimando orçamentos e cálculando custos de projetos",
        "excerpt":"Estimar os custos de um projeto não é das tarefas mais fáceis, nem sempre tudo sai como planejado. E quando o projeto está de fato pronto, ou até mesmo quando já se foi meio caminho andado, você sabe dizer qual o valor agregado sobre o que foi entregue?   Neste cenário a matemática é simples, mas não torna o processo menos complexo, ou as previsões 100% exatas. Porém com algum planejamento é possível minimizar possíveis perdas, mantendo os gastos controlados, sem eventuais surpresas ou impactos negativos no budget.   Processos do gerenciamento de custos:      Planejar   Estimar   Determinar   Controlar   Trindade de variáveis do projeto:      Cronograma   Custos   Escopo   Essas variáveis são interdependentes, por exemplo, para reduzir custos é necessário reduzir o escopo e/ou aumentar o tempo destinado ao projeto.   Planejar      Grupos de entregas, relacionadas a contas de controle, geralmente imputadas no ERP da instituição.   Unidades de medidas (horas, reais, etc)   Faixa de variação, ou seja, qual é a variação (para cima ou para baixo) aceitável no orçamento?   Estimar                  Tipo       Descrição       Variação                       Análises de make or buy       Vale mais a pena fazer internamente ou comprar?       -                 Análises de rent or buy       Vale mais a pena fazer alugar ou comprar?       -                 Estimativa de Magnitude       Fase conceitual, informação pouco detalhada.       -25% a +75%                 Estimativa Análoga       Comparação com projetos similares já realizados no passados que já foram concluídos.       -10% a +25%                 Estimativa de Orçamentação       Realizada para fins de obtenção de financiamento do projeto.       -10% a +25%                 Estimativa Definitiva       Após todas atividades definidas, de cada atividade até a soma do todo (bottom up).       -5% a +10%           Solicitar um alto valor de orçamento e gastar apenas metade não é necessáriamente bom, devido ao custo de oportunidade onde a quantia poderia ter sido empregada em um investimento, empregado em outro projeto, ou então a quantia pode ter sido fruto de um empréstimo gerando altas taxas de juros.   Determinar      Reserva de contingência (tempo e custo);   Linha de base = custos das atividades + reserva de contingência;   Reserva gerencial (riscos desconhecidos);   Orçamento = Linha de base + reserva gerêncial.   Se todo capital estivesse alocado em uma só carteira, poderia ser gasto sem controle ou critério.   Controle      GVA (Gerênciamento de Valor Agregado).   Manter sob limites aceitáveis os excessos de custos que não foram previstos.   Manter partes interessadas informadas.   Impedir mudanças não aprovadas.   Análise de valor agregados   Medindo o desempenho do projeto em tempo e dinheiro.      PV (Planned Value): Valor planejado a ser gasto com o projeto até então.   RC (Real Cost): Valor gasto até o momento com o projeto.   EV (Earned Value): Quanto o trabalho realizado realmente rendeu.   Exemplo:      Um pintor tem como tarefa pintar um muro, e para esta atividade foram estimadas 16 horas de duração, dividida em dois dias úteis de 8 horas cadas. Se considerarmos uma remuneração de R$10,00 por hora, teremos um valor total planejado de R$160,00. Vamos imaginar que o pintor trabalhou não 8, mas 10 horas ao final do primeiro dia, e pintou apenas 40% do muro.       Valor planejado = 8 horas x R$10,00/h = R$80,00   Custo real = 10 horas x R$10,00/h = R$100,00   Valor agregado= 0.4 x 16 = 6,4 horas x 10 reais/h = 64 reais, ou seja, o trabalho rendeu apenas 64 reais neste primeiro dia, enquanto que o esperado era R$80,00 (8h x R$10,00).   Se o andamento permanecer constante a atividade irá custar mais caro, porque precisará de mais horas de atividade e atrasará, considerando que a mesma jornada de 8 horas de trabalho seja mantida.           CV (Cost Variance): Variação absoluta entre progresso realizado e custo incorrido, mede-se por CV = EV - RC. Se o CV der um valor negativo, o custo está acima do planejado, ou seja, os gastos estão acima do orçamento, em caso de valor positivo, o custo estará abaixo do esperado.            SV (Schedule variance): Variação absoluta entre o progresso realizado e progresso planejado, mede-se por SV = EV - PV. Se o SV apresentar valor negativo, a atividade está atrasada, caso contrário adiantada.       Variação de Custo:   CV = EV - RC  CV = 0,4 * R$160,00 - 10h * R$10,00 = -36    Conclusão: Estamos acima do orçamento.   Variação de Prazo   SV = EV - PV  SV = 0.4 * R$160,00 - 8h * R$10,00 = -16    Conclusão: Estamos atrasados.   Utilizando índices:      CPI (Cost Performance Index): Onde acima de 1 representa que estamos abaixo do custo, abaixo de um que estouramos o orçamento. Quanto mais próximo de 1 melhor. CPI = EV / RC   CPI = EV / RC  CPI = 0.4 * R$160,00 / 10h * R$10,00 = 0,64    Conclusão: Estamos acima do orçamento.      SPI (Schedule Performance Index): Se o índice está abaixo de 1, significa que a entrega está atrasada, acima que estamos adiantados e quanto mais próximo de 1 mais perto do prazo exato. SPI = EV / PV.   SPI = EV / PV  SPI = 0.4 * R$160,00 / 8h * R$10,00 = 0,8    Conclusão: Estamos atrasados.   Métricas   Return of Investment (ROI)   Dentre diversos projetos, qualificar se o investimento vale a pena ou não?   ROI = ((Receita - investimento)/Investimento) x 100   Desta maneira podemos comparar dois ou mais projetos para, a partir de uma receita esperada, sabermos qual trará maior retorno.   Net Promoter Score   É uma metodologia de pesquisa de satisfação dos clientes.      De 0 a 10, o quanto você indicaria nosso serviço para algum amigo ou familiar?    Podemos classificar os respondentes em:                  Categoria       Nota       Descrição                       Promotores       9 ou 10       São clientes que muito provavelmente indicarão o seu serviço.                 Neutros       7 ou 8       Clientes relativamente satisfeitos, mas podem ceder a concorrência.                 Detratores       0 a 6       Clientes insatisfeitos que podem danificar a imagem do produto ou serviço.           Para obter o NPS SCORE é necessário subtrair o percentual de Detratores do percentual de Promotores e dividir o resultado por 100   O quer seria um bom NPS?:                  Classificação       Nota                       Excelência       71 a 100                 Qualidade       31 a 70                 Aperfeiçoamento       1 a 30                 Crítico       -100 a 0           Também é possível solicitar justificativa para a nota dada pelo consumidor.   Churn   O churn é uma métrica que diz a porcentagem de clientes que deixaram de consumir o produto ou serviço. Sua formula é cálculada a partir de uma janela, ou seja, um período onde se obtém a relação de clientes que abandonaram o produto ou serviço naquele período sobre o total de clientes consumidores no início do período.   Taxa de Churn = Clientes que deixaram de consumir o produto/serviço no mês / Número total de consumidores no início do mês   Para reduzir a taxa de churn podemos considerar as seguintes ações:      Alinhamento de expectativas;   Entrega de valor;   Boas experiências;   Atenção aos feedbacks;   Correção rápida de eventuais erros ou problemas.   Ferramentas      MS Project  ","categories": ["Projetos"],
        "tags": ["Custo","Projeto"],
        "url": "/projetos/custos-orcamento-projetos/",
        "teaser": "/assets/images/covers/custos-orcamento-projeto.jpg"
      },{
        "title": "Explanando com Tableau: Porquê alguns países são mais felizes que outros?",
        "excerpt":"O Relatório de Felicidade Mundial é uma pesquisa histórica sobre o estado de felicidade global. O relatório continua a ganhar reconhecimento global à medida que governos, organizações e sociedade civil usam cada vez mais os indicadores de felicidade para informar suas decisões de formulação de políticas. Os principais especialistas em todos os campos - economia, psicologia, análise de pesquisas, estatísticas nacionais, saúde, políticas públicas e muito mais - descrevem como as medições de bem-estar podem ser usadas de forma eficaz para avaliar o progresso das nações. Os relatórios analisam o estado da felicidade no mundo hoje e mostram como a nova ciência da felicidade explica as variações pessoais e nacionais da felicidade.   Fonte de dados: Gallup World Poll                                                                                 ","categories": ["Tableau"],
        "tags": ["Tableau","Viz","Analytics","BI"],
        "url": "/tableau/tableau-porque-paises-mais-felizes-que-outros/",
        "teaser": "/assets/images/covers/2021-06-12-tableau-porque-paises-mais-felizes-que-outros.png"
      },{
        "title": "HTML, você usa todo dia, mas sabe o que é?",
        "excerpt":"A internet não é nada mais nada menos que um conjunto de redes de computadores interligados pelo mundo, que utilizam um mesmo conjunto de protocolos e serviços para se comunicarem.   Foi na decada de 1960, durante a guerra fria que surgiu a internet, desenvolvida pelos Estados unidos como uma forma de descentralizar as informações e criar uma rede redundante.   Assim caso os EUA sofressem um ataque da União Soviética, as informações não seriam perdidas e as comunicações entre os centros de informações não seriam abaladas.   Em meio a este cenário a ARPA, agência de projetos de pesquisa avançadas desenvolveu uma rede de comunicações A.K.A ARPANET, então nas décadas de 1970 e 1980, a internet também foi utilizada no meio acadêmico.   Foi apenas na década de 1990 que a internet foi disponibilizada a população como um todo, e ao fim desta década no físico Timothy John Berners-Lee desenvolveu a World Wide Web (www), a teia de alcance mundial, o que torna possível a utilização de uma interface gráfica na navegação web, criação de sites com a linguagem HTML e transferência de arquivos via protocolo HTTP.   O HTML Hyper Text Markup Language foi criado com o propósito de compartilhar pesquisas acadêmicas pela internet, e desde então começou a ser utilizado para os mais diversos fins.   Servidores   Para que seja possível acessar uma página web é necessário que ela esteja hospedada em um servidor, o servidor é um computador de alta capacidade de processamento e armazenamento que estão conectados a internet servindo arquivos como o HTML.   Para acessar um site é necessário utilizar um software chamado Navegador ou Browser e digitar a URL (Universal Resource location) do site, desta forma o navegador envia uma mensagem ao servidor em que está localizada a pagina e processa a resposta de retorno do servidor, exibindo um site ao usuário.   E como é possível acessar informações distantes, como por exemplo em um outro país ou continente? O acesso é feito por meio dos Backbones, as autoestradas da internet!   Um backbone é um conjunto de computadores conectados por linhas de grande largura de banda, como canais de fibra óptica, elos de satélite ou transmissão de rádio. Backbones de diferentes continentes estão conectados por cabos submarinos.   A comunicação entre as redes é realizada via protocolo TCP/IP, onde cada equipamento conectado à rede deve possuir um endereço único capaz de identifica-lo (IP).   Quando um site é acessado através de um browser, geralmente o que é digitado não é um IP, mas uma URL, que é traduzida para um IP com ajuda do serviço DNS (Domain Name Service).   Estruturas de arquivo HTML   Estrutura base HTML 5   &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt;  &lt;head&gt;   &lt;meta charset=\"UTF-8\"&gt;   &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;   &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;   &lt;!-- Refresh te page every 5 minutes --&gt;   &lt;meta http-equiv=\"Refresh\" content=\"300\"&gt;   &lt;meta name=\"keywords\" content=\"html, snippets, web\"&gt;   &lt;meta name=\"description\" content=\"html - snippets\"&gt;   &lt;meta name=\"author\" content=\"Gabriel\"&gt;   &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt;  &lt;body&gt;   &lt;header&gt;     &lt;h1&gt;Main title&lt;/h1&gt;   &lt;/header&gt;   &lt;main&gt;     &lt;!-- Main page content --&gt;     &lt;article&gt;       &lt;section&gt;         &lt;h2&gt;Sub Title&lt;/h2&gt;         &lt;p&gt;paragraph&lt;/p&gt;       &lt;/section&gt;     &lt;/article&gt;   &lt;/main&gt; &lt;/body&gt; &lt;footer&gt;   &lt;!-- Footer content --&gt; &lt;/footer&gt;  &lt;/html&gt;   Access key   Este atributo possibilita acessar ou focar em um objeto por meio de um atalho de teclado.   &lt;a id=\"snippets-acceskey\" href=\"/\" target=\"_blank\" accesskey=\"h\"&gt;Pressione alt + h&lt;/a&gt;   Pressione alt + h   Tab Index   Por meio do tabindex é possível definir a ordem em que os elementos da página serão selecionados ao pressionar TAB (neste caso o elemento abaixo não será focado em primeiro lugar devido a pré definições do tema do site).   &lt;span id=\"snippets-tab-index\" tabindex=\"0\"&gt;Pressione Tab&lt;/span&gt;   Pressione Tab   Title   Passe o mouse por cima do elemento para obter uma dica.   &lt;span title=\"Hello, World!\"&gt;Coloque o mouse &lt;b&gt;aqui&lt;/b&gt; por 2 segundos&lt;/span&gt;   Coloque o mouse aqui por 2 segundos   Lista não ordenada   &lt;ul&gt;   &lt;li&gt;Item&lt;/li&gt;   &lt;li&gt;Item&lt;/li&gt;   &lt;li&gt;Item&lt;/li&gt; &lt;/ul&gt;      Item   Item   Item   Lista ordenada   &lt;ol&gt;   &lt;li&gt;Item&lt;/li&gt;   &lt;li&gt;Item&lt;/li&gt;   &lt;li&gt;Item&lt;/li&gt; &lt;/ol&gt;      Item   Item   Item   Barra de progresso   &lt;label for=\"file\"&gt;Progresso do download&lt;/label&gt; &lt;progress id=\"file\" value=\"32\" max=\"100\"&gt; 32% &lt;/progress&gt;   Progresso do download   32%   Download   &lt;a href=\"\" download&gt;&lt;/a&gt;      Tabela   &lt;table&gt;   &lt;!-- Headers --&gt;   &lt;thead&gt;     &lt;tr&gt;       &lt;th&gt;Coluna A&lt;/th&gt;       &lt;th&gt;Coluna B&lt;/th&gt;       &lt;th&gt;Coluna C&lt;/th&gt;     &lt;/tr&gt;   &lt;/thead&gt;   &lt;!-- Body --&gt;   &lt;tbody&gt;     &lt;!-- Table rows --&gt;     &lt;tr&gt;       &lt;td&gt;Valor A1&lt;/td&gt;       &lt;td&gt;Valor B1&lt;/td&gt;       &lt;td&gt;Valor C1&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;Valor A2&lt;/td&gt;       &lt;td&gt;Valor B2&lt;/td&gt;       &lt;td&gt;Valor C2&lt;/td&gt;     &lt;/tr&gt;   &lt;/tbody&gt;   &lt;!-- Table footer --&gt;   &lt;tfoot&gt;    &lt;/tfoot&gt; &lt;/table&gt;                     Coluna A       Coluna B       Coluna C                               Valor A1       Valor B1       Valor C1                 Valor A2       Valor B2       Valor C2                     Formulário   &lt;form id=\"form\" method=\"GET\" action=\"./index.html\"&gt;   &lt;fieldset&gt;     &lt;legend&gt;Login&lt;/legend&gt;     &lt;!-- email --&gt;     &lt;label for=\"email\"&gt;E-mail&lt;/label&gt;     &lt;br&gt;     &lt;input type=\"email\" id=\"email\" autofocus&gt;     &lt;br&gt;     &lt;!-- password --&gt;     &lt;label for=\"password\"&gt;Senha&lt;/label&gt;     &lt;br&gt;     &lt;input type=\"password\" id=\"password\"&gt;    &lt;/fieldset&gt;   &lt;br&gt;   &lt;!-- checkbox --&gt;   &lt;label for=\"interest\"&gt;Interesses&lt;/label&gt;   &lt;br&gt;   &lt;input type=\"checkbox\" name=\"interest\" value=\"music\"&gt;Musica   &lt;br&gt;   &lt;input type=\"checkbox\" name=\"interest\" value=\"cinema\" checked&gt;Cinema   &lt;br&gt;   &lt;!-- radio --&gt;   &lt;label for=\"interest-radio\"&gt;Interesses&lt;/label&gt;   &lt;br&gt;   &lt;input type=\"radio\" name=\"interest-radio\" value=\"music\"&gt;Musica   &lt;br&gt;   &lt;input type=\"radio\" name=\"interest-radio\" value=\"cinema\" checked&gt;Cinema   &lt;br&gt;   &lt;!-- selector --&gt;   &lt;label for=\"select\"&gt;Menu de seleção&lt;/label&gt;   &lt;select name=\"select\" id=\"select\"&gt;     &lt;option value=\"A\"&gt;A&lt;/option&gt;     &lt;option value=\"B\"&gt;B&lt;/option&gt;     &lt;option value=\"C\" selected&gt;C&lt;/option&gt;   &lt;/select&gt;   &lt;br&gt;   &lt;!-- datalist --&gt;   &lt;label for=\"browser\"&gt;Lista de dados&lt;/label&gt;   &lt;input list=\"browsers\" name=\"browser\"&gt;   &lt;datalist id=\"browsers\"&gt;     &lt;option value=\"Chrome\"&gt;Chrome&lt;/option&gt;     &lt;option value=\"Opera\"&gt;Opera&lt;/option&gt;   &lt;/datalist&gt;   &lt;br&gt;   &lt;!-- upload file --&gt;   &lt;label for=\"photo\"&gt;Upload&lt;/label&gt;   &lt;input type=\"file\" id=\"photo\"&gt;   &lt;br&gt;   &lt;!-- area --&gt;   &lt;label for=\"area\"&gt;&lt;/label&gt;   &lt;textarea id=\"area\" cols=\"30\" rows=\"10\"&gt;Área de texto&lt;/textarea&gt;   &lt;br&gt;   &lt;!-- submit --&gt;   &lt;input type=\"submit\" value=\"Enviar\"&gt;   &lt;br&gt;   &lt;!-- reset form values --&gt;   &lt;input type=\"reset\" value=\"Limpar formulário\"&gt;   &lt;br&gt;   &lt;!-- button --&gt;   &lt;input type=\"button\" value=\"Botão\"&gt; &lt;/form&gt;           Login          E-mail                           Senha                         Interesses       Musica       Cinema          Interesses       Musica       Cinema          Menu de seleção        A     B     C             Lista de dados           Chrome     Opera             Upload                Área de texto                                ","categories": ["Web"],
        "tags": ["Web","HTML"],
        "url": "/web/html-o-que-e/",
        "teaser": "/assets/images/covers/2021-07-04-html-snippets.jpg"
      },{
        "title": "Java Hello, World!",
        "excerpt":"   Hello, Java!    Iniciando com a linguagem Java!   // --------------------------------------------------------------------------// // Linux // --------------------------------------------------------------------------// // Hello.java // Install java // sudo apt update // sudo apt upgrade // sudo apt install default-jre // sudo apt install default-jdk // 1.Compile: // javac Hello.java // 2. java Hello // --------------------------------------------------------------------------// // Windows // --------------------------------------------------------------------------// // https://www.oracle.com/java/technologies/javase-downloads.html // alias java=\"/c/'Program Files'/java/jdk-16.0.2/bin/java.exe\" // Hello.java  import java.util.Scanner;  public class Hello {     static String userName = \"\";     // Execute on file call     public static void main(String[] args) {         getName();         toGreet();     }     public static void getName() {         // Create a Scanner Object         Scanner sc = new Scanner(System.in);         System.out.println(\"Enter username: \");          // Read user input         String userName = sc.next();         sc.close();     }     public static void toGreet() {         System.out.println(String.format(\"Hello, World! %s\", userName));      } }    Executar   java Hello.java  ","categories": [],
        "tags": [],
        "url": "/recipes/java-hello-world/",
        "teaser": "/assets/images/fallback-teaser.jpg"
      },{
        "title": "Java JPA Hibernate",
        "excerpt":"Exemplo JPA com Hibernate.   Ingredientes      Docker   Docker Compose   Maven   Open JDK 11   Hibernate        PostgresSQL       vscode   vscode language support for Java(TM) by Red Hat   vscode extension pack for Java (Microsoft)   vscode debugger for Java (Microsoft)   vscode maven for Java (Microsoft)   vscode project management for Java (Microsoft)   vscode test runner for Java (Microsoft)   vscode Java code generators (Microsoft)   vscode XML language support by Red Hat   Preparo:      No vscode: ctrl + shift + p   Selecione Java: Create Java Project   Selecione Maven   Selecione maven-archetype-quickstart   Docker   Dockerfiles   maven:   FROM maven:3.8.3-openjdk-11  RUN apt-get update &amp;&amp; apt-get install -y netcat ARG USER_HOME_DIR=\"/root\"  ENV MAVEN_HOME /usr/share/maven ENV MAVEN_CONFIG \"$USER_HOME_DIR/.m2\"  VOLUME \"$USER_HOME_DIR/.m2\" WORKDIR /app/src # Add entrypoint COPY scripts/entrypoint.sh /app/scripts/entrypoint.sh CMD [\"chmod\", \"+x\", \"/app/scripts/entrypoint.sh\"] ENTRYPOINT [\"/app/scripts/entrypoint.sh\"]    maven test:   FROM maven:3.8.3-openjdk-11  RUN apt-get update &amp;&amp; apt-get install -y netcat WORKDIR /app COPY src /app/src COPY pom.xml /app # Add entrypoint COPY scripts/entrypoint-test.sh /app/scripts/entrypoint.sh CMD [\"chmod\", \"+x\", \"/app/scripts/entrypoint.sh\"] ENTRYPOINT [\"/app/scripts/entrypoint.sh\"]    Entrypoint   Produção:   #!/bin/bash # --------------------------------------------------------------------------- # # Wait until database starts. # --------------------------------------------------------------------------- # if [ \"$DATABASE\" = \"postgres\" ] then     echo \"Waiting for postgres...\"      while ! nc -z $SQL_HOST $SQL_PORT; do       sleep 0.1     done      echo \"PostgreSQL started\" fi # --------------------------------------------------------------------------- # # Compile application. # --------------------------------------------------------------------------- # mvn -T 2C clean package \\   -Dmaven.test.skip -DskipTests -f  /app/src  &amp;&amp; \\ # --------------------------------------------------------------------------- # # Run application main class. # --------------------------------------------------------------------------- # mvn -e exec:java \\   -Dexec.cleanupDaemonThreads=false \\   -Dexec.mainClass=\"com.dmenezesgabriel.jpa.QueryUser\"    Testes:   #!/bin/bash # --------------------------------------------------------------------------- # # Wait until database starts # --------------------------------------------------------------------------- # if [ \"$DATABASE\" = \"postgres\" ] then     echo \"Waiting for postgres...\"      while ! nc -z $SQL_HOST $SQL_PORT; do       sleep 0.1     done      echo \"PostgreSQL started\" fi # --------------------------------------------------------------------------- # # Run java application tests with maven # --------------------------------------------------------------------------- # mvn clean test   Docker Compose   # # hibernate/docker-compose.yml version: \"3.9\"  services:   # ------------------------------------------------------------------------- #   # Production Database   # ------------------------------------------------------------------------- #   postgres:     container_name: postgres     image: postgres:14.0-alpine     # volumes:     # - ./postgres_data:/var/lib/postgresql/data/     ports:       - 5432:5432     environment:       POSTGRES_PASSWORD: postgres     networks:       - prod   # ------------------------------------------------------------------------- #   # Test Database   # ------------------------------------------------------------------------- #   postgres-test:     container_name: postgres-test     image: postgres:14.0-alpine     ports:       - \"5433:5432\"     environment:       POSTGRES_PASSWORD: postgres     networks:       - test   # ------------------------------------------------------------------------- #   # Database Tool   # ------------------------------------------------------------------------- #   pgadmin:     container_name: pgadmin     image: dpage/pgadmin4     ports:       - 8087:80       - 4443:443     environment:       PGADMIN_DEFAULT_EMAIL: dmenezes.gabriel@gmail.com       PGADMIN_DEFAULT_PASSWORD: postgres       PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION: \"True\"       PGADMIN_CONFIG_CONSOLE_LOG_LEVEL: 10     depends_on:       - postgres     networks:       - prod   # ------------------------------------------------------------------------- #   # Production Maven   # ------------------------------------------------------------------------- #   maven:     build:       context: .       dockerfile: dockerfiles/Dockerfile-maven     volumes:       - ./.m2:/root/.m2       - $PWD:/app/src     networks:       - prod     environment:       SQL_HOST: postgres       SQL_PORT: 5432       DATABASE: postgres   # ------------------------------------------------------------------------- #   # Maven Tests   # ------------------------------------------------------------------------- #   maven-test:     build:       context: .       dockerfile: dockerfiles/Dockerfile-maven-test     # command: /bin/bash -c 'mvn clean test'     volumes:       - ./.m2:/root/.m2       - $PWD/src:/app/src     depends_on:       - postgres-test     networks:       - test     environment:       SQL_HOST: postgres-test       SQL_PORT: 5432       DATABASE: postgres # -------------------------------------------------------------------------- # # Docker networks # -------------------------------------------------------------------------- # networks:   prod:   test:    Código fonte   Entidades   Usuário:   // hibernate/src/main/java/com/dmenezesgabriel/jpa/domain/User.java package com.dmenezesgabriel.jpa.domain.entity;  /** * User entity * * @author Gabriel Menezes * @version 1.0 */ import java.util.Calendar; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.EnumType; import javax.persistence.Enumerated; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.SequenceGenerator; import javax.persistence.Table; import javax.persistence.Temporal; import javax.persistence.TemporalType; import java.io.Serializable; import java.text.SimpleDateFormat;  import org.hibernate.annotations.CreationTimestamp; import org.hibernate.annotations.UpdateTimestamp; import java.util.Objects;  @Entity @Table(name = \"t_usuario\") public class User implements Serializable {     protected static final long serialVersionUID = 1L;      @Id     @SequenceGenerator(name = \"t_usuario_cd_usuario_seq\", sequenceName = \"t_usuario_cd_usuario_seq\", allocationSize = 1)     @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"t_usuario_cd_usuario_seq\")     @Column(name = \"cd_usuario\", updatable = false)     // The naming tablename_columname_seq is the PostgreSQL default sequence naming     // for SERIAL     // The allocationSize=1 is important if you need Hibernate to co-operate with     // other clients     // Note that this sequence will have \"gaps\" in it if transactions roll back.     // Never assume that for any id n there is an id n-1 or n+1.     private int id;      @Column(name = \"nm_usuario\", nullable = false, length = 60)     private String name;      @Temporal(TemporalType.DATE)     @Column(name = \"dt_nascimento\")     private Calendar birthDate;      @Enumerated(EnumType.STRING)     @Column(name = \"des_genero\")     private Gender gender;      @Column(name = \"des_email\", nullable = false, length = 60)     private String email;      @Column(name = \"des_senha\", nullable = false, length = 60)     private String password;      @CreationTimestamp     @Temporal(TemporalType.TIMESTAMP)     @Column(name = \"dt_criacao\", columnDefinition = \"TIMESTAMP WITH TIME ZONE\", updatable = false)     private Calendar createdAt;      @UpdateTimestamp     @Temporal(TemporalType.TIMESTAMP)     @Column(name = \"dt_atualizacao\", columnDefinition = \"TIMESTAMP WITH TIME ZONE\")     private Calendar updatedAt;      public User() {     }      public User(int id, String name, Calendar birthDate, Gender gender, String email, String password,             Calendar createdAt, Calendar updatedAt) {         this.id = id;         this.name = name;         this.birthDate = birthDate;         this.gender = gender;         this.email = email;         this.password = password;         this.createdAt = createdAt;         this.updatedAt = updatedAt;     }      public int getId() {         return this.id;     }      public void setId(int id) {         this.id = id;     }      public String getName() {         return this.name;     }      public void setName(String name) {         this.name = name;     }      public Calendar getBirthDate() {         return this.birthDate;     }      public void setBirthDate(Calendar birthDate) {         this.birthDate = birthDate;     }      public Gender getGender() {         return this.gender;     }      public void setGender(Gender gender) {         this.gender = gender;     }      public String getEmail() {         return this.email;     }      public void setEmail(String email) {         this.email = email;     }      public String getPassword() {         return this.password;     }      public void setPassword(String password) {         this.password = password;     }      public Calendar getCreatedAt() {         return this.createdAt;     }      public void setCreatedAt(Calendar createdAt) {         this.createdAt = createdAt;     }      public Calendar getUpdatedAt() {         return this.updatedAt;     }      public void setUpdatedAt(Calendar updatedAt) {         this.updatedAt = updatedAt;     }      public User id(int id) {         setId(id);         return this;     }      public User name(String name) {         setName(name);         return this;     }      public User birthDate(Calendar birthDate) {         setBirthDate(birthDate);         return this;     }      public User gender(Gender gender) {         setGender(gender);         return this;     }      public User email(String email) {         setEmail(email);         return this;     }      public User password(String password) {         setPassword(password);         return this;     }      public User createdAt(Calendar createdAt) {         setCreatedAt(createdAt);         return this;     }      public User updatedAt(Calendar updatedAt) {         setUpdatedAt(updatedAt);         return this;     }      @Override     public boolean equals(Object o) {         if (o == this)             return true;         if (!(o instanceof User)) {             return false;         }         User user = (User) o;         return id == user.id &amp;&amp; Objects.equals(name, user.name) &amp;&amp; Objects.equals(birthDate, user.birthDate)                 &amp;&amp; Objects.equals(gender, user.gender) &amp;&amp; Objects.equals(email, user.email)                 &amp;&amp; Objects.equals(password, user.password) &amp;&amp; Objects.equals(createdAt, user.createdAt)                 &amp;&amp; Objects.equals(updatedAt, user.updatedAt);     }      @Override     public int hashCode() {         return Objects.hash(id, name, birthDate, gender, email, password, createdAt, updatedAt);     }      @Override     public String toString() {         SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");         return \"{\" +                 \" id='\" + getId() + \"'\" +                 \", name='\" + getName() + \"'\" +                 \", birthDate='\" + sdf.format(birthDate.getTime()) + \"'\" +                 \", gender='\" + getGender() + \"'\" +                 \", email='\" + getEmail() + \"'\" +                 \", password='\" + getPassword() + \"'\" +                 \", createdAt='\" + sdf.format(createdAt.getTime()) + \"'\" +                 \", updatedAt='\" + sdf.format(updatedAt.getTime()) + \"'\" +                 \"}\";     }  }   Gênero Enum:   // hibernate/src/main/java/com/dmenezesgabriel/jpa/domain/Gender.java package com.dmenezesgabriel.jpa.domain.entity;  public enum Gender {      MALE(\"masculino\"),     FEMALE(\"feminino\");      private String description;      Gender(String description) {         this.description = description;     }      public String getDescription() {         return description;     } }    Testes   Entidades:   // hibernate/src/test/java/com/dmenezesgabriel/jpa/User.java package com.dmenezesgabriel.jpa.domain.entity;  import static org.junit.Assert.assertTrue;  import java.util.Calendar; import org.junit.Test;  public class TestUser {     @Test     public void shoudInstanceObject() throws Exception {         User user = new User();          user.setName(\"Gabriel\");         user.setEmail(\"gabriel@example.com\");         Calendar birthDate = Calendar.getInstance();         birthDate.set(Calendar.YEAR, 1995);         birthDate.set(Calendar.MONTH, Calendar.MARCH);         birthDate.set(Calendar.DAY_OF_MONTH, 20);         user.setBirthDate(birthDate);         Gender gender = Gender.MALE;         user.setGender(gender);          assertTrue(user.getName().equals(\"Gabriel\"));         assertTrue(user.getEmail().equals(\"gabriel@example.com\"));         assertTrue(user.getBirthDate().equals(birthDate));         assertTrue(user.getGender().equals(Gender.MALE));      } }    Orm:   // hibernate/src/test/java/com/dmenezesgabriel/jpa/TestInserUser.java package com.dmenezesgabriel.jpa.domain.entity;  import java.util.Calendar; import org.junit.Test;  import javax.persistence.EntityManager; import javax.persistence.EntityManagerFactory; import javax.persistence.Persistence; import static org.junit.Assert.assertTrue;  public class TestInsertUser {     @Test     public void shouldInserUser() throws Exception {         EntityManagerFactory entityManagerFactory = Persistence                 .createEntityManagerFactory(\"jpa\");         EntityManager entityManager = entityManagerFactory                 .createEntityManager();          User user = new User();          user.setName(\"Gabriel\");         user.setEmail(\"gabriel@example.com\");         Calendar birthDate = Calendar.getInstance();         birthDate.set(Calendar.YEAR, 1995);         birthDate.set(Calendar.MONTH, Calendar.MARCH);         birthDate.set(Calendar.DAY_OF_MONTH, 20);         user.setBirthDate(birthDate);         Gender gender = Gender.MALE;         user.setGender(gender);         user.setPassword(\"123\");          entityManager.getTransaction().begin();         entityManager.persist(user);         entityManager.getTransaction().commit();          User record = entityManager.find(User.class, 1);          assertTrue(record.getName().equals(\"Gabriel\"));         assertTrue(record.getEmail().equals(\"gabriel@example.com\"));         assertTrue(record.getBirthDate().equals(birthDate));         assertTrue(record.getGender().equals(Gender.MALE));          entityManager.close();         entityManagerFactory.close();      } }    persistence.xml   Produção:   &lt;!-- src/main/resources/META-INF/persistence.xml --&gt; &lt;persistence xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\"              xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"              xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence              http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\"              version=\"2.1\"&gt;      &lt;!-- transaction-type --&gt;     &lt;!-- - RESOURCE_LOCAL --&gt;     &lt;!-- - JTA --&gt;     &lt;persistence-unit name=\"jpa\" transaction-type=\"RESOURCE_LOCAL\"&gt;       &lt;!-- Framework used for JPA especification --&gt;       &lt;provider&gt;org.hibernate.jpa.HibernatePersistenceProvider&lt;/provider&gt;       &lt;class&gt;com.dmenezesgabriel.jpa.domain.entity.User&lt;/class&gt;       &lt;class&gt;com.dmenezesgabriel.jpa.domain.entity.Product&lt;/class&gt;       &lt;class&gt;com.dmenezesgabriel.jpa.domain.entity.ProductState&lt;/class&gt;       &lt;class&gt;com.dmenezesgabriel.jpa.domain.entity.Provider&lt;/class&gt;          &lt;properties&gt;             &lt;!-- Database Driver --&gt;             &lt;property name=\"javax.persistence.jdbc.driver\" value=\"org.postgresql.Driver\" /&gt;             &lt;!-- Database connection uri --&gt;             &lt;!-- \"jdbc:sgdb_name://host_address:port_number/database_name\" --&gt;             &lt;!-- - When using docker, host addres is the container name --&gt;             &lt;property name=\"javax.persistence.jdbc.url\" value=\"jdbc:postgresql://postgres:5432/postgres\" /&gt;             &lt;!-- Database User --&gt;             &lt;property name=\"javax.persistence.jdbc.user\" value=\"postgres\" /&gt;             &lt;!-- Database Password --&gt;             &lt;property name=\"javax.persistence.jdbc.password\" value=\"postgres\" /&gt;       &lt;!-- Database Dialect --&gt; \t    &lt;property name=\"hibernate.dialect\" value=\"org.hibernate.dialect.PostgreSQLDialect\"/&gt;             &lt;!-- create / create-drop / update --&gt;             &lt;!-- - create: creates database from scratch using definitions --&gt;             &lt;!-- - update: try to update new attributes --&gt;             &lt;!-- - validate: verify if the entities are compatible with db tables --&gt;             &lt;property name=\"hibernate.hbm2ddl.auto\" value=\"create\" /&gt;             &lt;!-- Show SQL in console --&gt;             &lt;!-- Should be disabled in production --&gt;             &lt;property name=\"hibernate.show_sql\" value=\"true\" /&gt;             &lt;!-- Show SQL formatted --&gt;             &lt;property name=\"hibernate.format_sql\" value=\"true\" /&gt;         &lt;/properties&gt;      &lt;/persistence-unit&gt;  &lt;/persistence&gt;   Testes:   &lt;!-- src/main/resources/META-INF/persistence.xml --&gt; &lt;persistence xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\"              xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"              xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence              http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\"              version=\"2.1\"&gt;      &lt;!-- transaction-type --&gt;     &lt;!-- - RESOURCE_LOCAL --&gt;     &lt;!-- - JTA --&gt;     &lt;persistence-unit name=\"jpa\" transaction-type=\"RESOURCE_LOCAL\"&gt;       &lt;!-- Framework used for JPA especification --&gt;       &lt;provider&gt;org.hibernate.jpa.HibernatePersistenceProvider&lt;/provider&gt;       &lt;class&gt;com.dmenezesgabriel.jpa.domain.entity.User&lt;/class&gt;       &lt;class&gt;com.dmenezesgabriel.jpa.domain.entity.Product&lt;/class&gt;       &lt;class&gt;com.dmenezesgabriel.jpa.domain.entity.ProductState&lt;/class&gt;       &lt;class&gt;com.dmenezesgabriel.jpa.domain.entity.Provider&lt;/class&gt;          &lt;properties&gt;             &lt;!-- Database Driver --&gt;             &lt;property name=\"javax.persistence.jdbc.driver\" value=\"org.postgresql.Driver\" /&gt;             &lt;!-- Database connection uri --&gt;             &lt;!-- \"jdbc:sgdb_name://host_address:port_number/database_name\" --&gt;             &lt;!-- - When using docker, host addres is the container name --&gt;             &lt;property name=\"javax.persistence.jdbc.url\" value=\"jdbc:postgresql://postgres-test:5432/postgres\" /&gt;             &lt;!-- Database User --&gt;             &lt;property name=\"javax.persistence.jdbc.user\" value=\"postgres\" /&gt;             &lt;!-- Database Password --&gt;             &lt;property name=\"javax.persistence.jdbc.password\" value=\"postgres\" /&gt;       &lt;!-- Database Dialect --&gt; \t    &lt;property name=\"hibernate.dialect\" value=\"org.hibernate.dialect.PostgreSQLDialect\"/&gt;             &lt;!-- create / create-drop / update --&gt;             &lt;!-- - create: creates database from scratch using definitions --&gt;             &lt;!-- - update: try to update new attributes --&gt;             &lt;!-- - validate: verify if the entities are compatible with db tables --&gt;             &lt;property name=\"hibernate.hbm2ddl.auto\" value=\"create\" /&gt;             &lt;!-- Show SQL in console --&gt;             &lt;!-- Should be disabled in production --&gt;             &lt;property name=\"hibernate.show_sql\" value=\"true\" /&gt;             &lt;!-- Show SQL formatted --&gt;             &lt;property name=\"hibernate.format_sql\" value=\"true\" /&gt;         &lt;/properties&gt;      &lt;/persistence-unit&gt;  &lt;/persistence&gt;   pom.xml   &lt;!-- hibernate/pom.xml --&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;   &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;   &lt;!-- ==================================================================== --&gt;   &lt;!-- Organization --&gt;   &lt;!-- ==================================================================== --&gt;   &lt;!-- organization/application url on the contrary br.com.domain --&gt;   &lt;groupId&gt;com.dmenezesgabriel&lt;/groupId&gt;   &lt;!-- ==================================================================== --&gt;   &lt;!--  Project --&gt;   &lt;!-- ==================================================================== --&gt;   &lt;!-- Artifacty ID must be unique within the group --&gt;   &lt;artifactId&gt;jpa&lt;/artifactId&gt;   &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;   &lt;name&gt;jpa&lt;/name&gt;   &lt;!-- ==================================================================== --&gt;   &lt;!-- Project's Website --&gt;   &lt;!-- ==================================================================== --&gt;   &lt;url&gt;dmenezesgabriel.github.io&lt;/url&gt;   &lt;!-- ==================================================================== --&gt;   &lt;!-- Projects properties --&gt;   &lt;!-- ==================================================================== --&gt;   &lt;properties&gt;     &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;     &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt;     &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt;   &lt;/properties&gt;   &lt;!-- ==================================================================== --&gt;   &lt;!-- Project's dependencies --&gt;   &lt;!-- ==================================================================== --&gt;   &lt;dependencies&gt;     &lt;dependency&gt; \t\t&lt;!-- tag::junit[] --&gt;       &lt;groupId&gt;junit&lt;/groupId&gt;       &lt;artifactId&gt;junit&lt;/artifactId&gt;       &lt;version&gt;4.13.1&lt;/version&gt;       &lt;scope&gt;test&lt;/scope&gt;     &lt;/dependency&gt; \t\t&lt;!-- end::junit[] --&gt; \t\t&lt;!-- tag::hibernate[] --&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.hibernate&lt;/groupId&gt;         &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;         &lt;version&gt;5.4.24.Final&lt;/version&gt;     &lt;/dependency&gt; \t\t&lt;!-- end::hibernate[] --&gt; \t\t&lt;!-- tag::postgres[] --&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.postgresql&lt;/groupId&gt;         &lt;artifactId&gt;postgresql&lt;/artifactId&gt;         &lt;version&gt;42.3.3&lt;/version&gt;     &lt;/dependency&gt; \t\t&lt;!-- end::postgres[] --&gt; \t\t&lt;!-- tag::log4j[] --&gt;     &lt;dependency&gt;       &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;       &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;       &lt;version&gt;2.17.1&lt;/version&gt;     &lt;/dependency&gt;     &lt;dependency&gt;       &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;       &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;       &lt;version&gt;2.17.1&lt;/version&gt;     &lt;/dependency&gt; \t\t&lt;!-- end::log4j[] --&gt;   &lt;/dependencies&gt;   &lt;!-- ==================================================================== --&gt;   &lt;!-- Project's build --&gt;   &lt;!-- ==================================================================== --&gt;   &lt;build&gt;     &lt;pluginManagement&gt;       &lt;plugins&gt;         &lt;!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle --&gt;         &lt;plugin&gt;           &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt;           &lt;version&gt;3.1.0&lt;/version&gt;         &lt;/plugin&gt;         &lt;!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging --&gt;         &lt;plugin&gt;           &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;           &lt;version&gt;3.0.2&lt;/version&gt;         &lt;/plugin&gt;         &lt;plugin&gt;           &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;           &lt;version&gt;3.8.0&lt;/version&gt;         &lt;/plugin&gt;         &lt;plugin&gt;           &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;           &lt;version&gt;2.22.1&lt;/version&gt;         &lt;/plugin&gt;         &lt;plugin&gt;           &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;           &lt;version&gt;3.0.2&lt;/version&gt;         &lt;/plugin&gt;         &lt;plugin&gt;           &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt;           &lt;version&gt;2.5.2&lt;/version&gt;         &lt;/plugin&gt;         &lt;plugin&gt;           &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt;           &lt;version&gt;2.8.2&lt;/version&gt;         &lt;/plugin&gt;         &lt;!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle --&gt;         &lt;plugin&gt;           &lt;artifactId&gt;maven-site-plugin&lt;/artifactId&gt;           &lt;version&gt;3.7.1&lt;/version&gt;         &lt;/plugin&gt;         &lt;plugin&gt;           &lt;artifactId&gt;maven-project-info-reports-plugin&lt;/artifactId&gt;           &lt;version&gt;3.0.0&lt;/version&gt;         &lt;/plugin&gt;       &lt;/plugins&gt;     &lt;/pluginManagement&gt;   &lt;/build&gt; &lt;/project&gt;    Compilar e executar   Instruções:   Requirements      Openjdk 11   Hibernate   Docker   Docker Compose   Usage   Run:   docker-compose up -d postgres # Optional docker-compose up -d pgadmin # Then docker-compose run maven --rm   Run tests:   docker-compose run maven-test   Recompile and Run:   docker-compose run maven --rm   Bring down with volumes:   docker-compose down -v   Referências      tutorial-jpa  ","categories": [],
        "tags": [],
        "url": "/recipes/java-jpa-hibernate/",
        "teaser": "/assets/images/fallback-teaser.jpg"
      },{
        "title": "Java OOP Herança",
        "excerpt":"Hello, Java!   Superclasse   package com.java;  // Animal Superclass public class Animal {     private String move;     private String feed;      public String getMove() {         return move;     }      public void setMove(String move) {         this.move = move;     }      public String getFeed() {         return feed;     }      public void setFeed(String feed) {         this.feed = feed;     } }   Subclasses   package com.java;  // Bird subclass public class Bird extends Animal {     private String sing;      public String getSing() {         return sing;     }      public void setSing(String sing) {         this.sing = sing;     } }   package com.java;  // Dog subclass public class Dog extends Animal {     private String bark;      public String getBark() {         return bark;     }      public void setBark(String bark) {         this.bark = bark;     } }   Classe para testar a execução   package com.java;  // Testing class public class Test {     public static void main(String[] args) {         Animal animal = new Animal();         animal.setFeed(\"Every animal eats\");          System.out.println(animal.getFeed());          Dog dog = new Dog();         dog.setFeed(\"Dog eats dog food\");          System.out.println(dog.getFeed());      } }   Compilar e executar   # Compile find . -name \"*.java\" | xargs javac -d bin   # Run java -classpath bin com.java.view.Test   ","categories": [],
        "tags": [],
        "url": "/recipes/java-oop-heranca/",
        "teaser": "/assets/images/fallback-teaser.jpg"
      },{
        "title": "Configuração Bash Linux",
        "excerpt":"Configurações para bash no Windows.   .bashrc   # ~/.bashrc echo \"Hello ${USER}\" # --------------------------------------------------------------------------- # # Environment # --------------------------------------------------------------------------- # # Always require python environment export PIP_REQUIRE_VIRTUALENV=true # Don't write __pycache__, *.pyc and similar files export PYTHONDONTWRITEBYTECODE=1 # --------------------------------------------------------------------------- # # Java JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64 export JAVA_HOME # Maven MAVEN_HOME=~/Documents/programs/apache-maven-3.8.2 export MAVEN_HOME PATH=$JAVA_HOME/bin:$MAVEN_HOME/bin:$PATH export PATH # --------------------------------------------------------------------------- # # NVM export NVM_DIR=\"$([ -z \"${XDG_CONFIG_HOME-}\" ] &amp;&amp; printf %s \"${HOME}/.nvm\" || printf %s \"${XDG_CONFIG_HOME}/nvm\")\" [ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\. \"$NVM_DIR/nvm.sh\" # This loads nvm   ","categories": [],
        "tags": [],
        "url": "/recipes/shell-linux-configuracao/",
        "teaser": "/assets/images/fallback-teaser.jpg"
      },{
        "title": "Configuração Bash Windows",
        "excerpt":"Configurações para bash no Windows.   .bashrc   # ~/.bashrc # --------------------------------------------------------------------------- # # Environment # --------------------------------------------------------------------------- # export PIPENV_IGNORE_VIRTUALENVS=1 export PYTHONDONTWRITEBYTECODE=1 export PIP_REQUIRE_VIRTUALENV=true export USER=$(whoami) export JDK_VERSION=\"17.0.1\" export MVN_VERSION=\"3.8.3\" # Fix Strange characters on jshell export TERM=cygwin # --------------------------------------------------------------------------- # # Directories # --------------------------------------------------------------------------- # alias docs=\"cd '/c/Users/${USER}/Documents'\" alias repos=\"cd '/c/Users/${USER}/Documents/repos'\" alias edoc=\"explorer '/c/Users/${USER}/Documents'\" alias erepos=\"explorer '/c/Users/${USER}/Documents/repos'\" # --------------------------------------------------------------------------- # # Python # --------------------------------------------------------------------------- # # Create new python virtual environment at ~/environments/&lt;current_folder_name&gt; alias nvenv='python -m  venv ~/environments/\"${PWD##*/}\"' # Activate python virtual environment at ~/environments/&lt;current_folder_name&gt; alias avenv='source ~/environments/\"${PWD##*/}\"/Scripts/activate' # --------------------------------------------------------------------------- # # Java # --------------------------------------------------------------------------- # # Java executable alias alias java=\"/c/'Program Files'/java/jdk-${JDK_VERSION}/bin/java.exe\" # Java Doc executable alias alias javadoc=\"/c/'Program Files'/java/jdk-${JDK_VERSION}/bin/javadoc.exe\" # Maven executable alias alias mvn=\"/c/Users/${USER}/Documents/Programs/apache-maven-${MVN_VERSION}/bin/mvn.cmd\"   ","categories": [],
        "tags": [],
        "url": "/recipes/shell-windows-configuracao/",
        "teaser": "/assets/images/fallback-teaser.jpg"
      }]
