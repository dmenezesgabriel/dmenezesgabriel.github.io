var store = [{
        "title": "Você conhece a origem do \"Hello World!\"?",
        "excerpt":"Tradicionalmente, programas Olá, Mundo! são utilizados para demonstrações no desenvolvimento de programas, assim como para assegurar que tanto uma linguagem como o sistema operacional estão funcionando corretamente.   Geralmente estes programas são os primeiros desenvolvidos por novos programadores, porque mesmo com pouca ou nenhuma experiência são fáceis para se executar, e por sua simplicidade são utilizados para garantir que os componentes de uma linguagem (seu compilador, ambiente de desenvolvimento e tempo de execução) foram instalados corretamente.   Estes programas também são utilizados pelos hackers como prova de conceito de que um código arbitrário pode ser executado por meio de um exploit onde os designers do sistema não pretendiam que o código pudesse ser executado.   Outro uso popular do Olá, Mundo! é como base de comparação de tamanho do executável que a linguagem gera e quanta infraestrutura de suporte deve existir por trás do programa para que este seja executado.   Mas de onde, ou melhor, quando tudo isso começou?   Brian Kernighan, autor de um dos livros de programação mais lidos, “C Programming Language”, também criou Hello, World. Ele fez referência pela primeira vez a Hello World no predecessor do livro C Programming Language: A Tutorial Introduction to the Programming Language B publicado em 1973.   main( ) { extrn a, b, c; putchar(a); putchar(b); putchar(c); putchar(’!*n’); } 1 ’hell’; b ’o, w’; c ’orld’;   Infelizmente, Kernighan não consegue identificar com certeza quando ou por que escolheu as palavras “Olá, Mundo!”. Quando questionado sobre o que gerou a ideia do nome “Olá, Mundo” em uma entrevista para a Forbes Índia, ele disse que sua memória está turva.      “O que me lembro é que vi um cartoon que mostrava um ovo e um pintinho e o pintinho dizia:“ Olá, mundo ”.    E você, já escreveu seu Olá, Mundo! ou melhor, seu Hello, World! hoje?   def hello(): print('Hello World!')  ","categories": ["Programação"],
        "tags": ["Python","Programação","Curiosidades"],
        "url": "https://dmenezesgabriel.github.io/programa%C3%A7%C3%A3o/origens-do-hello-world/",
        "teaser": "https://dmenezesgabriel.github.io/assets/images/fallback-teaser.jpeg"
      },{
        "title": "Git: Manual de sobrevivência do iniciante",
        "excerpt":"O Git é um sistema de controle de versão distribuído, criado por Linus Torvalds, nada mais nada menos que o criador do linux. Um software que tem por objetivo gerenciar diferentes versões no desenvolvimento de um documento qualquer, comumente utilizado no desenvolvimento de software para controlar diferentes versões dos códigos fonte e de sua documentação.   Diferente das outras opções de sistemas similares como o CSV e SVN, a arquitetura do git é descentralizada, ou seja, não existe um repositório oficial, apesar de existir esta possibilidade, então em cada repositório incluindo o da maquina do contribuidor, existira uma cópia completa e funcional, permitindo a utilização das operações do Git sem a necessidade de estar online.   Quando se trata de trabalho em equipe, e a maior parte do tempo as equipes estarão trabalhando em paralelo, um sistema como o Git se torna mais do que essêncial, para que não hajam conflitos entre as alterações realizadas por cada colaborador.   Também é comum que no constante desenvolvimento dos projetos hajam alterações que comprometam o seu funcionamento, neste caso o Git permite que essas alterações sejam revertidas de maneira rápida e simples.   Como isso funciona?   O Git trabalha em uma estrutura de ramificações, onde cada alteração de código cria um novo ponto na ramificação atual, essas ramificações, mais conhecidas como branchs são criadas no desenvolvimento de novas funcionalidades, e baseadas em branchs já existentes.   Cada contribuidor faz uma cópia local do repositório remoto original e cria as modificações necessárias, essa cópia será enviada novamente para o repositório remoto.   Passos no fluxo de contribuição de um projeto utilizando Git:      Clonar o repositório para que uma cópia contendo todos os arquivos originais esteja disponível localmente.   git clone &lt;HTTPS ou SSH&gt;      Criar uma branch, onde podemos alterar os arquivos do projeto sem interferir nos arquivos originais   git branch &lt;nome da ramificação (branch)&gt; # Alterar para a ramificação criada git checkout &lt;nome da ramificação (branch)&gt;      Conforme vamos criando e modificando os arquivos, adicionamos essas modificações   git add -p      E as dividimos em commits, é importante que a descrição do commit seja objetiva e clara quanto ao motivo das alterações, remoções ou inclusões, porque ela ficará salva no histórico das alterações.   git commit   Caso seja necessário realizar alguma alteração posterior ao primeiro commit já realizado, é possível adicionar as novas alterações e utilizar o comando:   git commit --amend      Uma vez que todas alterações forem finalizadas, vamos enviar a nossa branch contendo todas as alterações de volta para o repositório remoto, para que ela fique disponível para os demais contribuidores do projeto poderem ver e alterar.   git push --set-upstream origin &lt;nome da ramificação (branch)&gt;   Caso você tenha adicionado alterações posteriores, basta utilizar o seguinte comando:   git push --force with lease           Então é aberto um Pull Request, onde você pede ao dono do repositório que suas contribuições sejam incluídas nele.            Geralmente após a revisão das modificações ser realizada por algum dos outros contribuidores, você pode dar o merge que atualizara o repositório original com as suas modificações.       Comandos mais utilizados   Iniciando um repositório   git init   Buscar e aplicar modificações do repositório remoto no repositório local   git pull --prune   A flag --prune deleta branchs locais cujas modificações já foram aplicadas na branch original. Algumas vezes essas modificações podem gerar conflitos que necessitam de interação humana para serem corrigidos.   Resetando um commit   git reset --soft HEAD~1   A flag --soft garante que as alterações desfeitas sejam preservadas. Após executar o comando, você encontrará as mudanças como modificações locais não confirmadas em sua cópia local.   Se você não quiser manter essas alterações, simplesmente use a flag --hard. Faça isso apenas quando tiver certeza de que não precisa mais dessas alterações.   git reset --hard HEAD~1   Removendo um arquivo da área de staging ou desfazendo um git add   git reset &lt;nome do arquivo&gt;   Rebase   As modificações que você está fazendo em sua branch local podem ficar defasadas em relação ao repositório remoto, então é possível alterar a base de sua ramificação local para a mais atual com o comando rebase.   git rebase origin/master   Histórico de commits:   git log --graph --all --decorate --oneline      log: Mostra o histórico de commits.   --all: Apresenta todas referências.   --graph: Cria uma representação gráfica do histórico de commits.   --decorate: Traz o nome da referência para cada commit mostrado.   --oneline: Esta é uma abreviação para --pretty=oneline --abbrev-commi.   Deletar branchs locais cujas modificações já foram aplicadas ao repositório remoto “master”   git branch --merged | egrep -v \"(^\\*|master|dev)\" | xargs git branch -d      branch: Listar, criar ou deletar ramificações.   --merged: Ramificações as quais suas modificações já foram aplicadas ao repositório original.   |: Sequência de um ou mais comandos.   egrep: Mostrar linhas que correspondem a um padrão.   -d, --delete: Deletar ramificação.   Arquivar modificações   git stash   Mostrar diferenças entre as modificações armazenadas e a ramificação atual   git stash show -p      stash: Arquivar as alterações.   show: Mostrar as alterações arquivadas e suas diferenças em relação a ramificação original.   -p, --patch: Seleciona as diferenças entre o ponteiro HEAD e a branch atual.   O que é GitHub   Enquanto o Git é um sistema de versionamento, o GitHub é uma plataforma para criação de repositórios remotos Git, possibilitando que outras pessoas possam clonar esse repositório localmente, realizar alterações e enviar essas alterações de volta ao repositório remoto.   Alternativas      GitLab   BitBucket   Referências      Explain Shell  ","categories": ["Git"],
        "tags": ["Git","Github","Iniciante","Comandos"],
        "url": "https://dmenezesgabriel.github.io/git/git-manual-de-sobrevivencia-do-iniciante/",
        "teaser": "https://dmenezesgabriel.github.io/assets/images/git-log.jpeg"
      },{
        "title": "Como monitorar fluxos de negócios digitais",
        "excerpt":"Já faz algum tempo que venho trabalhado no desenvolvimento de monitoramentos, e quando digo monitoramentos a primeira imagem que costuma-se visualizar é a de diversos monitores com indicadores em tempo real, mensurando evoluções e declínios históricos, e o observador em sua busca de encontrar uma movimentação de uma linha tão acentuada que lhe chame a atenção. Já a segunda imagem é o monitoramento de métricas de infraestrutura, por exemplo, acompanhamento de logs de aplicação em ferramentas como LogEntries e Datadog ou a stack ELK.   O que eu realmente tenho feito não é nada disso, quero dizer, tem um pouco disso. O que monitoro são regras de negócio, em um provedor de serviços de pagamento, claro assim como em outros meios, precisamos garantir a integridade das informações e do comportamento de nossas ferramentas, afinal erros humanos são possíveis e prováveis, e dívidas técnicas de produto, inevitáveis.   Também não é necessário acompanhar a alteração das curvaturas em um monitor, temos uma aplicação interna construída em python, algo próximo de um agendador/orquestrador que irá disparar um alerta apenas quando for necessária a tomada de ação.   Hoje existem monitoramentos que verificam queda de conversão, comportamentos inesperados em outros players do fluxo de pagamentos, integridade de diversos serviços internos e fluxos financeiros. Mas a quais características devemos nos atentar para sermos eficientes?   Um monitoramento deve possuir um dono   Quando é encontrado algum problema, é necessário que haja uma pessoa, um time, ou times de pessoas responsáveis para soluciona-lo, se não é algo crítico que necessite de resolução ou que seja possível de resolver, não há motivo de tirar a atenção das pessoas de outras tarefas mais relevantes.   O problema monitorado precisa de um fluxo de resolução definido   Quando nos depararmos com um alerta, eu vou olhar para você, você vai olhar para mim e o que vamos fazer? Está não é a situação na qual queremos nos encontrar uma vez que sabemos o que estamos procurando, é bem provável que se existe um alerta já tenhamos presenciado o cenário do problema anteriormente.   Um monitoramento deve se atentar apenas a um único problema   Quanto mais problemas tentamos cercar em um único monitoramento, ou módulo responsável pela busca de problemas, maior a complexidade, dificuldade de manutenção, revisão e entendimento, não precisamos procurar pelo problema dentro do alerta quando no olho do furacão, não é mesmo? Quanto mais claro e explicito melhor!   Foco na performance   A ferramenta que você utiliza é performática o suficiente para conseguir buscar pelo problema que você está buscando? Ela consegue percorrer o volume de dados necessário, e também no tempo necessário para que as pessoas certas sejam mobilizadas para atacar o prolema antes que ele se torne crítico, ou não seja mais passível de solução?   Assertividade   Você conhece a história do menino e lobo? Havia um menino que morava com sua familia nas entranhas bosque, onde habitavam alguns animais selvagens. Certo dia esse menino resolveu pregar uma peça em seu irmão mais velho, adentrou em meio as arvores e gritou:   \"Socorro, socorro, há um lobo tentando me devorar!\"   Seu irmão empunhou um machado e correu em sua direção, mas para a sua surpresa não havia lobo algum. O menino então caiu na gargalhada e essa cena se repetiu mais algumas vezes, até que seu irmão não mais apareceu, mas o lobo faminto sim.   Em algum momento a alta incidência de falsos positivos fará com que os alertas percam a credibilidade e não recebam a devida atenção.   Por onde começar?      Entenda o real problema por qual você está buscando, uma vez que tenha isso claro fica fácil de encontra-lo uma vez que aparecer.   Garanta que o problema tenha um dono, responsável pela resolução.   Faça uma análise histórica para definir que de fato, os gatilhos que irão disparar o alerta serão assertivos. Muitas vezes estática básica pode ser uma solução simples e eficiente.   Teste, faça mocks e se assegure que tudo está funcionando corretamente antes de ir para produção, uma revisão também é sempre bem vinda, e também necessária.   Garanta que as pessoas certas, estão recebendo os alertas no momento certo.   Atente-se a edge cases, muitas vezes eles vão intervir na incidência tanto de falsos positivos como falsos negativos.   Faça um acompanhamento da efetividade dos alertas, extraia métricas, verifique se os resultados foram os esperados, assim como os problemas detectados com uma baixa incidência de falsos positivos.   Pense em escala, em algum momento poderá haver diversos problemas mapeados e a sua ferramenta pode não suportar buscar por todos eles.   Peça feedbacks dos consumidores dos monitoramentos, algum fluxo pode ter sido alterado e seu monitoramento precisará de uma atualização.   Não se esqueça que as visualizações de indicadores são complementares aos alertas, e também são ferramentas muito úteis para auxiliar o usuário final na investigação.  ","categories": ["Telemetria"],
        "tags": ["Monitoramento","Python"],
        "url": "https://dmenezesgabriel.github.io/telemetria/como-monitorar-fluxos-digitais/",
        "teaser": "https://dmenezesgabriel.github.io/assets/images/alert.jpeg"
      },{
        "title": "SEO: Gerando tráfego orgânico com seu site estático em Jekyll",
        "excerpt":"SEO é a única maneira pela qual conseguimos gerar tráfego orgânico, o que costuma a ser melhor do que trafego pago, porque significa que o usuário realmente está interessado em seu produto ou serviço, e chegou a buscar pelo seu conteúdo de alguma forma.   Atualmente existem diversos mecanismos de busca, onde é considerada uma cadeia de diferentes fatores para indexar e ranquear uma página. Grande parte destas pesquisas é feita através do Google.   Lembre-se: Apenas páginas indexadas podem ser ranqueadas!   Como saber se a sua página está indexada no Google?   Simplesmente vá até a página do Google em seu navegador e digite site:seu-site.com.br, se você conseguir visualizar o seu site nos resultados, significa que ele já está indexado.   Fatores que deverão ser indexados   Há aproximadamente 200 parâmetros que são utilizados para melhorar a indexação de uma página, contudo vamos selecionar alguns dos principais, se tratando não de conteúdo, mas estrutura.      Título e Descrição   Estrutura de URL   Mapa do site   Tag alt para imagens   Conectores de mídias sociais   Open graph e cards do Twitter   Favicon   URL única   Responsividade   Velocidade   Estes fatores garantirão 60% da otimização de SEO da página, o restante depende de criação de conteúdo, construção de links, marketing e etc…   Dica: A maioria dos itens listados podem ser implementados com a tag { % SEO % } dentro da sessão head do site, onde o único requisito é a utilização dos plugins: jekyll-paginate e jekyll-seo-tag em seu arquivo de configuração (_config.yml). Estes plugins acrescentarão a maioria das tags necessárias para um bom SEO.   Título e Descrição   O Título deve corresponder à sua descrição e ao conteúdo do artigo, toda página de seu site deve conter título e descrição única. Caso você não especifique uma descrição, o primeiro parágrafo de sua página será considerado nos resultados de busca.   O primeiro parágrafo pode muitas vezes não apresentar um conteúdo relevante e correspondente ao título da página, a recomendação é que se utilize uma descrição breve que forneça a ideia geral do artigo, e assim como o título contenha algumas das palavras chave. A descrição deve respeitar o limite de 160 caracteres, um volume maior pode ser considerado spam pelos mecanismos de busca.   A descrição não é levada em conta para o ranqueamento do site, mas fará com que o usuário se interesse em seu conteúdo e clique em seu link dentre os resultados encontrados pelo mecanismo de busca.   Os robôs do mecanismo de busca procuram pelo seu Título e Descrição dentro da tag head primeiro. Portanto, certifique-se de mantê-lo lá para que eles consigam encontra-los.   Lembre-se: Você deve explicitamente adicionar o título e descrição ao Front Matter presente em todas as suas páginas, e sua descrição deverá ser truncada em 160 caracteres. Adicione as palavras chave ao ínicio da descrição para que os usuários encontrem sua página mais rapidamente em suas buscas no Google.   Estrutura de URL   Uma URL transmite muitas informações sobre o conteúdo, tanto usuários como robôs esperam que ela esteja em sincronia com o assunto abordado, portanto faça que ela seja legível. Uma boa estrutura de URL gera maior taxa de cliques.   Atualmente mecanismos de busca são inteligentes o suficiente para detectar se a URL possui relação com o conteúdo da página, e muitos sites útilizam ids em suas estrutura, o que prejudica tanto a transmissão de informação ao usuário quanto aos robôs de busca.   Incluir a data é opcional, e somente será útil se as datas realmente importam para o seu conteúdo.   Não útilize StopWords, palavras como de, a, o, que, e, do, da, em, um, para, é, com, não, uma, … não precisam ser indexadas e apenas aumentarão o tamanho da URL.   No Jekyll, uma URL pode ser alterada renomeando o arquivo na pasta _posts.   Mapa do site   Um mapa do site é uma lista de links que contém todas suas páginas, ele estará no formato .xml. Isso ajuda os robôs de mecanismos de pesquisa a rastrearem facilmente seu site. Ele também terá metadados como datas de postagens, páginas, data da última modificação e frequência de atualização.   Mapa deste site   Se o seu site não tiver postagens ou páginas, talvez você não precise de um mapa do site.   Você pode enviar seu sitemap para os principais mecanismos de pesquisa, como Google, Bing, Yahoo e etc, para que seus respectivos robôs indexem seu site.   Deixar um link para o mapa do site disponível também é uma boa ideia. Digamos que alguém faça uma referência a uma postagem sua em um blog bem classificado, há possibilidade de um robô rastrear esse link e chegar à sua postagem.   Tag alt para imagens   As tags alternativas de uma imagem não são nada mais que o texto que é mostrado caso uma imagem não carregue. Esta tag é lida pelos robôs, o que ajuda os mecanismos de pesquisa a saber sobre o que se trata a imagem.   Conexão com mídias sociais   A conexão com redes sociais pode ser conseguida através de robôões de compartilhamento na parte inferior de suas postagens.   Open graph e cartões do Twitter   O Open Graph é uma forma de tornar mais fácil o entendimento de um link compartilhado, é possível que algumas informações sejam perdidas, ou dados indesejados sejam detectados. Para evitar que isso ocorra e para que seu link seja melhor reconhecido pelas redes sociais, a implementação do Open graph é necessária, e pode ser realizada através de plugins como jekyll-seo.   Favicon   Um favicon é um arquivo .ico geralmente com as dimensões de 16x16. Este ícone é o que a maioria dos visitantes lembrará do seu site, ele deve representar o seu site de algum modo, para que quando um usuário se depare com ele em sua barra de favoritos, consiga o assimilar a sua página.   Responsividade   Após 21 de abril de 2015, o Google tornou a responsividade um parâmetro de indexação e ranqueamento essêncial para SEO. Quase todos os temas Jekyll, mesmo o tema default, são responsivos. Caso você esteja desenvolvendo um novo tema considere um layout responsivo que se ajuste a tamanhos menores de tela.   Referências      webjeda   webjeda  ","categories": ["SEO"],
        "tags": ["SEO","Jekyll","GitHub"],
        "url": "https://dmenezesgabriel.github.io/seo/otimizar-seo-jekyll/",
        "teaser": "https://dmenezesgabriel.github.io/assets/images/seo.jpeg"
      },{
        "title": "Seleção de fundos de investimento imobiliário utilizando Python",
        "excerpt":"Os Fundos de investimento imobiliário (FIIs) são fundos constituídos por grupos de investidores com o objetivo de aplicar recursos em diversos tipos de investimentos imobiliários como shoppings centers, lages corporativas, galpões logísticos, ou até empreendimentos ainda em desenvolvimento. Ou seja, nada mais é do que investir no mercado imobiliário sem ter que comprar um imóvel.   Fundos de investimento imobiliários não são o mesmo que crowdfunding imobiliário   Seus investidores recebem retorno via dividendos ou na valorização de cotas. Os dividendos recebidos, também conhecidos como aluguéis, são distribuídos mensalmente e isêntos de imposto de renda.   Alguns de seus benefícios são:      Não há incidência de imposto sobre proventos, diferente do aluguél comum.   Não há custo com reformas.   Não há necessidade de lidar com inquilinos.   Mais acessível, por dispensar um alto investimento inicial.   Menos burocrático.   Alta liquidez devido à agilidade e à praticidade de vender os ativos quando necessário.   Baixa exposição de capital devido à diversificação.   Tipos      Fundos de renda: São aqueles constituídos por imóveis comprados, ou construídos com fins de aluguel. A renda líquida é distribuída para os cotistas. Seus contratos tendem a ser mais longos conferindo maior segurança.   Fundos de compra e venda: Tem por objetivo comprar imóveis a um valor mais baixo, que possuam expectativa de valorização e vende-lôs realizando lucro.   Fundos de desenvolvimento: Consistem na compra de terrenos para construção de empreendimentos para venda ou aluguél, as vezes com o objetivo de ganho na valorização dos imóveis. Os riscos podem surgir do embargo nas obras ou do próprio gerenciamento da construção, de imprevistos com o orçamento, problemas com licenças ambientais ou atrasos na entrega.   Fundos de recebíveis imobiliários: Também conhecidos como fundos de papéis, tem como principais representantes em seu portfolio de ativos os Certificados de Recebíveis Imobiliários (“CRI”), Letras Hipotecárias (“LH”) e Letras de Crédito Imobiliário (“LCI”).   Fundos de fundos: São similares a fundos de ações. Este tipo de fundo conta com maior taxa administrativa devido as taxas dos fundos em que este tipo de fundo tem participação, fora a sua própria, contudo possui maior diversificação.   Fundos de tijolo: Apresentam os imóveis físicos, essa aplicação tem como objetivo adquirir as propriedades para alugar, considerando o potencial de valorização ao longo do tempo.   Setores de fundos de investimento imobiliários   Shoppings   Apesar do mercado digital (E-commerce - Comércio eletrônico) ter se desenvolvido bastante, as pessoas ainda não deixaram de se dirigir aos shoppings tanto para comprar produtos como ir ao cinema, ou comer em um restaurante.      Shoppings são uma das principais opções de entretenimento familiar no Brasil.   São Multi Ativos e Multi inquilinos   Titulos e valores imobiliários   Os fundos de recebíveis, também conhecidos como fundos de papéis, trabalham predominantemente com ativos de renda fixa, mas com maior risco. Assim, as rentabilidades oferecidas costumam superar o CDI (O que é um requisito essêncial para ser considerado como opção viável de investimento).   Principáis tipos de pápeis:      CRI (Certificado de Recebíveis Imobiliários).   LCI (Letras de Crédito Imobiliário).   Letras Hipotecárias (LH).   Lajes Corporativas   O segmento de lajes corporativas, ou seja, predominantemente composto de edifícios comerciais, é o segundo maior no Brasil considerando o patrimônio somado de todos os fundos com cotas negociadas em bolsa.      Os contratos de locatários das lajes corporativas são em geral de longo prazo, em média cinco anos, com possibilidade de revisão depois de três anos. O rompimento antecipado de contrato é passível de multa multa.   Hibrído   Os FIIs híbridos podem investir em diferentes aplicações, expondo-se em todos os setores de imóveis, recebíveis imobiliários (CRI, LCI) ou em outros fundos imobiliários (cotas de FIIs).      Oferece maior diversificação comparado a uma categoria isolada.   Residêncial   Podem abranger a incorporação de novos edifícios, a compra e venda de imóveis e a renda gerada pelo aluguel das unidades.      Grande parte desses produtos de nicho têm baixa liquidez.   Hotel   Este setor gera lucro das seguintes maneiras:      Compra de participação em hotéis, explorando a renda das locações de quartos, assim como fazem outros FIIs.   Realizando a comercialização de unidades hoteleiras.   Por meio da valorização dos ativos.   Hospital   Todos os fundos são monoativos, ou seja, possuem apenas um imóvel. Eventualmente, os locatários podem optar pela saída do imóvel ou não renovar o contrato. Assim, até encontrar um novo inquilino, o fundo perderia totalmente a sua receita de aluguel, além de precisar lidar com os gastos do imóvel.   Além disso, esse é um formato de imóvel muito personalizado para hospitais. Portanto, um novo locatário acabaria sendo, necessariamente, do mesmo segmento.   Finalmente, há outro risco que é a inadimplência. Claro que ela afeta outros setores, mas para os hospitais há um desafio adicional. Caso o locatário passe a não cumprir com os pagamentos, o despejo pode ser dificultado pelo juiz em função da função social de um hospital. Prova disso é que os fundos de hospitais têm enfrentado decisões judiciais e os seus resultados foram favoráveis aos locatários.   Logística   Ao contrário de outros tipos de negócio físico, os fundos logísticos apresentam uma demanda crescente. Isso deve-se predominantemente ao crescimento do e-commerce, apesar de suas vendas serem realizada em ambiente digital, ainda é necessário garantir a entrega dos produtos fisicamente.   Características      Mono ativo: Possuem apenas um único ativo.   Multi ativo: Seu portfólio possui diversos ativos.   Mono inquilino: Seus imóveis possem apenas um inquilino.   Multi inquilino: Seus imóveis são alugados para diversos inquilinos.   Localização      O imóvel está em um local que é pertinente ao setor de atuação?   O imóvel está conservado e possui fácil acesso?   Shoppings estarão melhor localizados quando próximos de centros urbanos.   Galpões logísticos necessitam de boa acessibilidade, devem estar perto de boas estradas.   Lages corporativas tem preferência a centros financeiros.   Taxa de vacância/ocupação      Quanto maior a taxa de vacância, há menos inquilinos para pagar aluguel, consequentemente o valor de aluguel a ser recebido pode diminuir.   Uma taxa de vacância baixa pode significar que os imóveis são bem localizados, e o fundo possui boa gestão.   É necessário analisar não só a vacância atual, mas seu histórico.   Quem são os inquilinos? Empresas grandes listadas em bolsa? (Verifica relatório gerencial do fundo)   Dividend Yield      A renda é recorrente?   Os valores apresentam baixa volatilidade?   Renda média anual real acima dos títulos públicos?   Padrão construtivo      Possui certificação AAA? (Opcional)   Os empreendimentos apresentam uma aparência atrativa?   Diversificação      Multi ativos   Multi inquilino   Ativos distribuídos em diversas regiões   Líquidez      As cotas do fundo devem possuir negociação diária acima de R$100.000,00.   Valuation           P/VPA: Este indicador relaciona o preço da cota ao valor patrimonial proporcional a ela, e indica quanto os cotistas aceitam pagar pelo patrimônio líquido da fundo. Este valor é obtido através da divisão entre o preço da ação e Valor Patrimonial por Ação (VPA).              Um valor baixo pode apresentar uma oportunidade, mas também pode ser um indicativo de que este fundo tem problemas estruturais.       Um valor acima pode representar que o valor está mais caro ou uma expectativa de que o gestor do fundo comprará mais imóveis aumentando os proventos que serão recebidos.       Considerar valor &lt; 1,1.           Relação com investidores      Divulgação de relatórios é consistente, e seus relatório são claros e explicativos?   Demais fatores      O fundo possui pelo menos um ano de idade?   Fundos em fase de renda minima garantida podem apresentar valores de proventos insustentáveis a longo prazo.   O fundo performa melhor que o IFIX?   Verificar o histórico de gestão do fundo imobiliário.   Evitar fundos de desenvolvimento ou incorporação, porque há imóveis que ainda estão em construção, como o imóvel não está pronto, não foi vendido ou alugado, todo risco vai para o cotista.   Constituição de carteira      Diversificação de 4 ~ 10 fundos para facilitar a administração.   Bônus      Fique atento aos eventos de subscrição para poder realizar arbitragem.   400: Invalid request   Links úteis      Funds Exploer   Trademap   Fiis   Clube fii   Status Invest   B3  ","categories": ["Python"],
        "tags": ["Python","Investimentos"],
        "url": "https://dmenezesgabriel.github.io/python/selecao-fundos-imobiliarios-python/",
        "teaser": "https://dmenezesgabriel.github.io/assets/images/fiis.jpeg"
      },{
        "title": "Download de uma playlist Youtube Mix com Python, Selenium e Docker",
        "excerpt":"Recentemente comecei a utilizar um smartwatch para realizar a minha rotina de exercícios ao ar live. Apenas com ele, ou seja, sem a necessidade de carregar meu celular consigo os dados de trajeto, tempo, frequência cardíaca, entre outros indicadores para mensurar o meu desempenho, além de que ele possui espaço de armazenamento suficiente para que eu possa carregar algumas músicas.   O que seria do treino de cada dia sem uma trilha sonora, não é mesmo?   O smartwatch que utilizo não suporta aplicativos como Amazon Music ou Spotify, logo optei por baixar as músicas do Youtube e transferir para o armazenamento interno do relógio. A única questão é que selecionar as músicas uma a uma não é uma opção, hoje em dia há vários algorítimos de sugestão e a minha preferência é usufruir das playlists “Mix” geradas automáticamente, a partir de uma música especifica.   E qual é o problema?   Atualmente a maioria dos aplicativos de download de videos/audio do Youtube não suporta e não reconhece essas playlists como playlists de fato, então optei pelo seguinte fluxo:      Fornecer a url de uma playlist Youtube Mix como argumento;   Este argumento será passado a uma função que irá buscar os links das músicas no código fonte da página da pseudo playlist;   Cada uma das músicas sera baixada para o meu diretório local, na pasta downloads/.   Python, Selenium e Docker      Python: Oferece simplicidade no desenvolvimento do código, e é bastante útilizado para realização de web scrapping.   Selenium: Framework de automação web, optei por sua utilização devido a biblioteca requests do python não ser capaz de lidar com o javascript utilizado para gerar o conteúdo da página.   Docker: Ué, mas na minha máquina funciona? Vamos evitar isso!   Código   Se você preferir ir direto ao código:      Repositório   Se não, vamos começar pela estrutura do diretório:      Geralmente apenas o código fonte, ou seja, apenas o que está dentro da past src é levado para dentro do container, que por sua vez, simulará um sistema operacional isolado. Um dos motivos para tal prática é a segurança, neste exemplo não utilizamos variáveis de ambiente sensíveis como chaves de API e etc, mas caso fossem utilizadas elas não deveriam ir para dentro do container uma vez que você exponha as suas portas a internet, ele está passível de invasões, mas neste caso estamos rodando localmente então considere apenas como uma curiosidade.   . ├── Dockerfile ├── LICENSE ├── Makefile ├── README.md ├── requirements.txt └── src     ├── downloads     └── youtube.py   requirements.txt: Dependências para executar o código escrito em python neste cenário.   youtube-dl==2020.9.6 bs4==0.0.1 selenium==3.141.0 PyVirtualDisplay==1.3.2   youtube.py: Este arquivo carrega as funções auxiliares tanto para baixar o aúdio através do youtube-dl quanto realizar a busca dos links utilizando o Selenium para interação com o navegador Firefox.    import logging import os import subprocess import sys  from bs4 import BeautifulSoup from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver.support import expected_conditions as EC from selenium.webdriver.support.ui import WebDriverWait  from pyvirtualdisplay import Display  logging.getLogger().setLevel(logging.INFO)  DOMAIN = 'https://www.youtube.com'   def get_links(url):     display = Display(visible=0, size=(800, 600))     display.start()     logging.info('Initialized virtual display..')      firefox_profile = webdriver.FirefoxProfile()     firefox_profile.set_preference('browser.download.folderList', 2)     firefox_profile.set_preference(         'browser.download.manager.showWhenStarting', False)     firefox_profile.set_preference('browser.download.dir', os.getcwd())     firefox_profile.set_preference(         'browser.helperApps.neverAsk.saveToDisk', 'text/csv')      logging.info('Prepared firefox profile..')      browser = webdriver.Firefox(firefox_profile=firefox_profile)     logging.info('Initialized firefox browser..')      browser.get(url)     logging.info('Accessed %s ..', url)     logging.info('Page title: %s', browser.title)     WebDriverWait(browser, 3).until(EC.presence_of_element_located(                            (By.ID, 'wc-endpoint'))).text     # soup = BeautifulSoup(html, 'html.parser')     html = browser.page_source     soup = BeautifulSoup(html, \"html.parser\")     links_list = []     for link in soup.findAll('a', attrs={'id': 'wc-endpoint'}):         href = link.get('href')         if href.startswith('/watch?'):             links_list.append(DOMAIN + href)      logging.info('%s items found', len(links_list))     browser.quit()     display.stop()     logging.info(links_list)      return links_list   def download_from_url(link, destination_folder):     args = ['youtube-dl', '-i', '--no-playlist', '--extract-audio',             '--audio-format', 'mp3', '--audio-quality', '0', link, '-o',             destination_folder+'%(title)s.%(ext)s']      p = subprocess.Popen(args)     # Wait for process to terminate.     p.communicate()     if p.returncode == 0:         return 'Successful download'     else:         return 'Download Failed'   def download(url=None):     if not url:         url = sys.argv[1]     links_list = get_links(url)     for link in links_list:         download_from_url(link, './downloads/')   if __name__ == '__main__':     download()   Dockerfile: É básicamente a receita do bolo, ou seja, contém todas as dependências necessárias para gerar uma abstração do sistema operacional, em forma de imagem, e utilizando os recursos disponíveis em sua maquina.    # Pull official base image FROM python:3.8.1-slim-buster # Set envrionment variables # Prevents Python from writing pyc files to disc (equivalent to python -B option) ENV PYTHONDONTWRITEBYTECODE 1 # Prevents Python from buffering stdout and stderr (equivalent to python -u option) ENV PYTHONBUFFERED 1 # Language ENV LANG C.UTF-8 ENV LC_ALL C.UTF-8 # Install system dependencies RUN apt-get update &amp;&amp; apt-get install -y \\     fonts-liberation libappindicator3-1 libasound2 libatk-bridge2.0-0 \\     libnspr4 libnss3 lsb-release xdg-utils libxss1 libdbus-glib-1-2 \\     curl unzip wget \\     xvfb \\     ffmpeg # install geckodriver and firefox RUN GECKODRIVER_VERSION=`curl https://github.com/mozilla/geckodriver/releases/latest | grep -Po 'v[0-9]+.[0-9]+.[0-9]+'` &amp;&amp; \\     wget https://github.com/mozilla/geckodriver/releases/download/$GECKODRIVER_VERSION/geckodriver-$GECKODRIVER_VERSION-linux64.tar.gz &amp;&amp; \\     tar -zxf geckodriver-$GECKODRIVER_VERSION-linux64.tar.gz -C /usr/local/bin &amp;&amp; \\     chmod +x /usr/local/bin/geckodriver &amp;&amp; \\     rm geckodriver-$GECKODRIVER_VERSION-linux64.tar.gz  RUN FIREFOX_SETUP=firefox-setup.tar.bz2 &amp;&amp; \\     apt-get purge firefox &amp;&amp; \\     wget -O $FIREFOX_SETUP \"https://download.mozilla.org/?product=firefox-latest&amp;os=linux64\" &amp;&amp; \\     tar xjf $FIREFOX_SETUP -C /opt/ &amp;&amp; \\     ln -s /opt/firefox/firefox /usr/bin/firefox &amp;&amp; \\     rm $FIREFOX_SETUP  # Set working directory ENV APP_HOME /usr/src/app WORKDIR /$APP_HOME # Install python dependencies RUN pip install --upgrade pip COPY ./requirements.txt /usr/src/app/requirements.txt RUN pip install -r requirements.txt # Copy project COPY . $APP_HOME/  CMD tail -f /dev/null  ","categories": ["Python"],
        "tags": ["Python","Docker","Selenium","Youtube"],
        "url": "https://dmenezesgabriel.github.io/python/youtube-mix-download-python/",
        "teaser": "https://dmenezesgabriel.github.io/assets/images/youtube-mix.jpeg"
      },{
        "title": "Como instalar Docker e Docker Compose no Raspberry Pi",
        "excerpt":"O Docker é bastante utilizado no mundo de desenvolvimento de software, com ele é possível virtualizar a mesma infraestrutura de sua máquina, em qualquer ambiente que aceite containers Docker. Basicamente podemos criar uma rede de máquinas virtuais isoladas logicamente do host, permitindo a representação fiel tanto em modo de desenvolvimento, quanto em modo de produção.   Para os desenvolvedores, não há mais a desculpa “mas na minha máquina funcionou! Deve ser algum problema na sua…”.   Além da segurança, qual é a vantagem desse isolamento?   O Docker permite a exclusão de seus containers e imagens sem que isso afete qualquer outro componente da maquina em que está instalado.   Instalando o Docker      Atualize o sistema   sudo apt-get update &amp;&amp; \\ sudo apt-get upgrade      Instale os pré requisitos   sudo apt-get install apt-transport-https ca-certificates software-properties-common -y      Baixe e instale o Docker   curl -fsSL get.docker.com -o get-docker.sh &amp;&amp; sh get-docker.sh      Depois da instalação, é necessário adicionarmos o usuário pi ao grupo docker, para podermos executar imagens sem sudo   sudo usermod -aG docker pi      Importe a chave GPG   sudo curl https://download.docker.com/linux/raspbian/gpg      Configure o repositório Docker      Abra o arquivo com o editor de texto   vim /etc/apt/sources.list      Adicione a linha   deb https://download.docker.com/linux/raspbian/ stretch stable      Habilite o Docker para executar sempre que o sistema for iniciado   sudo systemctl enable docker      Reinicie o sistema para que as alterações tenham efeito   sudo reboot -h now      E verifique se tudo deu certo com o comando abaixo:   sudo docker run --rm hello-world   Instalando o Docker Compose      Instalando as dependências necessárias   sudo apt update &amp;&amp; \\ sudo apt install -y python3-pip libffi-dev      Instalando o Docker Compose   sudo pip3 install docker-compose   Observações   Dependendo da arquitetura do modelo, e do sistema operacional instalado no Raspberry Pi você terá que utilizar imagens ARM, no caso do python por exemplo:   FROM arm32v7/python:3.7-slim-buster  ","categories": ["Python"],
        "tags": ["Python","Docker","RaspberryPi"],
        "url": "https://dmenezesgabriel.github.io/python/como-instalar-docker-docker-compose-raspberrypi/",
        "teaser": "https://dmenezesgabriel.github.io/assets/images/docker-pi.jpeg"
      },{
        "title": "Conheça as vantagens e desvantagens do Tesouro Direto, e da Previdência Privada",
        "excerpt":"Conheça as vantagens e desvantagens do Tesouro Direto, e da Previdência Privada, dois dos investimentos mais conhecidos e conservadores para auxiliar na sua aposentadoria. Lembrando que estes não devem ser as únicas cestas para colocar todos seus ovos.   Tesouro Direto   Oposta a crença popular, o Tesouro Direto não é um produto do mercado financeiro, na verdade, é o nome dado ao programa do Tesouro Nacional para incentivar investimentos em papéis da dívida publica do Governo Federal   O Tesouro Direto possui o maior nível de segurança do país entre todos investimentos disponíveis, Mesmo sem garantias do FGC(Fundo Garantidor de Crédito) o seu risco se da apenas no evento de quebra do Estado.   O portfolio do Tesouro Direto é composto por três tipos de títulos públicos:   Prefixados   A rentabilidade do titulo é definida em contrato, e o investidor sabe no momento da aplicação qual será o montante final a ser recebido com seu investimento.   Títulos:      Tesouro Prefixado (LTN)   Tesouro Prefixado com Juros Semestrais (NTN-F)   Pós-fixados   A rentabilidade está atrelada a algum indicador econômico, como a taxa básica de juros (Selic), por este motivo não é possível prever suas variações até o momento do resgate do título.   Títulos:      Tesouro Selic (LFT): No momento desta publicação é altamente indicado para reservas de emergência, onde se aplica de 6 a 12 meses de seus custos de vida contando com todas regalias. Neste investimento você possuirá líquidez em D+1, contudo espere 31 dias para realizar o primeiro saque senão estará sujeito ao pagamento de IOF, e devemos considerar que alíquota de IR é regressiva de 22,5% até 15%, ou seja, quanto mais tempo ficar aplicado menos imposto será pago.   Híbrido   A rentabilidade é formada por uma parte fixa definida em contrato e outra parte que varia conforme as oscilações do indicador ao qual o titulo esta atrelado, é muito comum encontrarmos títulos atrelados a inflação e mais algum percentual fixo.   Títulos:      Tesouro IPCA+ (NTN-B Principal)   Tesouro IPCA+ com Juros Semestrais (NTN-B)   Tesouro IGPM+ com Juros Semestrais (NTN-C)   O Tesouro IPCA é um bom candidato para aposentadoria.   Vantagens do Tesouro Direto      Rendimento   Flexibilidade   Líquidez   Baixo risco   Desvantagens do Tesouro Direto      Taxa de custódia da B3 (0,25% a.a)   Previdência Privada   Os planos de Previdência Privada, que podem ser abertos ou fechados, são aplicações indicadas para objetivos de longo prazo, como complemento de renda para aposentadoria.           Planos fechados: Os planos fechados, também conhecidos como fundos de pensão, recebem esse nome por serem acessíveis apenas para funcionários vinculados a uma determinada empresa. Esse tipo de previdência não tem fins lucrativos. Por isso, geralmente possui um custo menor que os demais fundos ofertados no mercado, muitas vezes não possuem taxas ou apenas uma taxa de administração            Planos abertos: Os planos abertos de previdência privada estão disponíveis para qualquer pessoa, eles são emitidos por instituições financeiras, e distribuídos por corretoras de valores, corretoras de seguros e bancos. Os dois principais tipos de previdência privada aberta são PGBL e VGBL, onde a principal diferença é tida no modelo de tributação.       PGBL - Plano Gerador de Benefício Livre   Este plano é mais indicado para quem faz declaração de Imposto de Renda por meio do formulário completo. Neste tipo de previdência, é possível abater seus aportes no IR, respeitando o limite de até 12% da renda do ano. Ou seja, este plano serve melhor a quem é CLT, e possui muitas despesas dedutíveis.      Optar por este modelo caso faça declaração de Imposto de Renda por meio do formulário completo   Contribuir com até 12% da renda anual tributável, a fim de usufruir da dedução na base de cálculo do imposto de renda.   O montante acumulado no plano será tributado em sua totalidade, e não apenas em seus rendimentos.   VGBL - Vida Gerador de Benefício Livre   Esta modalidade é classificada como seguro de pessoas, e é mais indicada para aqueles que usam o formulário simples na declaração do IR, ou seja, quem não possui tantas despesas.      Optar por este modelo caso faça declaração de Imposto de Renda simplificada ou seja isento.   Caso haja pretensão de aplicar mais que 12% de sua renda bruta anual.   Os valores depositados não podem ser deduzidos da base de cálculo do IR. Contudo a tributação incide apenas nos rendimentos.   Parecido com o fundo de investimento convencional.   Tributação progressiva   O regime progressivo segue a tabela da alíquota do IR incidente sobre a renda anual tributável.   Anual:                  Base de cálculo (R$)       Alíquota (%)       Parcela a deduzir do IRPF (R$)                       Até 22.847,76       -       -                 De 22.847,77 até 33.919,80       7,5       1.713,58                 De 33.919,81 até 45.012,60       15       4.257,57                 De 45.012,61 até 55.976,16       22,5       7.633,51                 Acima de 55.976,16       27,5       10.432,32           Mensal:                  Base de cálculo (R$)       Alíquota (%)       Parcela a deduzir do IRPF (R$)                       Até 1.903,98       -       -                 De 1.903,99 até 2.826,65       7,5       142,80                 De 2.826,66 até 3.751,05       15       354,80                 De 3.751,06 até 4.664,68       22,5       636,13                 Acima de 4.664,68       27,5       869,36           Fonte: Receita Federal do Brasil, 2020   Tributação regressiva   A tributação vinculada ao tempo da aplicação e possui uma tabela própria, quanto maior for o prazo de permanência dos recursos, menor será a alíquota de imposto de renda na hora do resgate ou recebimento da renda.   Este regime, em geral, é uma boa escolha para quem tem a perspectiva de utilizar os recursos a longo prazo, em um período superior a dez anos.                  Prazo do Aporte       Alíquota (%)                       Até 2 anos       35                 De 2 a 4 anos       30                 De 4 a 6 anos       25                 De 6 a 8 anos       20                 De 8 a 10 anos       15                 Acima de 10 anos       10           Taxas   Caso inexistentes ou mais próximas de zero melhor.      Taxa de carregamento: Taxas descontadas geralmente a cada aplicação ou retirada (de 0% a 6%). Atualmente muitas instituições não cobram mais taxa de carregamento, negocie!   Taxa de administração: Todo fundo possui taxas de administração (De 0.x% a 5%).   Taxa de saída: Multa cobrada na saida antes do prazo minimo estabelecido.   Vantagens da previdência privada      Abatimento do IR (PGBL)   Menor alíquota a longo prazo (10 anos de aplicação)   Fundo sem come-cotas   Flexibilidade (portabilidade)   Diversificação   Caso não esteja satisfeito com a sua previdência é possível realizar portabilidade para outro plano sem pagar taxas.   Sucessão patrimonial (Não passa por inventário)   Desvantagens da previdência privada      Taxas (Administração e Carregamento)   Não há a cobertura do FGC (Fundo Garantidor de Crédito)   Período de carência   Investimento Inicial   Evite fundos de previdência que possuem taxa de carregamento e taxa de custódia, como os oferecidos pelos grandes bancos de varejo.   Observações      Analisar histórico de desempenho do fundo vinculado ao plano   Verificar histórico de rentabilidade   Avaliar a qualidade da gestão   É importante que os rendimentos superem o CDI   A tributação de retirada é calculada sobre a data de cada aplicação.   Diferenças entre Fundos de Investimentos e Previdência Privada   A Previdência Privada é uma modalidade de investimento mais conservadora, e seus ganhos são obtidos na acumulação de longo prazo, dedução fiscal através do PGBL, e através da tabela de regressiva do imposto de renda, que atualmente é a menor alíquota disponível para um produto financeiro podendo chegar a 10% (Ao final de 10 anos, contando da data de cada aporte). Além de que com a previdência é possível fazer o resgate do recurso em formato de renda.   Outro benefício é o plano sucessório, onde para efeito de falecimento não é necessário passar pelo processo de inventário caso seu plano de previdência seja de distribuição limitada.   Não passar pelo inventário não significa que não terá a cobrança do ITCMD, onde cada estado possui sua alíquota.   Links úteis      Info Fundos  ","categories": ["Investimentos"],
        "tags": ["Investimentos"],
        "url": "https://dmenezesgabriel.github.io/investimentos/conheca-vantagens-desvantagens-tesouro-direto-previdencia-privada/",
        "teaser": "https://dmenezesgabriel.github.io/assets/images/treasure.jpeg"
      },{
        "title": "Docker, eliminando a procura diária por esses comandos no Google.",
        "excerpt":"Quando você utiliza muitos containers Docker em seu dia a dia para diversos programas diferentes, containers antigos podem ficar “pendurados”, juntando poeira e acumulando espaço em seu disco. Ou então você pode querer acessar a shell, mais conhecida como linha de comando, mas não consegue decorar qual comando utilizar?   Listas de comandos para você não precisar mais acessar o Google   Docker      Parar todos containers ativos:   docker stop $(docker ps -a -q)      Deletar todos containers:   docker rm $(docker ps -a -q)      Apagar todas imagens:   docker rmi -f $(docker images -a -q)      Informações detalhadas sobre um object Docker:   docker inspect &lt;CONTAINER ID&gt;      Remove objetos Docker não usados (containers, imagens, redes e volumes):   docker system prune      Remove apenas os containers parados:   docker rm $(docker ps -aq -f status=exited)   Docker Compose      Constrói a imagem de um container desconsiderando o cache:   docker-compose build --no-cache &lt;SERVICE NAME&gt;      Acessa a shell de um container:   docker-compose run --rm &lt;SERVICE NAME&gt; /bin/sh   Faixa bônus   Abaixo um simples e não otimizado docker-compose.yml, que utilizo no desenvolvimento deste blog:   version: \"3\"  services:   jekyll-draft:     image: jekyll/jekyll:latest     command: jekyll serve --watch --draft --livereload     ports:       - 4000:4000     volumes:       - .:/srv/jekyll    jekyll-dev:     image: jekyll/jekyll:latest     command: jekyll serve --watch --trace --livereload     ports:       - 4000:4000     volumes:       - .:/srv/jekyll  ","categories": ["Docker"],
        "tags": ["Docker","Jekyll"],
        "url": "https://dmenezesgabriel.github.io/docker/docker-comandos-procura-diaria-google/",
        "teaser": "https://dmenezesgabriel.github.io/assets/images/docker-commands.jpeg"
      }]
